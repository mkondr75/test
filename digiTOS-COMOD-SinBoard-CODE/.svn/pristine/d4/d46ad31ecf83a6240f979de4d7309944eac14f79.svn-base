
digiTOS-COMOD-SinBoard-CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08004be4  08004be4  00014be4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000024c  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003cc  20000250  080051d4  00020250  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000061c  080051d4  0002061c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002458e  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004aad  00000000  00000000  00044802  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009758  00000000  00000000  000492af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000db0  00000000  00000000  00052a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001380  00000000  00000000  000537b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ac6a  00000000  00000000  00054b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004942  00000000  00000000  0005f7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000640e4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002af8  00000000  00000000  00064160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000250 	.word	0x20000250
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bcc 	.word	0x08004bcc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000254 	.word	0x20000254
 8000104:	08004bcc 	.word	0x08004bcc

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000238:	220c      	movs	r2, #12
 800023a:	2100      	movs	r1, #0
 800023c:	a801      	add	r0, sp, #4
 800023e:	f004 f87e 	bl	800433e <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000242:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8000244:	4c24      	ldr	r4, [pc, #144]	; (80002d8 <MX_ADC_Init+0xa4>)
 8000246:	4b25      	ldr	r3, [pc, #148]	; (80002dc <MX_ADC_Init+0xa8>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000248:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024a:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 800024e:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000250:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000252:	32ff      	adds	r2, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000254:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000256:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000258:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025a:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800025c:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800025e:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000260:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000262:	6223      	str	r3, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000264:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000266:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000268:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800026a:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026c:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800026e:	f001 f845 	bl	80012fc <HAL_ADC_Init>
 8000272:	2800      	cmp	r0, #0
 8000274:	d001      	beq.n	800027a <MX_ADC_Init+0x46>
  {
    Error_Handler();
 8000276:	f000 fc3d 	bl	8000af4 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	015b      	lsls	r3, r3, #5
 800027e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000280:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000282:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000286:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000288:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800028a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800028c:	f001 f9fe 	bl	800168c <HAL_ADC_ConfigChannel>
 8000290:	2800      	cmp	r0, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC_Init+0x64>
  {
    Error_Handler();
 8000294:	f000 fc2e 	bl	8000af4 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000298:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800029a:	a901      	add	r1, sp, #4
 800029c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 800029e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002a0:	f001 f9f4 	bl	800168c <HAL_ADC_ConfigChannel>
 80002a4:	2800      	cmp	r0, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC_Init+0x78>
  {
    Error_Handler();
 80002a8:	f000 fc24 	bl	8000af4 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002ac:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ae:	a901      	add	r1, sp, #4
 80002b0:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80002b2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b4:	f001 f9ea 	bl	800168c <HAL_ADC_ConfigChannel>
 80002b8:	2800      	cmp	r0, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC_Init+0x8c>
  {
    Error_Handler();
 80002bc:	f000 fc1a 	bl	8000af4 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80002c0:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c2:	a901      	add	r1, sp, #4
 80002c4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80002c6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c8:	f001 f9e0 	bl	800168c <HAL_ADC_ConfigChannel>
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80002d0:	f000 fc10 	bl	8000af4 <Error_Handler>
  }

}
 80002d4:	b005      	add	sp, #20
 80002d6:	bd30      	pop	{r4, r5, pc}
 80002d8:	200002c8 	.word	0x200002c8
 80002dc:	40012400 	.word	0x40012400

080002e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	0005      	movs	r5, r0
 80002e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	2214      	movs	r2, #20
 80002e8:	2100      	movs	r1, #0
 80002ea:	a803      	add	r0, sp, #12
 80002ec:	f004 f827 	bl	800433e <memset>
  if(adcHandle->Instance==ADC1)
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <HAL_ADC_MspInit+0x94>)
 80002f2:	682a      	ldr	r2, [r5, #0]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d13a      	bne.n	800036e <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002f8:	2080      	movs	r0, #128	; 0x80
 80002fa:	491f      	ldr	r1, [pc, #124]	; (8000378 <HAL_ADC_MspInit+0x98>)
 80002fc:	0080      	lsls	r0, r0, #2
 80002fe:	698a      	ldr	r2, [r1, #24]
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel2;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000300:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000302:	4302      	orrs	r2, r0
 8000304:	618a      	str	r2, [r1, #24]
 8000306:	698b      	ldr	r3, [r1, #24]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000308:	0076      	lsls	r6, r6, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 800030a:	4003      	ands	r3, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	694a      	ldr	r2, [r1, #20]
 8000314:	0280      	lsls	r0, r0, #10
 8000316:	4302      	orrs	r2, r0
 8000318:	614a      	str	r2, [r1, #20]
 800031a:	694b      	ldr	r3, [r1, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4003      	ands	r3, r0
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 8000326:	2326      	movs	r3, #38	; 0x26
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = V_OUT_Pin|C_OUT_Pin|DC_FEEDBACK_Pin;
 800032a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032c:	3b23      	subs	r3, #35	; 0x23
 800032e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	f001 fd36 	bl	8001da0 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel2;
 8000334:	4c11      	ldr	r4, [pc, #68]	; (800037c <HAL_ADC_MspInit+0x9c>)
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_ADC_MspInit+0xa0>)
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000338:	2200      	movs	r2, #0
    hdma_adc.Instance = DMA1_Channel2;
 800033a:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000346:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000348:	0020      	movs	r0, r4
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 800034a:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800034c:	6062      	str	r2, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800034e:	60a2      	str	r2, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000350:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000352:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000354:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000356:	f001 fb09 	bl	800196c <HAL_DMA_Init>
 800035a:	2800      	cmp	r0, #0
 800035c:	d001      	beq.n	8000362 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800035e:	f000 fbc9 	bl	8000af4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_ADC_DMA_CH2);
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_ADC_MspInit+0xa4>)
 8000364:	6813      	ldr	r3, [r2, #0]
 8000366:	4333      	orrs	r3, r6
 8000368:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800036a:	63ec      	str	r4, [r5, #60]	; 0x3c
 800036c:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036e:	b008      	add	sp, #32
 8000370:	bd70      	pop	{r4, r5, r6, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	40012400 	.word	0x40012400
 8000378:	40021000 	.word	0x40021000
 800037c:	20000284 	.word	0x20000284
 8000380:	4002001c 	.word	0x4002001c
 8000384:	40010000 	.word	0x40010000

08000388 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000388:	b510      	push	{r4, lr}

  hcrc.Instance = CRC;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_CRC_Init+0x34>)
 800038c:	4c0c      	ldr	r4, [pc, #48]	; (80003c0 <MX_CRC_Init+0x38>)
 800038e:	6023      	str	r3, [r4, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000390:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000392:	0020      	movs	r0, r4
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000394:	7123      	strb	r3, [r4, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000396:	7163      	strb	r3, [r4, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000398:	6163      	str	r3, [r4, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800039a:	61a3      	str	r3, [r4, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800039c:	3301      	adds	r3, #1
 800039e:	6223      	str	r3, [r4, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003a0:	f001 fa88 	bl	80018b4 <HAL_CRC_Init>
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_CRC_Init+0x24>
  {
    Error_Handler();
 80003a8:	f000 fba4 	bl	8000af4 <Error_Handler>
  }
  if (HAL_CRCEx_Init(&hcrc) != HAL_OK)
 80003ac:	0020      	movs	r0, r4
 80003ae:	f001 fadb 	bl	8001968 <HAL_CRCEx_Init>
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_CRC_Init+0x32>
  {
    Error_Handler();
 80003b6:	f000 fb9d 	bl	8000af4 <Error_Handler>
  }

}
 80003ba:	bd10      	pop	{r4, pc}
 80003bc:	40023000 	.word	0x40023000
 80003c0:	20000314 	.word	0x20000314

080003c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <HAL_CRC_MspInit+0x20>)
 80003c6:	6802      	ldr	r2, [r0, #0]
{
 80003c8:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d108      	bne.n	80003e0 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003ce:	2040      	movs	r0, #64	; 0x40
 80003d0:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <HAL_CRC_MspInit+0x24>)
 80003d2:	6951      	ldr	r1, [r2, #20]
 80003d4:	4301      	orrs	r1, r0
 80003d6:	6151      	str	r1, [r2, #20]
 80003d8:	6953      	ldr	r3, [r2, #20]
 80003da:	4003      	ands	r3, r0
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003e0:	b002      	add	sp, #8
 80003e2:	4770      	bx	lr
 80003e4:	40023000 	.word	0x40023000
 80003e8:	40021000 	.word	0x40021000

080003ec <TM_CRC_Calculate8>:
370,358,346,333,321,309,296,284,271,258,246,233,220,207,195,182,169,156,143,130,117,104,91,78,65,52,39,26,13,0};

volatile uint16_t sin_step=0;
volatile uint8_t sinStatus=0;

uint32_t TM_CRC_Calculate8(uint8_t* arr, uint32_t count, uint8_t reset) {
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <TM_CRC_Calculate8+0x38>)
	uint32_t cnt;

	/* Reset CRC data register if necessary */
	if (reset) {
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d001      	beq.n	80003f8 <TM_CRC_Calculate8+0xc>
		/* Reset generator */
		CRC->CR = CRC_CR_RESET;
 80003f4:	2201      	movs	r2, #1
 80003f6:	609a      	str	r2, [r3, #8]
	}

	/* Calculate number of 32-bit blocks */
	cnt = count >> 2;
 80003f8:	088a      	lsrs	r2, r1, #2
 80003fa:	0014      	movs	r4, r2

	/* Calculate */
	while (cnt--) {
 80003fc:	0005      	movs	r5, r0
 80003fe:	3c01      	subs	r4, #1
 8000400:	d208      	bcs.n	8000414 <TM_CRC_Calculate8+0x28>
 8000402:	0092      	lsls	r2, r2, #2
 8000404:	1880      	adds	r0, r0, r2
		/* Increase by 4 */
		arr += 4;
	}

	/* Calculate remaining data as 8-bit */
	cnt = count % 4;
 8000406:	2203      	movs	r2, #3
 8000408:	4011      	ands	r1, r2
 800040a:	1841      	adds	r1, r0, r1

	/* Calculate */
	while (cnt--) {
 800040c:	4288      	cmp	r0, r1
 800040e:	d104      	bne.n	800041a <TM_CRC_Calculate8+0x2e>
		/* Set new value */
		*((uint8_t *)&CRC->DR) = *arr++;
	}

	/* Return data */
	return CRC->DR;
 8000410:	6818      	ldr	r0, [r3, #0]
}
 8000412:	bd70      	pop	{r4, r5, r6, pc}
		CRC->DR = *(uint32_t *)arr;
 8000414:	cd40      	ldmia	r5!, {r6}
 8000416:	601e      	str	r6, [r3, #0]
 8000418:	e7f1      	b.n	80003fe <TM_CRC_Calculate8+0x12>
		*((uint8_t *)&CRC->DR) = *arr++;
 800041a:	7802      	ldrb	r2, [r0, #0]
 800041c:	3001      	adds	r0, #1
 800041e:	701a      	strb	r2, [r3, #0]
 8000420:	e7f4      	b.n	800040c <TM_CRC_Calculate8+0x20>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40023000 	.word	0x40023000

08000428 <AddUART_CRC>:
void AddUART_Header() {
	ClearUART_Buff();
	strcat(uart_buff,"@data@");
}

void AddUART_CRC() {
 8000428:	b570      	push	{r4, r5, r6, lr}
	memset(crc_buff, '\0', sizeof(crc_buff));
 800042a:	4c0b      	ldr	r4, [pc, #44]	; (8000458 <AddUART_CRC+0x30>)
 800042c:	2214      	movs	r2, #20
 800042e:	2100      	movs	r1, #0
 8000430:	0020      	movs	r0, r4
 8000432:	f003 ff84 	bl	800433e <memset>
	//uint32_t crc=Get_CRC((uint8_t *) &uart_buff, sizeof(uart_buff));
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8000436:	4d09      	ldr	r5, [pc, #36]	; (800045c <AddUART_CRC+0x34>)
 8000438:	2201      	movs	r2, #1
 800043a:	0028      	movs	r0, r5
 800043c:	2164      	movs	r1, #100	; 0x64
 800043e:	f7ff ffd5 	bl	80003ec <TM_CRC_Calculate8>
	sprintf(crc_buff, "@crc@%08X@\r\n", crc);
 8000442:	4907      	ldr	r1, [pc, #28]	; (8000460 <AddUART_CRC+0x38>)
	uint32_t crc=TM_CRC_Calculate8((uint8_t *) &uart_buff, sizeof(uart_buff), 1);
 8000444:	0002      	movs	r2, r0
	sprintf(crc_buff, "@crc@%08X@\r\n", crc);
 8000446:	0020      	movs	r0, r4
 8000448:	f003 ff82 	bl	8004350 <siprintf>
	strcat(uart_buff,crc_buff);
 800044c:	0028      	movs	r0, r5
 800044e:	0021      	movs	r1, r4
 8000450:	f003 ffa0 	bl	8004394 <strcat>

}
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	200003b8 	.word	0x200003b8
 800045c:	20000338 	.word	0x20000338
 8000460:	08004c04 	.word	0x08004c04

08000464 <ClearUART_Buff>:
	if (WaitForTX) {
		WaitForUART_TX();
	}
}

void ClearUART_Buff() {
 8000464:	b510      	push	{r4, lr}
	memset(uart_buff, '\0', sizeof(uart_buff));
 8000466:	2264      	movs	r2, #100	; 0x64
 8000468:	2100      	movs	r1, #0
 800046a:	4802      	ldr	r0, [pc, #8]	; (8000474 <ClearUART_Buff+0x10>)
 800046c:	f003 ff67 	bl	800433e <memset>
}
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	20000338 	.word	0x20000338

08000478 <Get_ChipID>:
void Get_ChipID(void) {
 8000478:	b507      	push	{r0, r1, r2, lr}
	ClearUART_Buff();
 800047a:	f7ff fff3 	bl	8000464 <ClearUART_Buff>
	sprintf(uart_buff, "@id@%08X-%08X-%08X", TM_ID_GetUnique32(0), TM_ID_GetUnique32(1), TM_ID_GetUnique32(2));
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <Get_ChipID+0x24>)
 8000480:	4907      	ldr	r1, [pc, #28]	; (80004a0 <Get_ChipID+0x28>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <Get_ChipID+0x2c>)
 8000486:	4808      	ldr	r0, [pc, #32]	; (80004a8 <Get_ChipID+0x30>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	6809      	ldr	r1, [r1, #0]
 800048c:	9100      	str	r1, [sp, #0]
 800048e:	4907      	ldr	r1, [pc, #28]	; (80004ac <Get_ChipID+0x34>)
 8000490:	f003 ff5e 	bl	8004350 <siprintf>
	AddUART_CRC();
 8000494:	f7ff ffc8 	bl	8000428 <AddUART_CRC>
}
 8000498:	bd07      	pop	{r0, r1, r2, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	1ffff7ac 	.word	0x1ffff7ac
 80004a0:	1ffff7b4 	.word	0x1ffff7b4
 80004a4:	1ffff7b0 	.word	0x1ffff7b0
 80004a8:	20000338 	.word	0x20000338
 80004ac:	08004c11 	.word	0x08004c11

080004b0 <Get_FlashSize>:
void Get_FlashSize(void) {
 80004b0:	b510      	push	{r4, lr}
	ClearUART_Buff();
 80004b2:	f7ff ffd7 	bl	8000464 <ClearUART_Buff>
    sprintf(uart_buff, "@flash_size@%02d", TM_ID_GetFlashSize());
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <Get_FlashSize+0x1c>)
 80004b8:	4905      	ldr	r1, [pc, #20]	; (80004d0 <Get_FlashSize+0x20>)
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <Get_FlashSize+0x24>)
 80004be:	b292      	uxth	r2, r2
 80004c0:	f003 ff46 	bl	8004350 <siprintf>
    AddUART_CRC();
 80004c4:	f7ff ffb0 	bl	8000428 <AddUART_CRC>
}
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	1ffff7cc 	.word	0x1ffff7cc
 80004d0:	08004c24 	.word	0x08004c24
 80004d4:	20000338 	.word	0x20000338

080004d8 <Get_Version>:
void Get_Version(void) {
 80004d8:	b510      	push	{r4, lr}
	ClearUART_Buff();
 80004da:	f7ff ffc3 	bl	8000464 <ClearUART_Buff>
	strcat(uart_buff,"@version@");
 80004de:	4c06      	ldr	r4, [pc, #24]	; (80004f8 <Get_Version+0x20>)
 80004e0:	4906      	ldr	r1, [pc, #24]	; (80004fc <Get_Version+0x24>)
 80004e2:	0020      	movs	r0, r4
 80004e4:	f003 ff56 	bl	8004394 <strcat>
    strcat(uart_buff,__DATE__);
 80004e8:	4905      	ldr	r1, [pc, #20]	; (8000500 <Get_Version+0x28>)
 80004ea:	0020      	movs	r0, r4
 80004ec:	f003 ff52 	bl	8004394 <strcat>
    AddUART_CRC();
 80004f0:	f7ff ff9a 	bl	8000428 <AddUART_CRC>
}
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000338 	.word	0x20000338
 80004fc:	08004c35 	.word	0x08004c35
 8000500:	08004c3f 	.word	0x08004c3f

08000504 <WaitForUART_TX>:

void WaitForUART_TX() {
	while (!huart1_finished_tx);
 8000504:	4a02      	ldr	r2, [pc, #8]	; (8000510 <WaitForUART_TX+0xc>)
 8000506:	6813      	ldr	r3, [r2, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0fc      	beq.n	8000506 <WaitForUART_TX+0x2>
}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000000 	.word	0x20000000

08000514 <SerialPrintln>:
	huart1_finished_tx = 0;
 8000514:	2200      	movs	r2, #0
void SerialPrintln(int WaitForTX) {
 8000516:	b510      	push	{r4, lr}
 8000518:	0004      	movs	r4, r0
	huart1_finished_tx = 0;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <SerialPrintln+0x24>)
 800051c:	601a      	str	r2, [r3, #0]
	while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*) uart_buff, sizeof(uart_buff)-1) == HAL_BUSY);
 800051e:	2263      	movs	r2, #99	; 0x63
 8000520:	4906      	ldr	r1, [pc, #24]	; (800053c <SerialPrintln+0x28>)
 8000522:	4807      	ldr	r0, [pc, #28]	; (8000540 <SerialPrintln+0x2c>)
 8000524:	f003 faf2 	bl	8003b0c <HAL_UART_Transmit_DMA>
 8000528:	2802      	cmp	r0, #2
 800052a:	d0f8      	beq.n	800051e <SerialPrintln+0xa>
	if (WaitForTX) {
 800052c:	2c00      	cmp	r4, #0
 800052e:	d001      	beq.n	8000534 <SerialPrintln+0x20>
		WaitForUART_TX();
 8000530:	f7ff ffe8 	bl	8000504 <WaitForUART_TX>
}
 8000534:	bd10      	pop	{r4, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	20000000 	.word	0x20000000
 800053c:	20000338 	.word	0x20000338
 8000540:	20000580 	.word	0x20000580

08000544 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)  // change USART instance
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_UART_TxCpltCallback+0x18>)
 8000546:	6802      	ldr	r2, [r0, #0]
{
 8000548:	b510      	push	{r4, lr}
    if (huart->Instance == USART1)  // change USART instance
 800054a:	429a      	cmp	r2, r3
 800054c:	d104      	bne.n	8000558 <HAL_UART_TxCpltCallback+0x14>
    {
    	huart1_finished_tx = 1;
 800054e:	2201      	movs	r2, #1
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_UART_TxCpltCallback+0x1c>)
 8000552:	601a      	str	r2, [r3, #0]
    	ClearUART_Buff();
 8000554:	f7ff ff86 	bl	8000464 <ClearUART_Buff>
    }
}
 8000558:	bd10      	pop	{r4, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40013800 	.word	0x40013800
 8000560:	20000000 	.word	0x20000000

08000564 <ResetWDG>:

void ResetWDG() {
 8000564:	b510      	push	{r4, lr}
	 HAL_IWDG_Refresh(&hiwdg);
 8000566:	4802      	ldr	r0, [pc, #8]	; (8000570 <ResetWDG+0xc>)
 8000568:	f001 fdec 	bl	8002144 <HAL_IWDG_Refresh>
	 //IWDG->KR = 0x0000AAAAU;
}
 800056c:	bd10      	pop	{r4, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	200003e8 	.word	0x200003e8

08000574 <buttonInit>:
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		}	
		HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
	#endif
	
	button_struct->GPIO_Pin = GPIO_Pin;
 8000574:	6002      	str	r2, [r0, #0]
	button_struct->GPIO_Port = GPIO_Port;
	button_struct->debounce_time = debounce_time;
 8000576:	9a00      	ldr	r2, [sp, #0]
	button_struct->long_press_time = long_press_time;
	button_struct->active_state = active_state;
 8000578:	7203      	strb	r3, [r0, #8]
	button_struct->debounce_time = debounce_time;
 800057a:	60c2      	str	r2, [r0, #12]
	button_struct->long_press_time = long_press_time;
 800057c:	9a01      	ldr	r2, [sp, #4]
	
	button_struct->short_press_handled = 0;
 800057e:	2300      	movs	r3, #0
	button_struct->long_press_time = long_press_time;
 8000580:	6102      	str	r2, [r0, #16]
	button_struct->long_press_handled = 0;
	button_struct->_on_press_time = 0;
	button_struct->_previous_state = button_off;
 8000582:	2201      	movs	r2, #1
	button_struct->GPIO_Port = GPIO_Port;
 8000584:	6041      	str	r1, [r0, #4]
	button_struct->short_press_handled = 0;
 8000586:	7503      	strb	r3, [r0, #20]
	button_struct->long_press_handled = 0;
 8000588:	7543      	strb	r3, [r0, #21]
	button_struct->_on_press_time = 0;
 800058a:	6183      	str	r3, [r0, #24]
	button_struct->_previous_state = button_off;
 800058c:	75c2      	strb	r2, [r0, #23]
	button_struct->_state_changed = 0;
 800058e:	7583      	strb	r3, [r0, #22]
	button_struct->_state = noEvent;
 8000590:	7243      	strb	r3, [r0, #9]
}
 8000592:	4770      	bx	lr

08000594 <_button_state>:
/*	PRIVATE FUNCTIONS */
/**********************************************************/
/* Low level GPIO read routine.
button_on - button is currently read as pressed
*/
_phy_state_t _button_state(button_struct_t *button_struct){
 8000594:	b510      	push	{r4, lr}
 8000596:	0004      	movs	r4, r0
	if(HAL_GPIO_ReadPin(button_struct->GPIO_Port, button_struct->GPIO_Pin) == button_struct->active_state){
 8000598:	8801      	ldrh	r1, [r0, #0]
 800059a:	6840      	ldr	r0, [r0, #4]
 800059c:	f001 fd18 	bl	8001fd0 <HAL_GPIO_ReadPin>
 80005a0:	7a23      	ldrb	r3, [r4, #8]
 80005a2:	1a18      	subs	r0, r3, r0
 80005a4:	1e43      	subs	r3, r0, #1
 80005a6:	4198      	sbcs	r0, r3
 80005a8:	b2c0      	uxtb	r0, r0
		return button_on;
	}
	else{
		return button_off;
	}
}
 80005aa:	bd10      	pop	{r4, pc}

080005ac <buttonUpdate>:
button_state_t buttonUpdate(button_struct_t *button_struct){
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	0004      	movs	r4, r0
	_phy_state_t state = _button_state(button_struct);	// get button state
 80005b0:	f7ff fff0 	bl	8000594 <_button_state>
	if(state != button_struct->_previous_state){	// state is	different
 80005b4:	7de6      	ldrb	r6, [r4, #23]
	_phy_state_t state = _button_state(button_struct);	// get button state
 80005b6:	0005      	movs	r5, r0
	if(state != button_struct->_previous_state){	// state is	different
 80005b8:	4286      	cmp	r6, r0
 80005ba:	d01a      	beq.n	80005f2 <buttonUpdate+0x46>
		if(state == button_on){	
 80005bc:	2800      	cmp	r0, #0
 80005be:	d107      	bne.n	80005d0 <buttonUpdate+0x24>
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 80005c0:	f000 fe86 	bl	80012d0 <HAL_GetTick>
			button_struct->_state_changed = 1;	// state is changed
 80005c4:	2301      	movs	r3, #1
			button_struct->_on_press_time = HAL_GetTick(); // get current time
 80005c6:	61a0      	str	r0, [r4, #24]
			button_struct->_state_changed = 1;	// state is changed
 80005c8:	75a3      	strb	r3, [r4, #22]
			button_struct->_previous_state = button_on;
 80005ca:	75e5      	strb	r5, [r4, #23]
			return_status = noEvent;
 80005cc:	2000      	movs	r0, #0
 80005ce:	e00f      	b.n	80005f0 <buttonUpdate+0x44>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 80005d0:	f000 fe7e 	bl	80012d0 <HAL_GetTick>
 80005d4:	69a3      	ldr	r3, [r4, #24]
 80005d6:	68e1      	ldr	r1, [r4, #12]
 80005d8:	0002      	movs	r2, r0
 80005da:	185b      	adds	r3, r3, r1
 80005dc:	2001      	movs	r0, #1
 80005de:	429a      	cmp	r2, r3
 80005e0:	d303      	bcc.n	80005ea <buttonUpdate+0x3e>
				button_struct->_state = isReleased;
 80005e2:	2304      	movs	r3, #4
				button_struct->_previous_state = button_off;
 80005e4:	75e0      	strb	r0, [r4, #23]
				return_status = button_struct->_state;
 80005e6:	0018      	movs	r0, r3
				button_struct->_state = isReleased;
 80005e8:	7263      	strb	r3, [r4, #9]
			button_struct->long_press_handled = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	7563      	strb	r3, [r4, #21]
			button_struct->short_press_handled = 0;
 80005ee:	7523      	strb	r3, [r4, #20]
}
 80005f0:	bd70      	pop	{r4, r5, r6, pc}
		if(state == button_on){	// state = button_on, prevous state = button_on
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d1ea      	bne.n	80005cc <buttonUpdate+0x20>
			if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->long_press_time)){	
 80005f6:	f000 fe6b 	bl	80012d0 <HAL_GetTick>
 80005fa:	69a3      	ldr	r3, [r4, #24]
 80005fc:	6922      	ldr	r2, [r4, #16]
 80005fe:	189b      	adds	r3, r3, r2
 8000600:	4298      	cmp	r0, r3
 8000602:	d308      	bcc.n	8000616 <buttonUpdate+0x6a>
				if(button_struct->long_press_handled == 1){	//was button handled yet?
 8000604:	7d63      	ldrb	r3, [r4, #21]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d102      	bne.n	8000610 <buttonUpdate+0x64>
						button_struct->_state = noEvent;
 800060a:	7266      	strb	r6, [r4, #9]
					return_status = button_struct->_state;
 800060c:	7a60      	ldrb	r0, [r4, #9]
 800060e:	e7ef      	b.n	80005f0 <buttonUpdate+0x44>
					button_struct->_state = isPressedLong;
 8000610:	2303      	movs	r3, #3
						button_struct->_state = isPressed;
 8000612:	7263      	strb	r3, [r4, #9]
 8000614:	e7fa      	b.n	800060c <buttonUpdate+0x60>
				if(HAL_GetTick() >= (button_struct->_on_press_time + button_struct->debounce_time)){	
 8000616:	f000 fe5b 	bl	80012d0 <HAL_GetTick>
 800061a:	69a3      	ldr	r3, [r4, #24]
 800061c:	68e2      	ldr	r2, [r4, #12]
 800061e:	189b      	adds	r3, r3, r2
 8000620:	4298      	cmp	r0, r3
 8000622:	d3d3      	bcc.n	80005cc <buttonUpdate+0x20>
					if(button_struct->short_press_handled == 1){	//was button handled yet?
 8000624:	7d23      	ldrb	r3, [r4, #20]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d0ef      	beq.n	800060a <buttonUpdate+0x5e>
						button_struct->_state = isPressed;
 800062a:	2302      	movs	r3, #2
 800062c:	e7f1      	b.n	8000612 <buttonUpdate+0x66>
	...

08000630 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000630:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	2001      	movs	r0, #1
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <MX_DMA_Init+0x28>)
 8000636:	6951      	ldr	r1, [r2, #20]
 8000638:	4301      	orrs	r1, r0
 800063a:	6151      	str	r1, [r2, #20]
 800063c:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000640:	4003      	ands	r3, r0
 8000642:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000644:	0011      	movs	r1, r2
 8000646:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000648:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800064a:	f001 f8cd 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800064e:	200b      	movs	r0, #11
 8000650:	f001 f904 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 8000654:	bd07      	pop	{r0, r1, r2, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	2214      	movs	r2, #20
 8000662:	2100      	movs	r1, #0
 8000664:	a803      	add	r0, sp, #12
 8000666:	f003 fe6a 	bl	800433e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_GPIO_Init+0xb4>)
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	02ad      	lsls	r5, r5, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4301      	orrs	r1, r0
 8000678:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067c:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000680:	4002      	ands	r2, r0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8000688:	4e22      	ldr	r6, [pc, #136]	; (8000714 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	432a      	orrs	r2, r5
 800068c:	615a      	str	r2, [r3, #20]
 800068e:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 8000690:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	402a      	ands	r2, r5
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	695a      	ldr	r2, [r3, #20]
                          |LED4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80006a2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	400b      	ands	r3, r1
 80006a6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80006a8:	21e9      	movs	r1, #233	; 0xe9
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80006ac:	f001 fca2 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_GPIO_Init+0xbc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	a903      	add	r1, sp, #12
 80006b8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80006ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006bc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f001 fb6e 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin;
 80006c4:	238c      	movs	r3, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin;
 80006c8:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	a903      	add	r1, sp, #12
 80006cc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = FAULT_FEEDBACK_Pin|DEV_MODE2_Pin|DEV_MODE1_Pin;
 80006ce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f001 fb64 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80006d8:	23e9      	movs	r3, #233	; 0xe9
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RST_Pin|LED3_Pin 
 80006dc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	3be8      	subs	r3, #232	; 0xe8
 80006e2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e6:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f001 fb5a 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ec:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	a903      	add	r1, sp, #12
 80006f0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f001 fb52 	bl	8001da0 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	f001 fca2 	bl	8002048 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 8000704:	0028      	movs	r0, r5
 8000706:	f001 fc9f 	bl	8002048 <HAL_I2CEx_EnableFastModePlus>

}
 800070a:	b009      	add	sp, #36	; 0x24
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400
 8000718:	00001801 	.word	0x00001801

0800071c <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <MX_IWDG_Init+0x20>)
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_IWDG_Init+0x24>)
{
 8000720:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 8000722:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000724:	2306      	movs	r3, #6
 8000726:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_IWDG_Init+0x28>)
 800072a:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 800072c:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800072e:	f001 fcb9 	bl	80020a4 <HAL_IWDG_Init>
 8000732:	2800      	cmp	r0, #0
 8000734:	d001      	beq.n	800073a <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 8000736:	f000 f9dd 	bl	8000af4 <Error_Handler>
  }

}
 800073a:	bd10      	pop	{r4, pc}
 800073c:	200003e8 	.word	0x200003e8
 8000740:	40003000 	.word	0x40003000
 8000744:	00000fff 	.word	0x00000fff

08000748 <PWM_50Hz_Init>:
	//GPIOB->CRH	&= ~GPIO_CRH_MODE15;
	//GPIOB->CRH	|= GPIO_CRH_MODE15; // gpio speed 50 MHz

	/************************** Config PWM channel ************************************/

	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <PWM_50Hz_Init+0x94>)
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <PWM_50Hz_Init+0x98>)
    TIM1->CR1 &= ~TIM_CR1_CKD;
 800074c:	4825      	ldr	r0, [pc, #148]	; (80007e4 <PWM_50Hz_Init+0x9c>)
	TIM1->PSC = 960-1; // div for clock: F = SYSCLK / [PSC + 1]
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1000; // count to 1000
 8000750:	3229      	adds	r2, #41	; 0x29
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM1->CR1 &= ~TIM_CR1_CKD; // div for dead-time: Tdts = 1/Fosc = 41.6 ns
	TIM1->CCR3 = 500; // duty cycle 50%
 8000754:	3af5      	subs	r2, #245	; 0xf5
 8000756:	3aff      	subs	r2, #255	; 0xff
 8000758:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM1->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE; // enable PWM complementary out
 800075a:	22a0      	movs	r2, #160	; 0xa0
 800075c:	6a19      	ldr	r1, [r3, #32]
 800075e:	00d2      	lsls	r2, r2, #3
 8000760:	430a      	orrs	r2, r1
 8000762:	621a      	str	r2, [r3, #32]
	//TIM1->CCER &= ~TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
	TIM1->CCER |= TIM_CCER_CC3NP; // active high level: 0 - high, 1 - low
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	6a19      	ldr	r1, [r3, #32]
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	430a      	orrs	r2, r1
 800076c:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3P; // active high level: 0 - high, 1 - low
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	6a19      	ldr	r1, [r3, #32]
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	430a      	orrs	r2, r1
 8000776:	621a      	str	r2, [r3, #32]

	TIM1->CR2 |= TIM_CR2_OIS3;
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	6859      	ldr	r1, [r3, #4]
 800077c:	0152      	lsls	r2, r2, #5
 800077e:	430a      	orrs	r2, r1
 8000780:	605a      	str	r2, [r3, #4]
	TIM1->CR2 |= TIM_CR2_OIS3N;
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	6859      	ldr	r1, [r3, #4]
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	430a      	orrs	r2, r1


	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 800078a:	2170      	movs	r1, #112	; 0x70
	TIM1->CR2 |= TIM_CR2_OIS3N;
 800078c:	605a      	str	r2, [r3, #4]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M;
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	438a      	bics	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; // positiv PWM
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	3910      	subs	r1, #16
 8000798:	430a      	orrs	r2, r1
 800079a:	61da      	str	r2, [r3, #28]
    TIM1->CR1 &= ~TIM_CR1_CKD;
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4002      	ands	r2, r0
    TIM1->BDTR &= ~TIM_BDTR_DTG;
 80007a0:	20ff      	movs	r0, #255	; 0xff
    TIM1->CR1 &= ~TIM_CR1_CKD;
 80007a2:	601a      	str	r2, [r3, #0]
    TIM1->BDTR &= ~TIM_BDTR_DTG;
 80007a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007a6:	4382      	bics	r2, r0
 80007a8:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR |= (dt & 0x1f);//~(TIM_BDTR_DTG)
 80007aa:	221e      	movs	r2, #30
 80007ac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007ae:	4302      	orrs	r2, r0
 80007b0:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR |= TIM_BDTR_DTG_6;// | TIM_BDTR_DTG_0;
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007b6:	4302      	orrs	r2, r0
 80007b8:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 80007ba:	22c0      	movs	r2, #192	; 0xc0
 80007bc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007be:	0212      	lsls	r2, r2, #8
 80007c0:	4302      	orrs	r2, r0

	timer1_deadtime(30);

	/*******************************************************************************/

	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 80007c2:	2010      	movs	r0, #16
    TIM1->BDTR |= TIM_BDTR_MOE | TIM_BDTR_AOE; // enable generation output
 80007c4:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4382      	bics	r2, r0
 80007ca:	601a      	str	r2, [r3, #0]
	TIM1->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	438a      	bics	r2, r1
 80007d0:	601a      	str	r2, [r3, #0]
	TIM1->CR1 |= TIM_CR1_CEN; // start count
 80007d2:	2201      	movs	r2, #1
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	601a      	str	r2, [r3, #0]

	}
 80007da:	4770      	bx	lr
 80007dc:	40012c00 	.word	0x40012c00
 80007e0:	000003bf 	.word	0x000003bf
 80007e4:	fffffcff 	.word	0xfffffcff

080007e8 <PWM_Sinus_Init>:
//GPIOA->CRL	|= GPIO_CRL_MODE1; // gpio speed 50 MHz

/*************************** Config PWM channel ***********************************/

	TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
	TIM3->ARR = 1000; // count to 1000
 80007e8:	21fa      	movs	r1, #250	; 0xfa
	TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <PWM_Sinus_Init+0x58>)
	TIM3->ARR = 1000; // count to 1000
 80007ee:	0089      	lsls	r1, r1, #2
void PWM_Sinus_Init (void){
 80007f0:	b510      	push	{r4, lr}
	TIM3->PSC = SinResPSC; // div for clock: F = SYSCLK / [PSC + 1]
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1000; // count to 1000
 80007f4:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIM3->CCR1 = 0; // duty cycle 0%
 80007f6:	2100      	movs	r1, #0
 80007f8:	6359      	str	r1, [r3, #52]	; 0x34
	TIM3->CCR2 = 0; // duty cycle 0%
 80007fa:	6399      	str	r1, [r3, #56]	; 0x38

	TIM3->CCER |= TIM_CCER_CC1E; // enable PWM out to PA8
 80007fc:	6a19      	ldr	r1, [r3, #32]
 80007fe:	4311      	orrs	r1, r2
 8000800:	6219      	str	r1, [r3, #32]
	//TIM3->CCER &= ~TIM_CCER_CC1P; // active high level: 0 - high, 1 - low
	TIM3->CCER |= TIM_CCER_CC1P;
 8000802:	2102      	movs	r1, #2
 8000804:	6a18      	ldr	r0, [r3, #32]
 8000806:	4301      	orrs	r1, r0

	TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 8000808:	2010      	movs	r0, #16
	TIM3->CCER |= TIM_CCER_CC1P;
 800080a:	6219      	str	r1, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC2E; // enable PWM complementary out to PA9
 800080c:	6a19      	ldr	r1, [r3, #32]
 800080e:	4301      	orrs	r1, r0
 8000810:	6219      	str	r1, [r3, #32]
	//TIM3->CCER &= ~TIM_CCER_CC1P; // active high level: 0 - high, 1 - low
	TIM3->CCER |= TIM_CCER_CC2P;
 8000812:	2120      	movs	r1, #32
 8000814:	6a1c      	ldr	r4, [r3, #32]
 8000816:	4321      	orrs	r1, r4
 8000818:	6219      	str	r1, [r3, #32]

	TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800081a:	6999      	ldr	r1, [r3, #24]
 800081c:	4c09      	ldr	r4, [pc, #36]	; (8000844 <PWM_Sinus_Init+0x5c>)
 800081e:	4021      	ands	r1, r4
 8000820:	6199      	str	r1, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 |
 8000822:	699c      	ldr	r4, [r3, #24]
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <PWM_Sinus_Init+0x60>)
 8000826:	4321      	orrs	r1, r4
 8000828:	6199      	str	r1, [r3, #24]
	 TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1; // positiv PWM1_CH1 and PWM1_CH2

	/*******************************************************************************/

	TIM3->CR1 &= ~TIM_CR1_DIR; // count up: 0 - up, 1 - down
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	4381      	bics	r1, r0
 800082e:	6019      	str	r1, [r3, #0]
	TIM3->CR1 &= ~TIM_CR1_CMS; // aligned on the front signal: 00 - front; 01, 10, 11 - center
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	3050      	adds	r0, #80	; 0x50
 8000834:	4381      	bics	r1, r0
 8000836:	6019      	str	r1, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN; // start count
 8000838:	6819      	ldr	r1, [r3, #0]
 800083a:	430a      	orrs	r2, r1
 800083c:	601a      	str	r2, [r3, #0]

}
 800083e:	bd10      	pop	{r4, pc}
 8000840:	40000400 	.word	0x40000400
 8000844:	ffff8f8f 	.word	0xffff8f8f
 8000848:	00006060 	.word	0x00006060

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	2510      	movs	r5, #16
{
 8000850:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	a808      	add	r0, sp, #32
 8000858:	f003 fd71 	bl	800433e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	002a      	movs	r2, r5
 800085e:	2100      	movs	r1, #0
 8000860:	4668      	mov	r0, sp
 8000862:	f003 fd6c 	bl	800433e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000866:	002a      	movs	r2, r5
 8000868:	2100      	movs	r1, #0
 800086a:	a804      	add	r0, sp, #16
 800086c:	f003 fd67 	bl	800433e <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 8000870:	2319      	movs	r3, #25
 8000872:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	025b      	lsls	r3, r3, #9
 8000878:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800087a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800087e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000880:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000888:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800088c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800088e:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f001 fc60 	bl	8002154 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089a:	0021      	movs	r1, r4
 800089c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a2:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a4:	f001 ff00 	bl	80026a8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008aa:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008ac:	9506      	str	r5, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	f002 f803 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80008b2:	b015      	add	sp, #84	; 0x54
 80008b4:	bd30      	pop	{r4, r5, pc}
	...

080008b8 <main>:
{
 80008b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_Init();
 80008ba:	f000 fcf1 	bl	80012a0 <HAL_Init>
  SystemClock_Config();
 80008be:	f7ff ffc5 	bl	800084c <SystemClock_Config>
  MX_GPIO_Init();
 80008c2:	f7ff fecb 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 80008c6:	f7ff feb3 	bl	8000630 <MX_DMA_Init>
  MX_CRC_Init();
 80008ca:	f7ff fd5d 	bl	8000388 <MX_CRC_Init>
  MX_ADC_Init();
 80008ce:	f7ff fcb1 	bl	8000234 <MX_ADC_Init>
  MX_IWDG_Init();
 80008d2:	f7ff ff23 	bl	800071c <MX_IWDG_Init>
  MX_TIM1_Init();
 80008d6:	f000 fb67 	bl	8000fa8 <MX_TIM1_Init>
  MX_TIM14_Init();
 80008da:	f000 fa71 	bl	8000dc0 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80008de:	f000 fc3b 	bl	8001158 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80008e2:	f000 fbd7 	bl	8001094 <MX_TIM3_Init>
  MX_TIM16_Init();
 80008e6:	f000 fa85 	bl	8000df4 <MX_TIM16_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	200c      	movs	r0, #12
 80008ee:	0011      	movs	r1, r2
 80008f0:	f000 ff7a 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80008f4:	200c      	movs	r0, #12
 80008f6:	f000 ffb1 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	200a      	movs	r0, #10
 80008fe:	0011      	movs	r1, r2
 8000900:	f000 ff72 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000904:	200a      	movs	r0, #10
 8000906:	f000 ffa9 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2004      	movs	r0, #4
 800090e:	0011      	movs	r1, r2
 8000910:	f000 ff6a 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000914:	2004      	movs	r0, #4
 8000916:	f000 ffa1 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2003      	movs	r0, #3
 800091e:	0011      	movs	r1, r2
 8000920:	f000 ff62 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 ff99 	bl	800185c <HAL_NVIC_EnableIRQ>
  ResetWDG();
 800092a:	f7ff fe1b 	bl	8000564 <ResetWDG>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2108      	movs	r1, #8
 8000932:	4860      	ldr	r0, [pc, #384]	; (8000ab4 <main+0x1fc>)
 8000934:	f001 fb5e 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
  BoardStatus=sBoot;
 800093a:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 800093c:	0011      	movs	r1, r2
 800093e:	485d      	ldr	r0, [pc, #372]	; (8000ab4 <main+0x1fc>)
 8000940:	f001 fb58 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	485a      	ldr	r0, [pc, #360]	; (8000ab4 <main+0x1fc>)
 800094a:	f001 fb53 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	4858      	ldr	r0, [pc, #352]	; (8000ab4 <main+0x1fc>)
 8000954:	f001 fb4e 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim16);
 8000958:	4c57      	ldr	r4, [pc, #348]	; (8000ab8 <main+0x200>)
  TIM3->ARR=sBoot_Delay;
 800095a:	4e58      	ldr	r6, [pc, #352]	; (8000abc <main+0x204>)
  HAL_TIM_Base_Start(&htim16);
 800095c:	0020      	movs	r0, r4
 800095e:	f002 f967 	bl	8002c30 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8000962:	0020      	movs	r0, r4
 8000964:	f002 f994 	bl	8002c90 <HAL_TIM_Base_Start_IT>
  BoardStatus=sBoot;
 8000968:	4b55      	ldr	r3, [pc, #340]	; (8000ac0 <main+0x208>)
 800096a:	701d      	strb	r5, [r3, #0]
  TIM3->ARR=sBoot_Delay;
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	62f3      	str	r3, [r6, #44]	; 0x2c
  ResetWDG();
 8000970:	f7ff fdf8 	bl	8000564 <ResetWDG>
  buttonInit(&DevModeKey, DEV_MODE1_GPIO_Port, DEV_MODE1_Pin, GPIO_PIN_RESET, 30, 2000);
 8000974:	23fa      	movs	r3, #250	; 0xfa
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	231e      	movs	r3, #30
 800097e:	2190      	movs	r1, #144	; 0x90
 8000980:	4c50      	ldr	r4, [pc, #320]	; (8000ac4 <main+0x20c>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	0052      	lsls	r2, r2, #1
 8000986:	002b      	movs	r3, r5
 8000988:	05c9      	lsls	r1, r1, #23
 800098a:	0020      	movs	r0, r4
 800098c:	f7ff fdf2 	bl	8000574 <buttonInit>
  buttonInit(&DevModeKey2, DEV_MODE2_GPIO_Port, DEV_MODE2_Pin, GPIO_PIN_RESET, 10, 500);
 8000990:	23fa      	movs	r3, #250	; 0xfa
 8000992:	2190      	movs	r1, #144	; 0x90
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4f4c      	ldr	r7, [pc, #304]	; (8000ac8 <main+0x210>)
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	3beb      	subs	r3, #235	; 0xeb
 800099c:	3bff      	subs	r3, #255	; 0xff
 800099e:	2210      	movs	r2, #16
 80009a0:	05c9      	lsls	r1, r1, #23
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	0038      	movs	r0, r7
 80009a6:	002b      	movs	r3, r5
 80009a8:	f7ff fde4 	bl	8000574 <buttonInit>
  buttonUpdate(&DevModeKey);
 80009ac:	0020      	movs	r0, r4
 80009ae:	f7ff fdfd 	bl	80005ac <buttonUpdate>
  buttonUpdate(&DevModeKey2);
 80009b2:	0038      	movs	r0, r7
 80009b4:	f7ff fdfa 	bl	80005ac <buttonUpdate>
  HAL_Delay(500);
 80009b8:	20fa      	movs	r0, #250	; 0xfa
 80009ba:	0040      	lsls	r0, r0, #1
 80009bc:	f000 fc8e 	bl	80012dc <HAL_Delay>
  Get_Version();
 80009c0:	f7ff fd8a 	bl	80004d8 <Get_Version>
  SerialPrintln(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fda5 	bl	8000514 <SerialPrintln>
  Get_ChipID();
 80009ca:	f7ff fd55 	bl	8000478 <Get_ChipID>
  SerialPrintln(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fda0 	bl	8000514 <SerialPrintln>
  Get_FlashSize();
 80009d4:	f7ff fd6c 	bl	80004b0 <Get_FlashSize>
  SerialPrintln(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fd9b 	bl	8000514 <SerialPrintln>
  ClearUART_Buff();
 80009de:	f7ff fd41 	bl	8000464 <ClearUART_Buff>
  if(buttonUpdate(&DevModeKey) == isPressed){
 80009e2:	0020      	movs	r0, r4
 80009e4:	f7ff fde2 	bl	80005ac <buttonUpdate>
 80009e8:	0035      	movs	r5, r6
 80009ea:	4e38      	ldr	r6, [pc, #224]	; (8000acc <main+0x214>)
 80009ec:	2802      	cmp	r0, #2
 80009ee:	d121      	bne.n	8000a34 <main+0x17c>
	strcpy(uart_buff,"DEV MODE - wait\r\n");
 80009f0:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <main+0x218>)
 80009f2:	0030      	movs	r0, r6
 80009f4:	f003 fcdb 	bl	80043ae <strcpy>
	SerialPrintln(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fd8b 	bl	8000514 <SerialPrintln>
	ResetWDG();
 80009fe:	f7ff fdb1 	bl	8000564 <ResetWDG>
	HAL_Delay(700);
 8000a02:	20af      	movs	r0, #175	; 0xaf
 8000a04:	0080      	lsls	r0, r0, #2
 8000a06:	f000 fc69 	bl	80012dc <HAL_Delay>
	ResetWDG();
 8000a0a:	f7ff fdab 	bl	8000564 <ResetWDG>
    HAL_Delay(700);
 8000a0e:	20af      	movs	r0, #175	; 0xaf
 8000a10:	0080      	lsls	r0, r0, #2
 8000a12:	f000 fc63 	bl	80012dc <HAL_Delay>
	if(buttonUpdate(&DevModeKey) == isPressed){
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fdc8 	bl	80005ac <buttonUpdate>
 8000a1c:	2802      	cmp	r0, #2
 8000a1e:	d109      	bne.n	8000a34 <main+0x17c>
		strcpy(uart_buff,"DEV MODE - confirmed\r\n");
 8000a20:	492c      	ldr	r1, [pc, #176]	; (8000ad4 <main+0x21c>)
 8000a22:	0030      	movs	r0, r6
 8000a24:	f003 fcc3 	bl	80043ae <strcpy>
	    SerialPrintln(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fd73 	bl	8000514 <SerialPrintln>
		DevMode1=1;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <main+0x220>)
 8000a32:	601a      	str	r2, [r3, #0]
  	BoardStatus=sAC_City;
 8000a34:	2401      	movs	r4, #1
    strcpy(uart_buff,"Start Loop\r\n");
 8000a36:	4929      	ldr	r1, [pc, #164]	; (8000adc <main+0x224>)
 8000a38:	0030      	movs	r0, r6
 8000a3a:	f003 fcb8 	bl	80043ae <strcpy>
    SerialPrintln(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fd68 	bl	8000514 <SerialPrintln>
  	BoardStatus=sAC_City;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <main+0x208>)
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
  	BoardStatus=sAC_City;
 8000a48:	701c      	strb	r4, [r3, #0]
  	TIM3->ARR=sDEF_Delay;
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	62eb      	str	r3, [r5, #44]	; 0x2c
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 8000a50:	2108      	movs	r1, #8
 8000a52:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <main+0x1fc>)
 8000a54:	f001 face 	bl	8001ff4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_RESET);
 8000a58:	0021      	movs	r1, r4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <main+0x1fc>)
 8000a5e:	f001 fac9 	bl	8001ff4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <main+0x1fc>)
 8000a68:	f001 fac4 	bl	8001ff4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <main+0x1fc>)
 8000a72:	f001 fabf 	bl	8001ff4 <HAL_GPIO_WritePin>
       SinWave=swStart;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <main+0x228>)
 8000a78:	701c      	strb	r4, [r3, #0]
       PWM_50Hz_Init();
 8000a7a:	f7ff fe65 	bl	8000748 <PWM_50Hz_Init>
       PWM_Sinus_Init();
 8000a7e:	f7ff feb3 	bl	80007e8 <PWM_Sinus_Init>
       HAL_TIM_Base_Start(&htim1);
 8000a82:	4d18      	ldr	r5, [pc, #96]	; (8000ae4 <main+0x22c>)
 8000a84:	0028      	movs	r0, r5
 8000a86:	f002 f8d3 	bl	8002c30 <HAL_TIM_Base_Start>
       HAL_TIM_Base_Start_IT(&htim1);
 8000a8a:	0028      	movs	r0, r5
 8000a8c:	f002 f900 	bl	8002c90 <HAL_TIM_Base_Start_IT>
       HAL_TIM_Base_Start(&htim3);
 8000a90:	4d15      	ldr	r5, [pc, #84]	; (8000ae8 <main+0x230>)
 8000a92:	0028      	movs	r0, r5
 8000a94:	f002 f8cc 	bl	8002c30 <HAL_TIM_Base_Start>
       HAL_TIM_Base_Start_IT(&htim3);
 8000a98:	0028      	movs	r0, r5
 8000a9a:	f002 f8f9 	bl	8002c90 <HAL_TIM_Base_Start_IT>
       TIM14->PSC=SinResPSC;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <main+0x234>)
 8000aa0:	629c      	str	r4, [r3, #40]	; 0x28
       HAL_TIM_Base_Start(&htim14);
 8000aa2:	4c13      	ldr	r4, [pc, #76]	; (8000af0 <main+0x238>)
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	f002 f8c3 	bl	8002c30 <HAL_TIM_Base_Start>
       HAL_TIM_Base_Start_IT(&htim14);
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f002 f8f0 	bl	8002c90 <HAL_TIM_Base_Start_IT>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	e7fd      	b.n	8000ab0 <main+0x1f8>
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	200004b8 	.word	0x200004b8
 8000abc:	40000400 	.word	0x40000400
 8000ac0:	2000026c 	.word	0x2000026c
 8000ac4:	2000039c 	.word	0x2000039c
 8000ac8:	200003cc 	.word	0x200003cc
 8000acc:	20000338 	.word	0x20000338
 8000ad0:	08004c4b 	.word	0x08004c4b
 8000ad4:	08004c5d 	.word	0x08004c5d
 8000ad8:	20000270 	.word	0x20000270
 8000adc:	08004c74 	.word	0x08004c74
 8000ae0:	20000274 	.word	0x20000274
 8000ae4:	20000438 	.word	0x20000438
 8000ae8:	200003f8 	.word	0x200003f8
 8000aec:	40002000 	.word	0x40002000
 8000af0:	20000478 	.word	0x20000478

08000af4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	4770      	bx	lr

08000af6 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000af6:	4770      	bx	lr

08000af8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af8:	2001      	movs	r0, #1
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x2c>)
{
 8000afc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	6999      	ldr	r1, [r3, #24]
 8000b00:	4301      	orrs	r1, r0
 8000b02:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4002      	ands	r2, r0
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	61da      	str	r2, [r3, #28]
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	400b      	ands	r3, r1
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	b002      	add	sp, #8
 8000b20:	4770      	bx	lr
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40021000 	.word	0x40021000

08000b28 <NMI_Handler>:
 8000b28:	4770      	bx	lr

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler>

08000b2c <SVC_Handler>:
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f000 fbc5 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bd10      	pop	{r4, pc}

08000b38 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000b38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000b3a:	f001 f891 	bl	8001c60 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000b3e:	bd10      	pop	{r4, pc}

08000b40 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000b40:	4770      	bx	lr
	...

08000b44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <DMA1_Channel2_3_IRQHandler+0x10>)
 8000b48:	f001 f821 	bl	8001b8e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000b4e:	f001 f81e 	bl	8001b8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b52:	bd10      	pop	{r4, pc}
 8000b54:	20000284 	.word	0x20000284
 8000b58:	2000053c 	.word	0x2000053c

08000b5c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <DMA1_Channel4_5_IRQHandler+0xc>)
 8000b60:	f001 f815 	bl	8001b8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	200004f8 	.word	0x200004f8

08000b6c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ADC1_IRQHandler+0xc>)
 8000b70:	f000 fcfc 	bl	800156c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	200002c8 	.word	0x200002c8

08000b7c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000b7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7e:	4c0d      	ldr	r4, [pc, #52]	; (8000bb4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>)
 8000b80:	0020      	movs	r0, r4
 8000b82:	f002 f8ba 	bl	8002cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8000b86:	2202      	movs	r2, #2
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	611a      	str	r2, [r3, #16]

  sin_step=0;sinStatus=0;TIM3->CCR2=0;TIM3->CCR1=0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 8000b92:	8013      	strh	r3, [r2, #0]
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8000b96:	7013      	strb	r3, [r2, #0]
 8000b98:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8000b9a:	6393      	str	r3, [r2, #56]	; 0x38
 8000b9c:	6353      	str	r3, [r2, #52]	; 0x34

  if (SinWave==swStart) {
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>)
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	2a01      	cmp	r2, #1
 8000ba4:	d105      	bne.n	8000bb2 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x36>
	  SinWave=swGEN;
 8000ba6:	3201      	adds	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
	  TIM1->CCR3=500;
 8000baa:	32f3      	adds	r2, #243	; 0xf3
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x4c>)
 8000bae:	32ff      	adds	r2, #255	; 0xff
 8000bb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000bb2:	bd10      	pop	{r4, pc}
 8000bb4:	20000438 	.word	0x20000438
 8000bb8:	20000276 	.word	0x20000276
 8000bbc:	20000275 	.word	0x20000275
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	20000274 	.word	0x20000274
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bcc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bce:	4c24      	ldr	r4, [pc, #144]	; (8000c60 <TIM3_IRQHandler+0x94>)
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f002 f892 	bl	8002cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	4252      	negs	r2, r2
 8000bdc:	611a      	str	r2, [r3, #16]


   	if ((SinWave==swStop) || (SinWave==swStart))  {
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <TIM3_IRQHandler+0x98>)
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <TIM3_IRQHandler+0x9c>)
 8000be2:	7811      	ldrb	r1, [r2, #0]
 8000be4:	2900      	cmp	r1, #0
 8000be6:	d002      	beq.n	8000bee <TIM3_IRQHandler+0x22>
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	2a01      	cmp	r2, #1
 8000bec:	d105      	bne.n	8000bfa <TIM3_IRQHandler+0x2e>
   		TIM3->CCR2=0;
 8000bee:	2200      	movs	r2, #0
 8000bf0:	491e      	ldr	r1, [pc, #120]	; (8000c6c <TIM3_IRQHandler+0xa0>)
 8000bf2:	638a      	str	r2, [r1, #56]	; 0x38
   		TIM3->CCR1=0;
 8000bf4:	634a      	str	r2, [r1, #52]	; 0x34
   		TIM1->CCR3=0;
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	   //TIM3->CCR1=0;
	   TIM3->CCR2=sin_data[sin_step];
   }

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bf8:	bd10      	pop	{r4, pc}
  if  ((TIM1->CNT==0) || (TIM1->CNT==500)) { TIM3->CCR2=0;TIM3->CCR1=0;sin_step=0;}
 8000bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d004      	beq.n	8000c0a <TIM3_IRQHandler+0x3e>
 8000c00:	22fa      	movs	r2, #250	; 0xfa
 8000c02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c04:	0052      	lsls	r2, r2, #1
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d105      	bne.n	8000c16 <TIM3_IRQHandler+0x4a>
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4917      	ldr	r1, [pc, #92]	; (8000c6c <TIM3_IRQHandler+0xa0>)
 8000c0e:	638a      	str	r2, [r1, #56]	; 0x38
 8000c10:	634a      	str	r2, [r1, #52]	; 0x34
 8000c12:	4917      	ldr	r1, [pc, #92]	; (8000c70 <TIM3_IRQHandler+0xa4>)
 8000c14:	800a      	strh	r2, [r1, #0]
   if  (TIM1->CNT>=500) { sinStatus=1;}
 8000c16:	21f4      	movs	r1, #244	; 0xf4
 8000c18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c1a:	31ff      	adds	r1, #255	; 0xff
 8000c1c:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <TIM3_IRQHandler+0xa8>)
 8000c1e:	4288      	cmp	r0, r1
 8000c20:	d901      	bls.n	8000c26 <TIM3_IRQHandler+0x5a>
 8000c22:	2001      	movs	r0, #1
 8000c24:	7010      	strb	r0, [r2, #0]
   if  (TIM1->CNT<500) { sinStatus=0;}
 8000c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d801      	bhi.n	8000c30 <TIM3_IRQHandler+0x64>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	7013      	strb	r3, [r2, #0]
   if (sinStatus==0) {
 8000c30:	7813      	ldrb	r3, [r2, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d107      	bne.n	8000c46 <TIM3_IRQHandler+0x7a>
	   TIM3->CCR1=sin_data[sin_step];
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <TIM3_IRQHandler+0xa4>)
 8000c38:	490f      	ldr	r1, [pc, #60]	; (8000c78 <TIM3_IRQHandler+0xac>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	5a5b      	ldrh	r3, [r3, r1]
 8000c40:	490a      	ldr	r1, [pc, #40]	; (8000c6c <TIM3_IRQHandler+0xa0>)
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	634b      	str	r3, [r1, #52]	; 0x34
   if (sinStatus==1) {
 8000c46:	7813      	ldrb	r3, [r2, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d1d5      	bne.n	8000bf8 <TIM3_IRQHandler+0x2c>
	   TIM3->CCR2=sin_data[sin_step];
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <TIM3_IRQHandler+0xa4>)
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <TIM3_IRQHandler+0xac>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	5a9b      	ldrh	r3, [r3, r2]
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <TIM3_IRQHandler+0xa0>)
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	6393      	str	r3, [r2, #56]	; 0x38
 8000c5c:	e7cc      	b.n	8000bf8 <TIM3_IRQHandler+0x2c>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	200003f8 	.word	0x200003f8
 8000c64:	20000274 	.word	0x20000274
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	40000400 	.word	0x40000400
 8000c70:	20000276 	.word	0x20000276
 8000c74:	20000275 	.word	0x20000275
 8000c78:	20000004 	.word	0x20000004

08000c7c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000c7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c7e:	4c14      	ldr	r4, [pc, #80]	; (8000cd0 <TIM14_IRQHandler+0x54>)
 8000c80:	0020      	movs	r0, r4
 8000c82:	f002 f83a 	bl	8002cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8000c86:	2202      	movs	r2, #2
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	4252      	negs	r2, r2

  if (sinStatus==0) {TIM3->CCR1=sin_data[sin_step];TIM3->CCR2=0;}
  if (sinStatus==1) {TIM3->CCR1=0;TIM3->CCR2=sin_data[sin_step];}
  */

  	  	  	  	  if ((SinWave==swStop) && (buttonUpdate(&DevModeKey2) == isPressed)) {
 8000c8c:	4c11      	ldr	r4, [pc, #68]	; (8000cd4 <TIM14_IRQHandler+0x58>)
  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8000c8e:	611a      	str	r2, [r3, #16]
  	  	  	  	  if ((SinWave==swStop) && (buttonUpdate(&DevModeKey2) == isPressed)) {
 8000c90:	7823      	ldrb	r3, [r4, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d106      	bne.n	8000ca4 <TIM14_IRQHandler+0x28>
 8000c96:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <TIM14_IRQHandler+0x5c>)
 8000c98:	f7ff fc88 	bl	80005ac <buttonUpdate>
 8000c9c:	2802      	cmp	r0, #2
 8000c9e:	d101      	bne.n	8000ca4 <TIM14_IRQHandler+0x28>
        			SinWave=swStart;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	7023      	strb	r3, [r4, #0]
        		  }

        		 if ((SinWave!=swStop) && (buttonUpdate(&DevModeKey2) == isReleased)) {
 8000ca4:	7823      	ldrb	r3, [r4, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <TIM14_IRQHandler+0x3c>
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <TIM14_IRQHandler+0x5c>)
 8000cac:	f7ff fc7e 	bl	80005ac <buttonUpdate>
 8000cb0:	2804      	cmp	r0, #4
 8000cb2:	d101      	bne.n	8000cb8 <TIM14_IRQHandler+0x3c>
        		      			SinWave=swStop;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	7023      	strb	r3, [r4, #0]
        		 }

  	sin_step++;
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <TIM14_IRQHandler+0x60>)
 8000cba:	8813      	ldrh	r3, [r2, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	8013      	strh	r3, [r2, #0]

  	if (sin_step >= SinRes) {
 8000cc2:	8813      	ldrh	r3, [r2, #0]
 8000cc4:	2bef      	cmp	r3, #239	; 0xef
 8000cc6:	d901      	bls.n	8000ccc <TIM14_IRQHandler+0x50>
  		sin_step = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	8013      	strh	r3, [r2, #0]
  	}

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000478 	.word	0x20000478
 8000cd4:	20000274 	.word	0x20000274
 8000cd8:	200003cc 	.word	0x200003cc
 8000cdc:	20000276 	.word	0x20000276

08000ce0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ce0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ce2:	4c17      	ldr	r4, [pc, #92]	; (8000d40 <TIM16_IRQHandler+0x60>)
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	f002 f808 	bl	8002cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8000cea:	2202      	movs	r2, #2
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	4252      	negs	r2, r2
 8000cf0:	611a      	str	r2, [r3, #16]

    	// Reset IWDG
      ResetWDG();
 8000cf2:	f7ff fc37 	bl	8000564 <ResetWDG>

        //
        switch(BoardStatus) {
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <TIM16_IRQHandler+0x64>)
 8000cf8:	7818      	ldrb	r0, [r3, #0]
 8000cfa:	b2c0      	uxtb	r0, r0
 8000cfc:	2803      	cmp	r0, #3
 8000cfe:	d813      	bhi.n	8000d28 <TIM16_IRQHandler+0x48>
 8000d00:	f7ff fa02 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000d04:	02131302 	.word	0x02131302
      	  case sBoot:
      	  case sUnknown:
      	  	  //TIM3->ARR=sBoot_Delay;
      	  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d08:	2108      	movs	r1, #8
 8000d0a:	480f      	ldr	r0, [pc, #60]	; (8000d48 <TIM16_IRQHandler+0x68>)
 8000d0c:	f001 f98c 	bl	8002028 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d10:	2101      	movs	r1, #1
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <TIM16_IRQHandler+0x68>)
 8000d14:	f001 f988 	bl	8002028 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <TIM16_IRQHandler+0x68>)
 8000d1c:	f001 f984 	bl	8002028 <HAL_GPIO_TogglePin>
      	  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <TIM16_IRQHandler+0x68>)
 8000d24:	f001 f980 	bl	8002028 <HAL_GPIO_TogglePin>
      		  	  }
    		  break;
        }

  /* USER CODE END TIM16_IRQn 1 */
}
 8000d28:	bd10      	pop	{r4, pc}
      		  	  if (DevMode1==1) {
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <TIM16_IRQHandler+0x6c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d1fa      	bne.n	8000d28 <TIM16_IRQHandler+0x48>
      		  		  SerialPrintln(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fbee 	bl	8000514 <SerialPrintln>
      		  		  ClearUART_Buff();
 8000d38:	f7ff fb94 	bl	8000464 <ClearUART_Buff>
}
 8000d3c:	e7f4      	b.n	8000d28 <TIM16_IRQHandler+0x48>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	200004b8 	.word	0x200004b8
 8000d44:	2000026c 	.word	0x2000026c
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	20000270 	.word	0x20000270

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d52:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART1_IRQHandler+0xc>)
 8000d54:	f003 fa10 	bl	8004178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000580 	.word	0x20000580

08000d60 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000d60:	2101      	movs	r1, #1
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	4002      	ands	r2, r0
 8000d70:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <SystemInit+0x50>)
 8000d76:	4002      	ands	r2, r0
 8000d78:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <SystemInit+0x54>)
 8000d7e:	4002      	ands	r2, r0
 8000d80:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <SystemInit+0x58>)
 8000d86:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000d88:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000d8a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8e:	4382      	bics	r2, r0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8000d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <SystemInit+0x5c>)
 8000d96:	4002      	ands	r2, r0
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]

}
 8000da4:	4770      	bx	lr
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40021000 	.word	0x40021000
 8000dac:	08ffb80c 	.word	0x08ffb80c
 8000db0:	fef6ffff 	.word	0xfef6ffff
 8000db4:	fffbffff 	.word	0xfffbffff
 8000db8:	ffc0ffff 	.word	0xffc0ffff
 8000dbc:	fffffeec 	.word	0xfffffeec

08000dc0 <MX_TIM14_Init>:
}
/* TIM14 init function */
void MX_TIM14_Init(void)
{

  htim14.Instance = TIM14;
 8000dc0:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_TIM14_Init+0x2c>)
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_TIM14_Init+0x30>)
{
 8000dc4:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8000dc6:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 1;
 8000dc8:	2301      	movs	r3, #1
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 1000;
 8000dca:	22fa      	movs	r2, #250	; 0xfa
  htim14.Init.Prescaler = 1;
 8000dcc:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	2300      	movs	r3, #0
  htim14.Init.Period = 1000;
 8000dd0:	0092      	lsls	r2, r2, #2
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd6:	3380      	adds	r3, #128	; 0x80
  htim14.Init.Period = 1000;
 8000dd8:	60c2      	str	r2, [r0, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dda:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ddc:	f002 f872 	bl	8002ec4 <HAL_TIM_Base_Init>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM14_Init+0x28>
  {
    Error_Handler();
 8000de4:	f7ff fe86 	bl	8000af4 <Error_Handler>
  }

}
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000478 	.word	0x20000478
 8000df0:	40002000 	.word	0x40002000

08000df4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <MX_TIM16_Init+0x2c>)
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_TIM16_Init+0x30>)
{
 8000df8:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8000dfa:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 47999;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_TIM16_Init+0x34>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 1000;
 8000dfe:	22fa      	movs	r2, #250	; 0xfa
  htim16.Init.Prescaler = 47999;
 8000e00:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	2300      	movs	r3, #0
  htim16.Init.Period = 1000;
 8000e04:	0092      	lsls	r2, r2, #2
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e0a:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e0c:	3380      	adds	r3, #128	; 0x80
  htim16.Init.Period = 1000;
 8000e0e:	60c2      	str	r2, [r0, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e10:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e12:	f002 f857 	bl	8002ec4 <HAL_TIM_Base_Init>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM16_Init+0x2a>
  {
    Error_Handler();
 8000e1a:	f7ff fe6b 	bl	8000af4 <Error_Handler>
  }

}
 8000e1e:	bd10      	pop	{r4, pc}
 8000e20:	200004b8 	.word	0x200004b8
 8000e24:	40014400 	.word	0x40014400
 8000e28:	0000bb7f 	.word	0x0000bb7f

08000e2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8000e2e:	6803      	ldr	r3, [r0, #0]
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_TIM_Base_MspInit+0xa8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e36:	2080      	movs	r0, #128	; 0x80
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <HAL_TIM_Base_MspInit+0xac>)
 8000e3a:	0100      	lsls	r0, r0, #4
 8000e3c:	6991      	ldr	r1, [r2, #24]
 8000e3e:	4301      	orrs	r1, r0
 8000e40:	6191      	str	r1, [r2, #24]
 8000e42:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e46:	4003      	ands	r3, r0
 8000e48:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e4a:	200d      	movs	r0, #13
 8000e4c:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e50:	f000 fcca 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e54:	200d      	movs	r0, #13
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e56:	f000 fd01 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000e5a:	b005      	add	sp, #20
 8000e5c:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM3)
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_TIM_Base_MspInit+0xb0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d10f      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e64:	2002      	movs	r0, #2
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_TIM_Base_MspInit+0xac>)
 8000e68:	69d1      	ldr	r1, [r2, #28]
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	61d1      	str	r1, [r2, #28]
 8000e6e:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e72:	4003      	ands	r3, r0
 8000e74:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e76:	300e      	adds	r0, #14
 8000e78:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e7c:	f000 fcb4 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e80:	2010      	movs	r0, #16
 8000e82:	e7e8      	b.n	8000e56 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM14)
 8000e84:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_TIM_Base_MspInit+0xb4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d110      	bne.n	8000eac <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e8a:	2080      	movs	r0, #128	; 0x80
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_TIM_Base_MspInit+0xac>)
 8000e8e:	0040      	lsls	r0, r0, #1
 8000e90:	69d1      	ldr	r1, [r2, #28]
 8000e92:	4301      	orrs	r1, r0
 8000e94:	61d1      	str	r1, [r2, #28]
 8000e96:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000e9e:	38ed      	subs	r0, #237	; 0xed
 8000ea0:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ea2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ea4:	f000 fca0 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000ea8:	2013      	movs	r0, #19
 8000eaa:	e7d4      	b.n	8000e56 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM16)
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_TIM_Base_MspInit+0xb8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d1d3      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000eb2:	2080      	movs	r0, #128	; 0x80
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_TIM_Base_MspInit+0xac>)
 8000eb6:	0280      	lsls	r0, r0, #10
 8000eb8:	6991      	ldr	r1, [r2, #24]
 8000eba:	4301      	orrs	r1, r0
 8000ebc:	6191      	str	r1, [r2, #24]
 8000ebe:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ec2:	4003      	ands	r3, r0
 8000ec4:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000ec6:	2015      	movs	r0, #21
 8000ec8:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000eca:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000ecc:	f000 fc8c 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000ed0:	2015      	movs	r0, #21
 8000ed2:	e7c0      	b.n	8000e56 <HAL_TIM_Base_MspInit+0x2a>
 8000ed4:	40012c00 	.word	0x40012c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	40002000 	.word	0x40002000
 8000ee4:	40014400 	.word	0x40014400

08000ee8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ee8:	b530      	push	{r4, r5, lr}
 8000eea:	0004      	movs	r4, r0
 8000eec:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	2214      	movs	r2, #20
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	a803      	add	r0, sp, #12
 8000ef4:	f003 fa23 	bl	800433e <memset>
  if(timHandle->Instance==TIM1)
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_TIM_MspPostInit+0xb0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d12f      	bne.n	8000f60 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2080      	movs	r0, #128	; 0x80
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f04:	02c0      	lsls	r0, r0, #11
 8000f06:	6959      	ldr	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = CH4_Pin;
 8000f08:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4301      	orrs	r1, r0
 8000f0c:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2180      	movs	r1, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f10:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4002      	ands	r2, r0
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = CH4_Pin;
 8000f26:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	400b      	ands	r3, r1
 8000f2a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f34:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f000 ff33 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH3_Pin;
 8000f3a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = CH3_Pin;
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000f44:	05c0      	lsls	r0, r0, #23
 8000f46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f4e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f000 ff26 	bl	8001da0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PA10);
 8000f54:	2080      	movs	r0, #128	; 0x80
 8000f56:	0400      	lsls	r0, r0, #16
 8000f58:	f001 f876 	bl	8002048 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f5c:	b009      	add	sp, #36	; 0x24
 8000f5e:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM3)
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_TIM_MspPostInit+0xbc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d1fa      	bne.n	8000f5c <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2080      	movs	r0, #128	; 0x80
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f6a:	0280      	lsls	r0, r0, #10
 8000f6c:	6951      	ldr	r1, [r2, #20]
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	6151      	str	r1, [r2, #20]
 8000f72:	6953      	ldr	r3, [r2, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4003      	ands	r3, r0
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8000f7c:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin;
 8000f80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	3bbe      	subs	r3, #190	; 0xbe
 8000f84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	3301      	adds	r3, #1
 8000f88:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f8c:	3b02      	subs	r3, #2
 8000f8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f000 ff06 	bl	8001da0 <HAL_GPIO_Init>
}
 8000f94:	e7e2      	b.n	8000f5c <HAL_TIM_MspPostInit+0x74>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	40012c00 	.word	0x40012c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	40000400 	.word	0x40000400

08000fa8 <MX_TIM1_Init>:
{
 8000fa8:	b530      	push	{r4, r5, lr}
 8000faa:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fac:	2210      	movs	r2, #16
 8000fae:	2100      	movs	r1, #0
 8000fb0:	a802      	add	r0, sp, #8
 8000fb2:	f003 f9c4 	bl	800433e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4668      	mov	r0, sp
 8000fbc:	f003 f9bf 	bl	800433e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc0:	221c      	movs	r2, #28
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	a806      	add	r0, sp, #24
 8000fc6:	f003 f9ba 	bl	800433e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fca:	221c      	movs	r2, #28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	a80d      	add	r0, sp, #52	; 0x34
 8000fd0:	f003 f9b5 	bl	800433e <memset>
  htim1.Instance = TIM1;
 8000fd4:	4c2d      	ldr	r4, [pc, #180]	; (800108c <MX_TIM1_Init+0xe4>)
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_TIM1_Init+0xe8>)
  htim1.Init.Period = 1000;
 8000fd8:	22fa      	movs	r2, #250	; 0xfa
  htim1.Instance = TIM1;
 8000fda:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 960;
 8000fdc:	23f0      	movs	r3, #240	; 0xf0
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	2300      	movs	r3, #0
  htim1.Init.Period = 1000;
 8000fe4:	0092      	lsls	r2, r2, #2
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fea:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fec:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fee:	3380      	adds	r3, #128	; 0x80
  htim1.Init.Period = 1000;
 8000ff0:	60e2      	str	r2, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff4:	f001 ff66 	bl	8002ec4 <HAL_TIM_Base_Init>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0x58>
    Error_Handler();
 8000ffc:	f7ff fd7a 	bl	8000af4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001000:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001002:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001004:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001006:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800100a:	f002 fa85 	bl	8003518 <HAL_TIM_ConfigClockSource>
 800100e:	2800      	cmp	r0, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x6e>
    Error_Handler();
 8001012:	f7ff fd6f 	bl	8000af4 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001016:	0020      	movs	r0, r4
 8001018:	f001 ffb6 	bl	8002f88 <HAL_TIM_OC_Init>
 800101c:	2800      	cmp	r0, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8001020:	f7ff fd68 	bl	8000af4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001026:	4669      	mov	r1, sp
 8001028:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102e:	f002 fc77 	bl	8003920 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	42a8      	cmp	r0, r5
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x92>
    Error_Handler();
 8001036:	f7ff fd5d 	bl	8000af4 <Error_Handler>
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800103a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103c:	2208      	movs	r2, #8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800103e:	005b      	lsls	r3, r3, #1
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001040:	a906      	add	r1, sp, #24
 8001042:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001044:	9506      	str	r5, [sp, #24]
  sConfigOC.Pulse = 0;
 8001046:	9507      	str	r5, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001048:	9508      	str	r5, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104a:	9509      	str	r5, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104c:	950a      	str	r5, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800104e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCIDLESTATE_SET;
 8001050:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001052:	f002 f8cb 	bl	80031ec <HAL_TIM_OC_ConfigChannel>
 8001056:	2800      	cmp	r0, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0xb6>
    Error_Handler();
 800105a:	f7ff fd4b 	bl	8000af4 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105e:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001060:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	a90d      	add	r1, sp, #52	; 0x34
 8001066:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001068:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800106a:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106c:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800106e:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001070:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001072:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001074:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001076:	f002 fc9f 	bl	80039b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800107a:	2800      	cmp	r0, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0xda>
    Error_Handler();
 800107e:	f7ff fd39 	bl	8000af4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001082:	0020      	movs	r0, r4
 8001084:	f7ff ff30 	bl	8000ee8 <HAL_TIM_MspPostInit>
}
 8001088:	b015      	add	sp, #84	; 0x54
 800108a:	bd30      	pop	{r4, r5, pc}
 800108c:	20000438 	.word	0x20000438
 8001090:	40012c00 	.word	0x40012c00

08001094 <MX_TIM3_Init>:
{
 8001094:	b510      	push	{r4, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001098:	2210      	movs	r2, #16
 800109a:	2100      	movs	r1, #0
 800109c:	a803      	add	r0, sp, #12
 800109e:	f003 f94e 	bl	800433e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	2208      	movs	r2, #8
 80010a4:	2100      	movs	r1, #0
 80010a6:	a801      	add	r0, sp, #4
 80010a8:	f003 f949 	bl	800433e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	221c      	movs	r2, #28
 80010ae:	2100      	movs	r1, #0
 80010b0:	a807      	add	r0, sp, #28
 80010b2:	f003 f944 	bl	800433e <memset>
  htim3.Instance = TIM3;
 80010b6:	4c26      	ldr	r4, [pc, #152]	; (8001150 <MX_TIM3_Init+0xbc>)
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_TIM3_Init+0xc0>)
  htim3.Init.Period = 1000;
 80010ba:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 80010bc:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	2300      	movs	r3, #0
  htim3.Init.Period = 1000;
 80010c4:	0092      	lsls	r2, r2, #2
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ca:	0020      	movs	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010cc:	3380      	adds	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 80010ce:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d2:	f001 fef7 	bl	8002ec4 <HAL_TIM_Base_Init>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x4a>
    Error_Handler();
 80010da:	f7ff fd0b 	bl	8000af4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010de:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e0:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e4:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e8:	f002 fa16 	bl	8003518 <HAL_TIM_ConfigClockSource>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x60>
    Error_Handler();
 80010f0:	f7ff fd00 	bl	8000af4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010f4:	0020      	movs	r0, r4
 80010f6:	f001 ffad 	bl	8003054 <HAL_TIM_PWM_Init>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x6e>
    Error_Handler();
 80010fe:	f7ff fcf9 	bl	8000af4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001104:	a901      	add	r1, sp, #4
 8001106:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110c:	f002 fc08 	bl	8003920 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	2800      	cmp	r0, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x84>
    Error_Handler();
 8001114:	f7ff fcee 	bl	8000af4 <Error_Handler>
  sConfigOC.Pulse = 0;
 8001118:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111c:	a907      	add	r1, sp, #28
 800111e:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001122:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	f002 f908 	bl	800333c <HAL_TIM_PWM_ConfigChannel>
 800112c:	2800      	cmp	r0, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM3_Init+0xa0>
    Error_Handler();
 8001130:	f7ff fce0 	bl	8000af4 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001134:	2204      	movs	r2, #4
 8001136:	a907      	add	r1, sp, #28
 8001138:	0020      	movs	r0, r4
 800113a:	f002 f8ff 	bl	800333c <HAL_TIM_PWM_ConfigChannel>
 800113e:	2800      	cmp	r0, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0xb2>
    Error_Handler();
 8001142:	f7ff fcd7 	bl	8000af4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001146:	0020      	movs	r0, r4
 8001148:	f7ff fece 	bl	8000ee8 <HAL_TIM_MspPostInit>
}
 800114c:	b00e      	add	sp, #56	; 0x38
 800114e:	bd10      	pop	{r4, pc}
 8001150:	200003f8 	.word	0x200003f8
 8001154:	40000400 	.word	0x40000400

08001158 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <MX_USART1_UART_Init+0x30>)
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART1_UART_Init+0x34>)
{
 800115c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800115e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001160:	23e1      	movs	r3, #225	; 0xe1
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001166:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001168:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800116a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800116e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001170:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001178:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117a:	f002 ff2d 	bl	8003fd8 <HAL_UART_Init>
 800117e:	2800      	cmp	r0, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8001182:	f7ff fcb7 	bl	8000af4 <Error_Handler>
  }

}
 8001186:	bd10      	pop	{r4, pc}
 8001188:	20000580 	.word	0x20000580
 800118c:	40013800 	.word	0x40013800

08001190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001190:	b530      	push	{r4, r5, lr}
 8001192:	0005      	movs	r5, r0
 8001194:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	2214      	movs	r2, #20
 8001198:	2100      	movs	r1, #0
 800119a:	a803      	add	r0, sp, #12
 800119c:	f003 f8cf 	bl	800433e <memset>
  if(uartHandle->Instance==USART1)
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_UART_MspInit+0xd0>)
 80011a2:	682a      	ldr	r2, [r5, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d159      	bne.n	800125c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_UART_MspInit+0xd4>)
 80011ac:	01c0      	lsls	r0, r0, #7
 80011ae:	6999      	ldr	r1, [r3, #24]
 80011b0:	4301      	orrs	r1, r0
 80011b2:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b6:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ba:	4002      	ands	r2, r0
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	430a      	orrs	r2, r1
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	400b      	ands	r3, r1
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80011d2:	2382      	movs	r3, #130	; 0x82
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	3301      	adds	r3, #1
 80011de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011e2:	3b02      	subs	r3, #2
 80011e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f000 fddb 	bl	8001da0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80011ea:	4c1f      	ldr	r4, [pc, #124]	; (8001268 <HAL_UART_MspInit+0xd8>)
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_UART_MspInit+0xdc>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80011f0:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f2:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f4:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f8:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001200:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001202:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001204:	f000 fbb2 	bl	800196c <HAL_DMA_Init>
 8001208:	2800      	cmp	r0, #0
 800120a:	d001      	beq.n	8001210 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 800120c:	f7ff fc72 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001212:	666c      	str	r4, [r5, #100]	; 0x64
 8001214:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001216:	4c17      	ldr	r4, [pc, #92]	; (8001274 <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800121a:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121c:	2310      	movs	r3, #16
 800121e:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001222:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001228:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122a:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800122c:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001230:	f000 fb9c 	bl	800196c <HAL_DMA_Init>
 8001234:	2800      	cmp	r0, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8001238:	f7ff fc5c 	bl	8000af4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_UART_MspInit+0xe8>)
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	6811      	ldr	r1, [r2, #0]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001244:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001246:	430b      	orrs	r3, r1
 8001248:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800124c:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800124e:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001250:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001252:	f000 fac9 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001256:	201b      	movs	r0, #27
 8001258:	f000 fb00 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800125c:	b009      	add	sp, #36	; 0x24
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	40013800 	.word	0x40013800
 8001264:	40021000 	.word	0x40021000
 8001268:	2000053c 	.word	0x2000053c
 800126c:	40020030 	.word	0x40020030
 8001270:	40020044 	.word	0x40020044
 8001274:	200004f8 	.word	0x200004f8
 8001278:	40010000 	.word	0x40010000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b510      	push	{r4, lr}
 800127e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001280:	f001 fb04 	bl	800288c <HAL_RCC_GetHCLKFreq>
 8001284:	21fa      	movs	r1, #250	; 0xfa
 8001286:	0089      	lsls	r1, r1, #2
 8001288:	f7fe ff48 	bl	800011c <__udivsi3>
 800128c:	f000 faf8 	bl	8001880 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001290:	2001      	movs	r0, #1
 8001292:	2200      	movs	r2, #0
 8001294:	0021      	movs	r1, r4
 8001296:	4240      	negs	r0, r0
 8001298:	f000 faa6 	bl	80017e8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800129c:	2000      	movs	r0, #0
 800129e:	bd10      	pop	{r4, pc}

080012a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	2310      	movs	r3, #16
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_Init+0x1c>)
{
 80012a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	f7ff ffe5 	bl	800127c <HAL_InitTick>
  HAL_MspInit();
 80012b2:	f7ff fc21 	bl	8000af8 <HAL_MspInit>
}
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40022000 	.word	0x40022000

080012c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80012c0:	4a02      	ldr	r2, [pc, #8]	; (80012cc <HAL_IncTick+0xc>)
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	4770      	bx	lr
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	200005f0 	.word	0x200005f0

080012d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <HAL_GetTick+0x8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
}
 80012d4:	4770      	bx	lr
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	200005f0 	.word	0x200005f0

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012de:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff fff6 	bl	80012d0 <HAL_GetTick>
  uint32_t wait = Delay;
 80012e4:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e6:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80012e8:	1c63      	adds	r3, r4, #1
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	4193      	sbcs	r3, r2
 80012ee:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	1b40      	subs	r0, r0, r5
 80012f6:	42a0      	cmp	r0, r4
 80012f8:	d3fa      	bcc.n	80012f0 <HAL_Delay+0x14>
  {
  }
}
 80012fa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080012fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001302:	2c00      	cmp	r4, #0
 8001304:	d100      	bne.n	8001308 <HAL_ADC_Init+0xc>
 8001306:	e0f6      	b.n	80014f6 <HAL_ADC_Init+0x1fa>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001308:	4b8f      	ldr	r3, [pc, #572]	; (8001548 <HAL_ADC_Init+0x24c>)
 800130a:	6822      	ldr	r2, [r4, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d004      	beq.n	800131a <HAL_ADC_Init+0x1e>
 8001310:	2174      	movs	r1, #116	; 0x74
 8001312:	488e      	ldr	r0, [pc, #568]	; (800154c <HAL_ADC_Init+0x250>)
 8001314:	31ff      	adds	r1, #255	; 0xff
 8001316:	f7ff fbee 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	4a8c      	ldr	r2, [pc, #560]	; (8001550 <HAL_ADC_Init+0x254>)
 800131e:	4213      	tst	r3, r2
 8001320:	d008      	beq.n	8001334 <HAL_ADC_Init+0x38>
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	0612      	lsls	r2, r2, #24
 8001326:	4293      	cmp	r3, r2
 8001328:	d004      	beq.n	8001334 <HAL_ADC_Init+0x38>
 800132a:	21ba      	movs	r1, #186	; 0xba
 800132c:	4887      	ldr	r0, [pc, #540]	; (800154c <HAL_ADC_Init+0x250>)
 800132e:	0049      	lsls	r1, r1, #1
 8001330:	f7ff fbe1 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001334:	2318      	movs	r3, #24
 8001336:	68a2      	ldr	r2, [r4, #8]
 8001338:	439a      	bics	r2, r3
 800133a:	d004      	beq.n	8001346 <HAL_ADC_Init+0x4a>
 800133c:	2176      	movs	r1, #118	; 0x76
 800133e:	4883      	ldr	r0, [pc, #524]	; (800154c <HAL_ADC_Init+0x250>)
 8001340:	31ff      	adds	r1, #255	; 0xff
 8001342:	f7ff fbd8 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8001346:	2320      	movs	r3, #32
 8001348:	68e2      	ldr	r2, [r4, #12]
 800134a:	439a      	bics	r2, r3
 800134c:	d004      	beq.n	8001358 <HAL_ADC_Init+0x5c>
 800134e:	21bb      	movs	r1, #187	; 0xbb
 8001350:	487e      	ldr	r0, [pc, #504]	; (800154c <HAL_ADC_Init+0x250>)
 8001352:	0049      	lsls	r1, r1, #1
 8001354:	f7ff fbcf 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001358:	6923      	ldr	r3, [r4, #16]
 800135a:	3b01      	subs	r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d904      	bls.n	800136a <HAL_ADC_Init+0x6e>
 8001360:	2178      	movs	r1, #120	; 0x78
 8001362:	487a      	ldr	r0, [pc, #488]	; (800154c <HAL_ADC_Init+0x250>)
 8001364:	31ff      	adds	r1, #255	; 0xff
 8001366:	f7ff fbc6 	bl	8000af6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800136a:	6a23      	ldr	r3, [r4, #32]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d904      	bls.n	800137a <HAL_ADC_Init+0x7e>
 8001370:	21bc      	movs	r1, #188	; 0xbc
 8001372:	4876      	ldr	r0, [pc, #472]	; (800154c <HAL_ADC_Init+0x250>)
 8001374:	0049      	lsls	r1, r1, #1
 8001376:	f7ff fbbe 	bl	8000af6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800137a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800137c:	2b01      	cmp	r3, #1
 800137e:	d904      	bls.n	800138a <HAL_ADC_Init+0x8e>
 8001380:	217a      	movs	r1, #122	; 0x7a
 8001382:	4872      	ldr	r0, [pc, #456]	; (800154c <HAL_ADC_Init+0x250>)
 8001384:	31ff      	adds	r1, #255	; 0xff
 8001386:	f7ff fbb6 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_ADC_Init+0x258>)
 800138c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800138e:	421a      	tst	r2, r3
 8001390:	d004      	beq.n	800139c <HAL_ADC_Init+0xa0>
 8001392:	21bd      	movs	r1, #189	; 0xbd
 8001394:	486d      	ldr	r0, [pc, #436]	; (800154c <HAL_ADC_Init+0x250>)
 8001396:	0049      	lsls	r1, r1, #1
 8001398:	f7ff fbad 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 800139c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	0019      	movs	r1, r3
 80013a2:	4391      	bics	r1, r2
 80013a4:	d00a      	beq.n	80013bc <HAL_ADC_Init+0xc0>
 80013a6:	2bc0      	cmp	r3, #192	; 0xc0
 80013a8:	d008      	beq.n	80013bc <HAL_ADC_Init+0xc0>
 80013aa:	22c2      	movs	r2, #194	; 0xc2
 80013ac:	32ff      	adds	r2, #255	; 0xff
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d004      	beq.n	80013bc <HAL_ADC_Init+0xc0>
 80013b2:	217c      	movs	r1, #124	; 0x7c
 80013b4:	4865      	ldr	r0, [pc, #404]	; (800154c <HAL_ADC_Init+0x250>)
 80013b6:	31ff      	adds	r1, #255	; 0xff
 80013b8:	f7ff fb9d 	bl	8000af6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80013bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d904      	bls.n	80013cc <HAL_ADC_Init+0xd0>
 80013c2:	21be      	movs	r1, #190	; 0xbe
 80013c4:	4861      	ldr	r0, [pc, #388]	; (800154c <HAL_ADC_Init+0x250>)
 80013c6:	0049      	lsls	r1, r1, #1
 80013c8:	f7ff fb95 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80013cc:	2204      	movs	r2, #4
 80013ce:	6963      	ldr	r3, [r4, #20]
 80013d0:	3b04      	subs	r3, #4
 80013d2:	4393      	bics	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_ADC_Init+0xe4>
 80013d6:	217e      	movs	r1, #126	; 0x7e
 80013d8:	485c      	ldr	r0, [pc, #368]	; (800154c <HAL_ADC_Init+0x250>)
 80013da:	31ff      	adds	r1, #255	; 0xff
 80013dc:	f7ff fb8b 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80013e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d904      	bls.n	80013f0 <HAL_ADC_Init+0xf4>
 80013e6:	21bf      	movs	r1, #191	; 0xbf
 80013e8:	4858      	ldr	r0, [pc, #352]	; (800154c <HAL_ADC_Init+0x250>)
 80013ea:	0049      	lsls	r1, r1, #1
 80013ec:	f7ff fb83 	bl	8000af6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80013f0:	69a3      	ldr	r3, [r4, #24]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d904      	bls.n	8001400 <HAL_ADC_Init+0x104>
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4854      	ldr	r0, [pc, #336]	; (800154c <HAL_ADC_Init+0x250>)
 80013fa:	31ff      	adds	r1, #255	; 0xff
 80013fc:	f7ff fb7b 	bl	8000af6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001400:	69e3      	ldr	r3, [r4, #28]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d904      	bls.n	8001410 <HAL_ADC_Init+0x114>
 8001406:	21c0      	movs	r1, #192	; 0xc0
 8001408:	4850      	ldr	r0, [pc, #320]	; (800154c <HAL_ADC_Init+0x250>)
 800140a:	0049      	lsls	r1, r1, #1
 800140c:	f7ff fb73 	bl	8000af6 <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001410:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_ADC_Init+0x128>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001416:	0022      	movs	r2, r4
 8001418:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800141a:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800141c:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800141e:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001420:	f7fe ff5e 	bl	80002e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001424:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001426:	06db      	lsls	r3, r3, #27
 8001428:	d500      	bpl.n	800142c <HAL_ADC_Init+0x130>
 800142a:	e079      	b.n	8001520 <HAL_ADC_Init+0x224>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800142c:	2204      	movs	r2, #4
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	6898      	ldr	r0, [r3, #8]
 8001432:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001434:	d000      	beq.n	8001438 <HAL_ADC_Init+0x13c>
 8001436:	e073      	b.n	8001520 <HAL_ADC_Init+0x224>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800143a:	4947      	ldr	r1, [pc, #284]	; (8001558 <HAL_ADC_Init+0x25c>)
 800143c:	4011      	ands	r1, r2
 800143e:	2202      	movs	r2, #2
 8001440:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001442:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001444:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	400a      	ands	r2, r1
 800144a:	2a01      	cmp	r2, #1
 800144c:	d000      	beq.n	8001450 <HAL_ADC_Init+0x154>
 800144e:	e06d      	b.n	800152c <HAL_ADC_Init+0x230>
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	4211      	tst	r1, r2
 8001454:	d102      	bne.n	800145c <HAL_ADC_Init+0x160>
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	0412      	lsls	r2, r2, #16
 800145a:	d567      	bpl.n	800152c <HAL_ADC_Init+0x230>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	493f      	ldr	r1, [pc, #252]	; (800155c <HAL_ADC_Init+0x260>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001460:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001462:	400a      	ands	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001466:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001468:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800146a:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800146c:	69e2      	ldr	r2, [r4, #28]
 800146e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001470:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001472:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001474:	3a01      	subs	r2, #1
 8001476:	1e56      	subs	r6, r2, #1
 8001478:	41b2      	sbcs	r2, r6
 800147a:	0316      	lsls	r6, r2, #12
 800147c:	68e2      	ldr	r2, [r4, #12]
 800147e:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001480:	6922      	ldr	r2, [r4, #16]
 8001482:	430f      	orrs	r7, r1
 8001484:	2a02      	cmp	r2, #2
 8001486:	d100      	bne.n	800148a <HAL_ADC_Init+0x18e>
 8001488:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800148a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800148e:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001490:	433a      	orrs	r2, r7
 8001492:	4332      	orrs	r2, r6
 8001494:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001496:	2901      	cmp	r1, #1
 8001498:	d104      	bne.n	80014a4 <HAL_ADC_Init+0x1a8>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800149a:	2d00      	cmp	r5, #0
 800149c:	d12c      	bne.n	80014f8 <HAL_ADC_Init+0x1fc>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a4:	20c2      	movs	r0, #194	; 0xc2
 80014a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014a8:	30ff      	adds	r0, #255	; 0xff
 80014aa:	4281      	cmp	r1, r0
 80014ac:	d002      	beq.n	80014b4 <HAL_ADC_Init+0x1b8>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80014ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80014b0:	4301      	orrs	r1, r0
 80014b2:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014b4:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80014b6:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014b8:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80014ba:	4311      	orrs	r1, r2
 80014bc:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80014c0:	4281      	cmp	r1, r0
 80014c2:	d002      	beq.n	80014ca <HAL_ADC_Init+0x1ce>
 80014c4:	1e48      	subs	r0, r1, #1
 80014c6:	2806      	cmp	r0, #6
 80014c8:	d807      	bhi.n	80014da <HAL_ADC_Init+0x1de>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014ca:	2507      	movs	r5, #7
 80014cc:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014ce:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014d0:	43a8      	bics	r0, r5
 80014d2:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014d4:	6958      	ldr	r0, [r3, #20]
 80014d6:	4301      	orrs	r1, r0
 80014d8:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4920      	ldr	r1, [pc, #128]	; (8001560 <HAL_ADC_Init+0x264>)
 80014de:	400b      	ands	r3, r1
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d111      	bne.n	8001508 <HAL_ADC_Init+0x20c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e4:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014e6:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80014ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ec:	4393      	bics	r3, r2
 80014ee:	001a      	movs	r2, r3
 80014f0:	2301      	movs	r3, #1
 80014f2:	4313      	orrs	r3, r2
 80014f4:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f8:	2020      	movs	r0, #32
 80014fa:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80014fc:	4328      	orrs	r0, r5
 80014fe:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001502:	4301      	orrs	r1, r0
 8001504:	64a1      	str	r1, [r4, #72]	; 0x48
 8001506:	e7cd      	b.n	80014a4 <HAL_ADC_Init+0x1a8>
      ADC_STATE_CLR_SET(hadc->State,
 8001508:	2212      	movs	r2, #18
 800150a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800150e:	4393      	bics	r3, r2
 8001510:	001a      	movs	r2, r3
 8001512:	2310      	movs	r3, #16
 8001514:	4313      	orrs	r3, r2
 8001516:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001518:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800151a:	4303      	orrs	r3, r0
 800151c:	64a3      	str	r3, [r4, #72]	; 0x48
 800151e:	e7ea      	b.n	80014f6 <HAL_ADC_Init+0x1fa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001520:	2310      	movs	r3, #16
 8001522:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001524:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	4313      	orrs	r3, r2
 8001528:	6463      	str	r3, [r4, #68]	; 0x44
 800152a:	e7e4      	b.n	80014f6 <HAL_ADC_Init+0x1fa>
      MODIFY_REG(hadc->Instance->CFGR1,
 800152c:	2118      	movs	r1, #24
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	438a      	bics	r2, r1
 8001532:	68a1      	ldr	r1, [r4, #8]
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001538:	6919      	ldr	r1, [r3, #16]
 800153a:	6862      	ldr	r2, [r4, #4]
 800153c:	0089      	lsls	r1, r1, #2
 800153e:	0889      	lsrs	r1, r1, #2
 8001540:	4311      	orrs	r1, r2
 8001542:	6119      	str	r1, [r3, #16]
 8001544:	e78a      	b.n	800145c <HAL_ADC_Init+0x160>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	40012400 	.word	0x40012400
 800154c:	08004c99 	.word	0x08004c99
 8001550:	bfffffff 	.word	0xbfffffff
 8001554:	fffff3ff 	.word	0xfffff3ff
 8001558:	fffffefd 	.word	0xfffffefd
 800155c:	fffe0219 	.word	0xfffe0219
 8001560:	833fffe7 	.word	0x833fffe7

08001564 <HAL_ADC_ConvCpltCallback>:
 8001564:	4770      	bx	lr

08001566 <HAL_ADC_LevelOutOfWindowCallback>:
 8001566:	4770      	bx	lr

08001568 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001568:	4770      	bx	lr
	...

0800156c <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_ADC_IRQHandler+0x10c>)
 800156e:	6802      	ldr	r2, [r0, #0]
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	0004      	movs	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001574:	429a      	cmp	r2, r3
 8001576:	d003      	beq.n	8001580 <HAL_ADC_IRQHandler+0x14>
 8001578:	4940      	ldr	r1, [pc, #256]	; (800167c <HAL_ADC_IRQHandler+0x110>)
 800157a:	4841      	ldr	r0, [pc, #260]	; (8001680 <HAL_ADC_IRQHandler+0x114>)
 800157c:	f7ff fabb 	bl	8000af6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001580:	6a23      	ldr	r3, [r4, #32]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d903      	bls.n	800158e <HAL_ADC_IRQHandler+0x22>
 8001586:	493f      	ldr	r1, [pc, #252]	; (8001684 <HAL_ADC_IRQHandler+0x118>)
 8001588:	483d      	ldr	r0, [pc, #244]	; (8001680 <HAL_ADC_IRQHandler+0x114>)
 800158a:	f7ff fab4 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800158e:	2204      	movs	r2, #4
 8001590:	6963      	ldr	r3, [r4, #20]
 8001592:	3b04      	subs	r3, #4
 8001594:	4393      	bics	r3, r2
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x36>
 8001598:	21af      	movs	r1, #175	; 0xaf
 800159a:	4839      	ldr	r0, [pc, #228]	; (8001680 <HAL_ADC_IRQHandler+0x114>)
 800159c:	00c9      	lsls	r1, r1, #3
 800159e:	f7ff faaa 	bl	8000af6 <assert_failed>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80015a2:	2204      	movs	r2, #4
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	4211      	tst	r1, r2
 80015aa:	d002      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x46>
 80015ac:	6859      	ldr	r1, [r3, #4]
 80015ae:	4211      	tst	r1, r2
 80015b0:	d106      	bne.n	80015c0 <HAL_ADC_IRQHandler+0x54>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80015b2:	2208      	movs	r2, #8
 80015b4:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80015b6:	4211      	tst	r1, r2
 80015b8:	d028      	beq.n	800160c <HAL_ADC_IRQHandler+0xa0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	4211      	tst	r1, r2
 80015be:	d025      	beq.n	800160c <HAL_ADC_IRQHandler+0xa0>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015c2:	06d2      	lsls	r2, r2, #27
 80015c4:	d404      	bmi.n	80015d0 <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	430a      	orrs	r2, r1
 80015ce:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d0:	22c0      	movs	r2, #192	; 0xc0
 80015d2:	68d9      	ldr	r1, [r3, #12]
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	4211      	tst	r1, r2
 80015d8:	d112      	bne.n	8001600 <HAL_ADC_IRQHandler+0x94>
 80015da:	6a22      	ldr	r2, [r4, #32]
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d10f      	bne.n	8001600 <HAL_ADC_IRQHandler+0x94>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	0712      	lsls	r2, r2, #28
 80015e4:	d50c      	bpl.n	8001600 <HAL_ADC_IRQHandler+0x94>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	0752      	lsls	r2, r2, #29
 80015ea:	d43c      	bmi.n	8001666 <HAL_ADC_IRQHandler+0xfa>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015ec:	210c      	movs	r1, #12
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	438a      	bics	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80015f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_ADC_IRQHandler+0x11c>)
 80015f8:	401a      	ands	r2, r3
 80015fa:	2301      	movs	r3, #1
 80015fc:	4313      	orrs	r3, r2
 80015fe:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8001600:	0020      	movs	r0, r4
 8001602:	f7ff ffaf 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001606:	220c      	movs	r2, #12
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800160c:	2580      	movs	r5, #128	; 0x80
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	422a      	tst	r2, r5
 8001614:	d00c      	beq.n	8001630 <HAL_ADC_IRQHandler+0xc4>
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	422b      	tst	r3, r5
 800161a:	d009      	beq.n	8001630 <HAL_ADC_IRQHandler+0xc4>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	4313      	orrs	r3, r2
 8001624:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001626:	0020      	movs	r0, r4
 8001628:	f7ff ff9d 	bl	8001566 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001630:	2210      	movs	r2, #16
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	4211      	tst	r1, r2
 8001638:	d014      	beq.n	8001664 <HAL_ADC_IRQHandler+0xf8>
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	4211      	tst	r1, r2
 800163e:	d011      	beq.n	8001664 <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001640:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001642:	2a01      	cmp	r2, #1
 8001644:	d002      	beq.n	800164c <HAL_ADC_IRQHandler+0xe0>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001646:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001648:	07d2      	lsls	r2, r2, #31
 800164a:	d508      	bpl.n	800165e <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800164c:	2202      	movs	r2, #2
 800164e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8001650:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001652:	430a      	orrs	r2, r1
 8001654:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001656:	2210      	movs	r2, #16
 8001658:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800165a:	f7ff ff85 	bl	8001568 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800165e:	2210      	movs	r2, #16
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001666:	2320      	movs	r3, #32
 8001668:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800166a:	4313      	orrs	r3, r2
 800166c:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	2301      	movs	r3, #1
 8001670:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001672:	4313      	orrs	r3, r2
 8001674:	64a3      	str	r3, [r4, #72]	; 0x48
 8001676:	e7c3      	b.n	8001600 <HAL_ADC_IRQHandler+0x94>
 8001678:	40012400 	.word	0x40012400
 800167c:	00000576 	.word	0x00000576
 8001680:	08004c99 	.word	0x08004c99
 8001684:	00000577 	.word	0x00000577
 8001688:	fffffefe 	.word	0xfffffefe

0800168c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800168c:	2300      	movs	r3, #0
{
 800168e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001690:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001692:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001694:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_ADC_ConfigChannel+0x128>)
{
 8001696:	0004      	movs	r4, r0
 8001698:	000d      	movs	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800169a:	429a      	cmp	r2, r3
 800169c:	d003      	beq.n	80016a6 <HAL_ADC_ConfigChannel+0x1a>
 800169e:	4946      	ldr	r1, [pc, #280]	; (80017b8 <HAL_ADC_ConfigChannel+0x12c>)
 80016a0:	4846      	ldr	r0, [pc, #280]	; (80017bc <HAL_ADC_ConfigChannel+0x130>)
 80016a2:	f7ff fa28 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	2b11      	cmp	r3, #17
 80016aa:	d903      	bls.n	80016b4 <HAL_ADC_ConfigChannel+0x28>
 80016ac:	4944      	ldr	r1, [pc, #272]	; (80017c0 <HAL_ADC_ConfigChannel+0x134>)
 80016ae:	4843      	ldr	r0, [pc, #268]	; (80017bc <HAL_ADC_ConfigChannel+0x130>)
 80016b0:	f7ff fa21 	bl	8000af6 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 80016b4:	686b      	ldr	r3, [r5, #4]
 80016b6:	4a43      	ldr	r2, [pc, #268]	; (80017c4 <HAL_ADC_ConfigChannel+0x138>)
 80016b8:	189b      	adds	r3, r3, r2
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d903      	bls.n	80016c6 <HAL_ADC_ConfigChannel+0x3a>
 80016be:	4942      	ldr	r1, [pc, #264]	; (80017c8 <HAL_ADC_ConfigChannel+0x13c>)
 80016c0:	483e      	ldr	r0, [pc, #248]	; (80017bc <HAL_ADC_ConfigChannel+0x130>)
 80016c2:	f7ff fa18 	bl	8000af6 <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ca:	0552      	lsls	r2, r2, #21
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00c      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x5e>
 80016d0:	3b01      	subs	r3, #1
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d909      	bls.n	80016ea <HAL_ADC_ConfigChannel+0x5e>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80016d6:	68ab      	ldr	r3, [r5, #8]
 80016d8:	4293      	cmp	r3, r2
 80016da:	d006      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x5e>
 80016dc:	3b01      	subs	r3, #1
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d903      	bls.n	80016ea <HAL_ADC_ConfigChannel+0x5e>
 80016e2:	493a      	ldr	r1, [pc, #232]	; (80017cc <HAL_ADC_ConfigChannel+0x140>)
 80016e4:	4835      	ldr	r0, [pc, #212]	; (80017bc <HAL_ADC_ConfigChannel+0x130>)
 80016e6:	f7ff fa06 	bl	8000af6 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ea:	0026      	movs	r6, r4
 80016ec:	3640      	adds	r6, #64	; 0x40
 80016ee:	7833      	ldrb	r3, [r6, #0]
 80016f0:	2002      	movs	r0, #2
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d02a      	beq.n	800174c <HAL_ADC_ConfigChannel+0xc0>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016f6:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 80016f8:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016fa:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80016fc:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016fe:	0752      	lsls	r2, r2, #29
 8001700:	d452      	bmi.n	80017a8 <HAL_ADC_ConfigChannel+0x11c>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001702:	4933      	ldr	r1, [pc, #204]	; (80017d0 <HAL_ADC_ConfigChannel+0x144>)
 8001704:	686f      	ldr	r7, [r5, #4]
 8001706:	682a      	ldr	r2, [r5, #0]
 8001708:	428f      	cmp	r7, r1
 800170a:	d03b      	beq.n	8001784 <HAL_ADC_ConfigChannel+0xf8>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800170c:	4090      	lsls	r0, r2
 800170e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001710:	4308      	orrs	r0, r1
 8001712:	6298      	str	r0, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001718:	0540      	lsls	r0, r0, #21
 800171a:	4281      	cmp	r1, r0
 800171c:	d00f      	beq.n	800173e <HAL_ADC_ConfigChannel+0xb2>
 800171e:	3901      	subs	r1, #1
 8001720:	2906      	cmp	r1, #6
 8001722:	d90c      	bls.n	800173e <HAL_ADC_ConfigChannel+0xb2>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001724:	2007      	movs	r0, #7
 8001726:	695c      	ldr	r4, [r3, #20]
 8001728:	68a9      	ldr	r1, [r5, #8]
 800172a:	4004      	ands	r4, r0
 800172c:	42a1      	cmp	r1, r4
 800172e:	d006      	beq.n	800173e <HAL_ADC_ConfigChannel+0xb2>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001730:	695c      	ldr	r4, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001732:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001734:	4384      	bics	r4, r0
 8001736:	615c      	str	r4, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001738:	695c      	ldr	r4, [r3, #20]
 800173a:	4321      	orrs	r1, r4
 800173c:	6159      	str	r1, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800173e:	0013      	movs	r3, r2
 8001740:	3b10      	subs	r3, #16
 8001742:	2b01      	cmp	r3, #1
 8001744:	d903      	bls.n	800174e <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001746:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001748:	2300      	movs	r3, #0
 800174a:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800174c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_ADC_ConfigChannel+0x148>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	2a10      	cmp	r2, #16
 8001756:	d013      	beq.n	8001780 <HAL_ADC_ConfigChannel+0xf4>
 8001758:	03c9      	lsls	r1, r1, #15
 800175a:	4301      	orrs	r1, r0
 800175c:	6019      	str	r1, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800175e:	2a10      	cmp	r2, #16
 8001760:	d1f1      	bne.n	8001746 <HAL_ADC_ConfigChannel+0xba>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x14c>)
 8001764:	491d      	ldr	r1, [pc, #116]	; (80017dc <HAL_ADC_ConfigChannel+0x150>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f7fe fcd8 	bl	800011c <__udivsi3>
 800176c:	230a      	movs	r3, #10
 800176e:	4358      	muls	r0, r3
 8001770:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001772:	9b01      	ldr	r3, [sp, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0e6      	beq.n	8001746 <HAL_ADC_ConfigChannel+0xba>
            wait_loop_index--;
 8001778:	9b01      	ldr	r3, [sp, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	e7f8      	b.n	8001772 <HAL_ADC_ConfigChannel+0xe6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001780:	0409      	lsls	r1, r1, #16
 8001782:	e7ea      	b.n	800175a <HAL_ADC_ConfigChannel+0xce>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001784:	4090      	lsls	r0, r2
 8001786:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001788:	4381      	bics	r1, r0
 800178a:	6299      	str	r1, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800178c:	0013      	movs	r3, r2
 800178e:	3b10      	subs	r3, #16
 8001790:	2b01      	cmp	r3, #1
 8001792:	d8d8      	bhi.n	8001746 <HAL_ADC_ConfigChannel+0xba>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_ConfigChannel+0x148>)
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	2a10      	cmp	r2, #16
 800179a:	d003      	beq.n	80017a4 <HAL_ADC_ConfigChannel+0x118>
 800179c:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <HAL_ADC_ConfigChannel+0x154>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e7d0      	b.n	8001746 <HAL_ADC_ConfigChannel+0xba>
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_ADC_ConfigChannel+0x158>)
 80017a6:	e7fa      	b.n	800179e <HAL_ADC_ConfigChannel+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a8:	2320      	movs	r3, #32
 80017aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6463      	str	r3, [r4, #68]	; 0x44
 80017b0:	e7ca      	b.n	8001748 <HAL_ADC_ConfigChannel+0xbc>
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40012400 	.word	0x40012400
 80017b8:	00000651 	.word	0x00000651
 80017bc:	08004c99 	.word	0x08004c99
 80017c0:	00000652 	.word	0x00000652
 80017c4:	fffff000 	.word	0xfffff000
 80017c8:	00000653 	.word	0x00000653
 80017cc:	00000657 	.word	0x00000657
 80017d0:	00001001 	.word	0x00001001
 80017d4:	40012708 	.word	0x40012708
 80017d8:	200001e4 	.word	0x200001e4
 80017dc:	000f4240 	.word	0x000f4240
 80017e0:	ffbfffff 	.word	0xffbfffff
 80017e4:	ff7fffff 	.word	0xff7fffff

080017e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	0004      	movs	r4, r0
 80017ec:	000d      	movs	r5, r1
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017ee:	2903      	cmp	r1, #3
 80017f0:	d903      	bls.n	80017fa <HAL_NVIC_SetPriority+0x12>
 80017f2:	219b      	movs	r1, #155	; 0x9b
 80017f4:	4816      	ldr	r0, [pc, #88]	; (8001850 <HAL_NVIC_SetPriority+0x68>)
 80017f6:	f7ff f97e 	bl	8000af6 <assert_failed>
 80017fa:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	da14      	bge.n	800182a <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001800:	230f      	movs	r3, #15
 8001802:	b2e4      	uxtb	r4, r4
 8001804:	4023      	ands	r3, r4
 8001806:	3b08      	subs	r3, #8
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_NVIC_SetPriority+0x6c>)
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	189b      	adds	r3, r3, r2
 8001810:	2203      	movs	r2, #3
 8001812:	4014      	ands	r4, r2
 8001814:	4094      	lsls	r4, r2
 8001816:	32fc      	adds	r2, #252	; 0xfc
 8001818:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800181a:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181c:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800181e:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	69d8      	ldr	r0, [r3, #28]
 8001822:	43a8      	bics	r0, r5
 8001824:	4302      	orrs	r2, r0
 8001826:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001828:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800182a:	2503      	movs	r5, #3
 800182c:	08a3      	lsrs	r3, r4, #2
 800182e:	402c      	ands	r4, r5
 8001830:	40ac      	lsls	r4, r5
 8001832:	35fc      	adds	r5, #252	; 0xfc
 8001834:	002e      	movs	r6, r5
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_NVIC_SetPriority+0x70>)
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	189b      	adds	r3, r3, r2
 800183c:	22c0      	movs	r2, #192	; 0xc0
 800183e:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001840:	4029      	ands	r1, r5
 8001842:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	5898      	ldr	r0, [r3, r2]
 8001848:	43b0      	bics	r0, r6
 800184a:	4301      	orrs	r1, r0
 800184c:	5099      	str	r1, [r3, r2]
 800184e:	e7eb      	b.n	8001828 <HAL_NVIC_SetPriority+0x40>
 8001850:	08004cd1 	.word	0x08004cd1
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	e000e100 	.word	0xe000e100

0800185c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b510      	push	{r4, lr}
 800185e:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001860:	da03      	bge.n	800186a <HAL_NVIC_EnableIRQ+0xe>
 8001862:	21ab      	movs	r1, #171	; 0xab
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <HAL_NVIC_EnableIRQ+0x1c>)
 8001866:	f7ff f946 	bl	8000af6 <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800186a:	231f      	movs	r3, #31
 800186c:	401c      	ands	r4, r3
 800186e:	3b1e      	subs	r3, #30
 8001870:	40a3      	lsls	r3, r4
 8001872:	4a02      	ldr	r2, [pc, #8]	; (800187c <HAL_NVIC_EnableIRQ+0x20>)
 8001874:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001876:	bd10      	pop	{r4, pc}
 8001878:	08004cd1 	.word	0x08004cd1
 800187c:	e000e100 	.word	0xe000e100

08001880 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_SYSTICK_Config+0x28>)
 8001882:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001884:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001886:	4293      	cmp	r3, r2
 8001888:	d80d      	bhi.n	80018a6 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800188a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001890:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001892:	6a03      	ldr	r3, [r0, #32]
 8001894:	0609      	lsls	r1, r1, #24
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	430b      	orrs	r3, r1
 800189c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018a6:	4770      	bx	lr
 80018a8:	00ffffff 	.word	0x00ffffff
 80018ac:	e000e010 	.word	0xe000e010
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80018b8:	d102      	bne.n	80018c0 <HAL_CRC_Init+0xc>
  {
    return HAL_ERROR;
 80018ba:	2501      	movs	r5, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 80018bc:	0028      	movs	r0, r5
 80018be:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_CRC_Init+0xac>)
 80018c2:	6802      	ldr	r2, [r0, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d003      	beq.n	80018d0 <HAL_CRC_Init+0x1c>
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	4826      	ldr	r0, [pc, #152]	; (8001964 <HAL_CRC_Init+0xb0>)
 80018cc:	f7ff f913 	bl	8000af6 <assert_failed>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80018d0:	7f63      	ldrb	r3, [r4, #29]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d103      	bne.n	80018e0 <HAL_CRC_Init+0x2c>
    hcrc->Lock = HAL_UNLOCKED;
 80018d8:	7723      	strb	r3, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 80018da:	0020      	movs	r0, r4
 80018dc:	f7fe fd72 	bl	80003c4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80018e0:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80018e2:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80018e4:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80018e6:	f000 f83f 	bl	8001968 <HAL_CRCEx_Init>
 80018ea:	1e05      	subs	r5, r0, #0
 80018ec:	d1e5      	bne.n	80018ba <HAL_CRC_Init+0x6>
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80018ee:	7963      	ldrb	r3, [r4, #5]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d903      	bls.n	80018fc <HAL_CRC_Init+0x48>
 80018f4:	2199      	movs	r1, #153	; 0x99
 80018f6:	481b      	ldr	r0, [pc, #108]	; (8001964 <HAL_CRC_Init+0xb0>)
 80018f8:	f7ff f8fd 	bl	8000af6 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80018fc:	7962      	ldrb	r2, [r4, #5]
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	2a00      	cmp	r2, #0
 8001902:	d12a      	bne.n	800195a <HAL_CRC_Init+0xa6>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8001904:	3a01      	subs	r2, #1
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001906:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 8001908:	2360      	movs	r3, #96	; 0x60
 800190a:	6962      	ldr	r2, [r4, #20]
 800190c:	439a      	bics	r2, r3
 800190e:	d003      	beq.n	8001918 <HAL_CRC_Init+0x64>
 8001910:	21a5      	movs	r1, #165	; 0xa5
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <HAL_CRC_Init+0xb0>)
 8001914:	f7ff f8ef 	bl	8000af6 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001918:	2160      	movs	r1, #96	; 0x60
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	6893      	ldr	r3, [r2, #8]
 800191e:	438b      	bics	r3, r1
 8001920:	6961      	ldr	r1, [r4, #20]
 8001922:	430b      	orrs	r3, r1
 8001924:	6093      	str	r3, [r2, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	69a2      	ldr	r2, [r4, #24]
 800192a:	439a      	bics	r2, r3
 800192c:	d003      	beq.n	8001936 <HAL_CRC_Init+0x82>
 800192e:	21a9      	movs	r1, #169	; 0xa9
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <HAL_CRC_Init+0xb0>)
 8001932:	f7ff f8e0 	bl	8000af6 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	6893      	ldr	r3, [r2, #8]
 800193c:	438b      	bics	r3, r1
 800193e:	69a1      	ldr	r1, [r4, #24]
 8001940:	430b      	orrs	r3, r1
 8001942:	6093      	str	r3, [r2, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8001944:	6a23      	ldr	r3, [r4, #32]
 8001946:	3b01      	subs	r3, #1
 8001948:	2b02      	cmp	r3, #2
 800194a:	d903      	bls.n	8001954 <HAL_CRC_Init+0xa0>
 800194c:	21ae      	movs	r1, #174	; 0xae
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_CRC_Init+0xb0>)
 8001950:	f7ff f8d1 	bl	8000af6 <assert_failed>
  hcrc->State = HAL_CRC_STATE_READY;
 8001954:	2301      	movs	r3, #1
 8001956:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001958:	e7b0      	b.n	80018bc <HAL_CRC_Init+0x8>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800195a:	6922      	ldr	r2, [r4, #16]
 800195c:	e7d3      	b.n	8001906 <HAL_CRC_Init+0x52>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40023000 	.word	0x40023000
 8001964:	08004d0c 	.word	0x08004d0c

08001968 <HAL_CRCEx_Init>:
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
}
 8001968:	2000      	movs	r0, #0
 800196a:	4770      	bx	lr

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8001970:	2001      	movs	r0, #1
  if(NULL == hdma)
 8001972:	2c00      	cmp	r4, #0
 8001974:	d100      	bne.n	8001978 <HAL_DMA_Init+0xc>
 8001976:	e081      	b.n	8001a7c <HAL_DMA_Init+0x110>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_DMA_Init+0x114>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00f      	beq.n	80019a0 <HAL_DMA_Init+0x34>
 8001980:	4a40      	ldr	r2, [pc, #256]	; (8001a84 <HAL_DMA_Init+0x118>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00c      	beq.n	80019a0 <HAL_DMA_Init+0x34>
 8001986:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <HAL_DMA_Init+0x11c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d009      	beq.n	80019a0 <HAL_DMA_Init+0x34>
 800198c:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <HAL_DMA_Init+0x120>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d006      	beq.n	80019a0 <HAL_DMA_Init+0x34>
 8001992:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <HAL_DMA_Init+0x124>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_Init+0x34>
 8001998:	21a5      	movs	r1, #165	; 0xa5
 800199a:	483e      	ldr	r0, [pc, #248]	; (8001a94 <HAL_DMA_Init+0x128>)
 800199c:	f7ff f8ab 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80019a0:	6863      	ldr	r3, [r4, #4]
 80019a2:	2210      	movs	r2, #16
 80019a4:	0019      	movs	r1, r3
 80019a6:	4391      	bics	r1, r2
 80019a8:	d007      	beq.n	80019ba <HAL_DMA_Init+0x4e>
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	01d2      	lsls	r2, r2, #7
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d003      	beq.n	80019ba <HAL_DMA_Init+0x4e>
 80019b2:	21a6      	movs	r1, #166	; 0xa6
 80019b4:	4837      	ldr	r0, [pc, #220]	; (8001a94 <HAL_DMA_Init+0x128>)
 80019b6:	f7ff f89e 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80019ba:	2340      	movs	r3, #64	; 0x40
 80019bc:	68a2      	ldr	r2, [r4, #8]
 80019be:	439a      	bics	r2, r3
 80019c0:	d003      	beq.n	80019ca <HAL_DMA_Init+0x5e>
 80019c2:	21a7      	movs	r1, #167	; 0xa7
 80019c4:	4833      	ldr	r0, [pc, #204]	; (8001a94 <HAL_DMA_Init+0x128>)
 80019c6:	f7ff f896 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	68e2      	ldr	r2, [r4, #12]
 80019ce:	439a      	bics	r2, r3
 80019d0:	d003      	beq.n	80019da <HAL_DMA_Init+0x6e>
 80019d2:	21a8      	movs	r1, #168	; 0xa8
 80019d4:	482f      	ldr	r0, [pc, #188]	; (8001a94 <HAL_DMA_Init+0x128>)
 80019d6:	f7ff f88e 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80019da:	6923      	ldr	r3, [r4, #16]
 80019dc:	4a2e      	ldr	r2, [pc, #184]	; (8001a98 <HAL_DMA_Init+0x12c>)
 80019de:	4213      	tst	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_Init+0x86>
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <HAL_DMA_Init+0x86>
 80019ea:	21a9      	movs	r1, #169	; 0xa9
 80019ec:	4829      	ldr	r0, [pc, #164]	; (8001a94 <HAL_DMA_Init+0x128>)
 80019ee:	f7ff f882 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80019f2:	6963      	ldr	r3, [r4, #20]
 80019f4:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <HAL_DMA_Init+0x130>)
 80019f6:	4213      	tst	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_DMA_Init+0x9e>
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA_Init+0x9e>
 8001a02:	21aa      	movs	r1, #170	; 0xaa
 8001a04:	4823      	ldr	r0, [pc, #140]	; (8001a94 <HAL_DMA_Init+0x128>)
 8001a06:	f7ff f876 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	69a2      	ldr	r2, [r4, #24]
 8001a0e:	439a      	bics	r2, r3
 8001a10:	d003      	beq.n	8001a1a <HAL_DMA_Init+0xae>
 8001a12:	21ab      	movs	r1, #171	; 0xab
 8001a14:	481f      	ldr	r0, [pc, #124]	; (8001a94 <HAL_DMA_Init+0x128>)
 8001a16:	f7ff f86e 	bl	8000af6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_DMA_Init+0x134>)
 8001a1c:	69e2      	ldr	r2, [r4, #28]
 8001a1e:	421a      	tst	r2, r3
 8001a20:	d003      	beq.n	8001a2a <HAL_DMA_Init+0xbe>
 8001a22:	21ac      	movs	r1, #172	; 0xac
 8001a24:	481b      	ldr	r0, [pc, #108]	; (8001a94 <HAL_DMA_Init+0x128>)
 8001a26:	f7ff f866 	bl	8000af6 <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2a:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a2c:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2e:	1ca5      	adds	r5, r4, #2
 8001a30:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8001a32:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_DMA_Init+0x138>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a36:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a38:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	68e1      	ldr	r1, [r4, #12]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	6921      	ldr	r1, [r4, #16]
 8001a44:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	6961      	ldr	r1, [r4, #20]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	69a1      	ldr	r1, [r4, #24]
 8001a4c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4e:	69e1      	ldr	r1, [r4, #28]
 8001a50:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001a52:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a54:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_DMA_Init+0x13c>)
 8001a58:	2114      	movs	r1, #20
 8001a5a:	18c0      	adds	r0, r0, r3
 8001a5c:	f7fe fb5e 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_DMA_Init+0x140>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a62:	0080      	lsls	r0, r0, #2
 8001a64:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a66:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8001a68:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8001a6c:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001a6e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001a70:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001a72:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a74:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8001a76:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001a78:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001a7a:	77e0      	strb	r0, [r4, #31]
}  
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40020008 	.word	0x40020008
 8001a84:	4002001c 	.word	0x4002001c
 8001a88:	40020030 	.word	0x40020030
 8001a8c:	40020044 	.word	0x40020044
 8001a90:	40020058 	.word	0x40020058
 8001a94:	08004d44 	.word	0x08004d44
 8001a98:	fffffeff 	.word	0xfffffeff
 8001a9c:	fffffbff 	.word	0xfffffbff
 8001aa0:	ffffcfff 	.word	0xffffcfff
 8001aa4:	ffffc00f 	.word	0xffffc00f
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_DMA_Start_IT>:
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	0015      	movs	r5, r2
 8001ab4:	001f      	movs	r7, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_DMA_Start_IT+0x90>)
{
 8001aba:	0004      	movs	r4, r0
 8001abc:	000e      	movs	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d904      	bls.n	8001acc <HAL_DMA_Start_IT+0x1c>
 8001ac2:	21af      	movs	r1, #175	; 0xaf
 8001ac4:	481f      	ldr	r0, [pc, #124]	; (8001b44 <HAL_DMA_Start_IT+0x94>)
 8001ac6:	0049      	lsls	r1, r1, #1
 8001ac8:	f7ff f815 	bl	8000af6 <assert_failed>
  __HAL_LOCK(hdma);
 8001acc:	1c63      	adds	r3, r4, #1
 8001ace:	7fda      	ldrb	r2, [r3, #31]
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	2a01      	cmp	r2, #1
 8001ad4:	d026      	beq.n	8001b24 <HAL_DMA_Start_IT+0x74>
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	77da      	strb	r2, [r3, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ada:	1822      	adds	r2, r4, r0
 8001adc:	4694      	mov	ip, r2
 8001ade:	7fd2      	ldrb	r2, [r2, #31]
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	2a01      	cmp	r2, #1
 8001ae6:	d128      	bne.n	8001b3a <HAL_DMA_Start_IT+0x8a>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	4663      	mov	r3, ip
 8001aea:	77d8      	strb	r0, [r3, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aec:	6823      	ldr	r3, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aee:	63a1      	str	r1, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af0:	6819      	ldr	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001af2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af4:	4391      	bics	r1, r2
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001af6:	4082      	lsls	r2, r0
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af8:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001afa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001afc:	604a      	str	r2, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001afe:	6862      	ldr	r2, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8001b00:	605f      	str	r7, [r3, #4]
 8001b02:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b04:	2a10      	cmp	r2, #16
 8001b06:	d10e      	bne.n	8001b26 <HAL_DMA_Start_IT+0x76>
    hdma->Instance->CPAR = DstAddress;
 8001b08:	609d      	str	r5, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b0a:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001b0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b0e:	6818      	ldr	r0, [r3, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d00b      	beq.n	8001b2c <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b14:	220e      	movs	r2, #14
 8001b16:	4302      	orrs	r2, r0
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b18:	601a      	str	r2, [r3, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b1a:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8001b1c:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b1e:	680a      	ldr	r2, [r1, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
} 
 8001b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8001b26:	609e      	str	r6, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b28:	60dd      	str	r5, [r3, #12]
 8001b2a:	e7ef      	b.n	8001b0c <HAL_DMA_Start_IT+0x5c>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	4302      	orrs	r2, r0
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b30:	2004      	movs	r0, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b32:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4382      	bics	r2, r0
 8001b38:	e7ee      	b.n	8001b18 <HAL_DMA_Start_IT+0x68>
    __HAL_UNLOCK(hdma); 
 8001b3a:	77d9      	strb	r1, [r3, #31]
 8001b3c:	e7f2      	b.n	8001b24 <HAL_DMA_Start_IT+0x74>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	0000fffe 	.word	0x0000fffe
 8001b44:	08004d44 	.word	0x08004d44

08001b48 <HAL_DMA_Abort_IT>:
{  
 8001b48:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b4a:	1c84      	adds	r4, r0, #2
 8001b4c:	7fe3      	ldrb	r3, [r4, #31]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b52:	2304      	movs	r3, #4
 8001b54:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001b56:	3b03      	subs	r3, #3
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b5c:	210e      	movs	r1, #14
 8001b5e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b60:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	438a      	bics	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	4391      	bics	r1, r2
 8001b6e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b70:	0011      	movs	r1, r2
 8001b72:	40a9      	lsls	r1, r5
 8001b74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001b76:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b78:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001b7a:	2400      	movs	r4, #0
 8001b7c:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8001b7e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001b80:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001b84:	42a2      	cmp	r2, r4
 8001b86:	d0e7      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001b88:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	0023      	movs	r3, r4
 8001b8c:	e7e4      	b.n	8001b58 <HAL_DMA_Abort_IT+0x10>

08001b8e <HAL_DMA_IRQHandler>:
{
 8001b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b90:	2704      	movs	r7, #4
 8001b92:	003e      	movs	r6, r7
 8001b94:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b98:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b9a:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ba0:	422e      	tst	r6, r5
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x32>
 8001ba4:	423c      	tst	r4, r7
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	0689      	lsls	r1, r1, #26
 8001bac:	d402      	bmi.n	8001bb4 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	43b9      	bics	r1, r7
 8001bb2:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bb6:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d019      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8001bbc:	4798      	blx	r3
}  
 8001bbe:	e017      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bc0:	2702      	movs	r7, #2
 8001bc2:	003e      	movs	r6, r7
 8001bc4:	408e      	lsls	r6, r1
 8001bc6:	422e      	tst	r6, r5
 8001bc8:	d013      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x64>
 8001bca:	423c      	tst	r4, r7
 8001bcc:	d011      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	0689      	lsls	r1, r1, #26
 8001bd2:	d406      	bmi.n	8001be2 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bd4:	240a      	movs	r4, #10
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	43a1      	bics	r1, r4
 8001bda:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	2101      	movs	r1, #1
 8001bde:	19c3      	adds	r3, r0, r7
 8001be0:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001be2:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001be4:	2200      	movs	r2, #0
 8001be6:	1c43      	adds	r3, r0, #1
 8001be8:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8001bea:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d1e5      	bne.n	8001bbc <HAL_DMA_IRQHandler+0x2e>
}  
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bf2:	2608      	movs	r6, #8
 8001bf4:	0037      	movs	r7, r6
 8001bf6:	408f      	lsls	r7, r1
 8001bf8:	423d      	tst	r5, r7
 8001bfa:	d0f9      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x62>
 8001bfc:	4234      	tst	r4, r6
 8001bfe:	d0f7      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c00:	250e      	movs	r5, #14
 8001c02:	681c      	ldr	r4, [r3, #0]
 8001c04:	43ac      	bics	r4, r5
 8001c06:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	001c      	movs	r4, r3
 8001c0c:	408c      	lsls	r4, r1
 8001c0e:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8001c10:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c12:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001c14:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8001c16:	2200      	movs	r2, #0
 8001c18:	18c3      	adds	r3, r0, r3
 8001c1a:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8001c1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c1e:	e7e5      	b.n	8001bec <HAL_DMA_IRQHandler+0x5e>

08001c20 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c20:	2110      	movs	r1, #16
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <FLASH_SetErrorCode+0x34>)
{
 8001c24:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c26:	68d8      	ldr	r0, [r3, #12]
  uint32_t flags = 0U;
 8001c28:	2200      	movs	r2, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c2a:	4208      	tst	r0, r1
 8001c2c:	d005      	beq.n	8001c3a <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <FLASH_SetErrorCode+0x38>)
 8001c30:	3202      	adds	r2, #2
 8001c32:	69c4      	ldr	r4, [r0, #28]
 8001c34:	4322      	orrs	r2, r4
 8001c36:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001c38:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c3a:	2004      	movs	r0, #4
 8001c3c:	68d9      	ldr	r1, [r3, #12]
 8001c3e:	4201      	tst	r1, r0
 8001c40:	d005      	beq.n	8001c4e <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c42:	2101      	movs	r1, #1
 8001c44:	4c04      	ldr	r4, [pc, #16]	; (8001c58 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8001c46:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c48:	69e5      	ldr	r5, [r4, #28]
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c4e:	60da      	str	r2, [r3, #12]
}  
 8001c50:	bd30      	pop	{r4, r5, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40022000 	.word	0x40022000
 8001c58:	200005f8 	.word	0x200005f8

08001c5c <HAL_FLASH_EndOfOperationCallback>:
 8001c5c:	4770      	bx	lr

08001c5e <HAL_FLASH_OperationErrorCallback>:
}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_FLASH_IRQHandler>:
{
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c62:	4d43      	ldr	r5, [pc, #268]	; (8001d70 <HAL_FLASH_IRQHandler+0x110>)
 8001c64:	4c43      	ldr	r4, [pc, #268]	; (8001d74 <HAL_FLASH_IRQHandler+0x114>)
 8001c66:	68eb      	ldr	r3, [r5, #12]
 8001c68:	06db      	lsls	r3, r3, #27
 8001c6a:	d402      	bmi.n	8001c72 <HAL_FLASH_IRQHandler+0x12>
 8001c6c:	68eb      	ldr	r3, [r5, #12]
 8001c6e:	075b      	lsls	r3, r3, #29
 8001c70:	d50a      	bpl.n	8001c88 <HAL_FLASH_IRQHandler+0x28>
    pFlash.Address = 0xFFFFFFFFU;
 8001c72:	2301      	movs	r3, #1
    addresstmp = pFlash.Address;
 8001c74:	68a6      	ldr	r6, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 8001c76:	425b      	negs	r3, r3
 8001c78:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8001c7a:	f7ff ffd1 	bl	8001c20 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001c7e:	0030      	movs	r0, r6
 8001c80:	f7ff ffed 	bl	8001c5e <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c88:	2320      	movs	r3, #32
 8001c8a:	68ea      	ldr	r2, [r5, #12]
 8001c8c:	421a      	tst	r2, r3
 8001c8e:	d01a      	beq.n	8001cc6 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c90:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001c92:	7823      	ldrb	r3, [r4, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d016      	beq.n	8001cc6 <HAL_FLASH_IRQHandler+0x66>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001c98:	7823      	ldrb	r3, [r4, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d128      	bne.n	8001cf0 <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01b      	beq.n	8001ce2 <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 8001caa:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001cac:	f7ff ffd6 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001cb0:	2380      	movs	r3, #128	; 0x80
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001cb2:	2202      	movs	r2, #2
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001cb4:	68a0      	ldr	r0, [r4, #8]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	18c0      	adds	r0, r0, r3
          pFlash.Address = addresstmp;
 8001cba:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001cbc:	692b      	ldr	r3, [r5, #16]
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 8001cc2:	f000 f85b 	bl	8001d7c <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001cc6:	7823      	ldrb	r3, [r4, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001cce:	2107      	movs	r1, #7
 8001cd0:	692a      	ldr	r2, [r5, #16]
 8001cd2:	438a      	bics	r2, r1
 8001cd4:	612a      	str	r2, [r5, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001cd6:	692a      	ldr	r2, [r5, #16]
 8001cd8:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_FLASH_IRQHandler+0x118>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	612a      	str	r2, [r5, #16]
    __HAL_UNLOCK(&pFlash);
 8001cde:	7623      	strb	r3, [r4, #24]
}
 8001ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	4240      	negs	r0, r0
 8001ce6:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ce8:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001cea:	f7ff ffb7 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
 8001cee:	e7ea      	b.n	8001cc6 <HAL_FLASH_IRQHandler+0x66>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001cf0:	7823      	ldrb	r3, [r4, #0]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d109      	bne.n	8001d0a <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 8001cfa:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 8001d00:	f7ff ffac 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	7023      	strb	r3, [r4, #0]
 8001d08:	e7dd      	b.n	8001cc6 <HAL_FLASH_IRQHandler+0x66>
        pFlash.DataRemaining--;
 8001d0a:	6863      	ldr	r3, [r4, #4]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8001d10:	6863      	ldr	r3, [r4, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2;
 8001d16:	68a3      	ldr	r3, [r4, #8]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8001d1c:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8001d1e:	6920      	ldr	r0, [r4, #16]
 8001d20:	6961      	ldr	r1, [r4, #20]
 8001d22:	0c0b      	lsrs	r3, r1, #16
 8001d24:	040f      	lsls	r7, r1, #16
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001d26:	2101      	movs	r1, #1
          pFlash.Data = (pFlash.Data >> 16U);
 8001d28:	0c02      	lsrs	r2, r0, #16
 8001d2a:	433a      	orrs	r2, r7
 8001d2c:	6122      	str	r2, [r4, #16]
 8001d2e:	6163      	str	r3, [r4, #20]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001d30:	692b      	ldr	r3, [r5, #16]
 8001d32:	438b      	bics	r3, r1
 8001d34:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001d36:	6922      	ldr	r2, [r4, #16]
 8001d38:	6963      	ldr	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001d3e:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001d40:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001d42:	4319      	orrs	r1, r3
 8001d44:	6129      	str	r1, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8001d46:	8032      	strh	r2, [r6, #0]
 8001d48:	e7bd      	b.n	8001cc6 <HAL_FLASH_IRQHandler+0x66>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001d4a:	7823      	ldrb	r3, [r4, #0]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d106      	bne.n	8001d5e <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001d50:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001d52:	f7ff ff83 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8001d56:	2301      	movs	r3, #1
 8001d58:	425b      	negs	r3, r3
 8001d5a:	60a3      	str	r3, [r4, #8]
 8001d5c:	e7d2      	b.n	8001d04 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001d5e:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001d60:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d101      	bne.n	8001d6a <HAL_FLASH_IRQHandler+0x10a>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001d66:	3802      	subs	r0, #2
 8001d68:	e7f3      	b.n	8001d52 <HAL_FLASH_IRQHandler+0xf2>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001d6a:	3806      	subs	r0, #6
 8001d6c:	e7f1      	b.n	8001d52 <HAL_FLASH_IRQHandler+0xf2>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	40022000 	.word	0x40022000
 8001d74:	200005f8 	.word	0x200005f8
 8001d78:	ffffebff 	.word	0xffffebff

08001d7c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <FLASH_PageErase+0x1c>)
 8001d80:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <FLASH_PageErase+0x20>)
 8001d84:	3202      	adds	r2, #2
 8001d86:	6919      	ldr	r1, [r3, #16]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d8c:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8001d8e:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	611a      	str	r2, [r3, #16]
}
 8001d96:	4770      	bx	lr
 8001d98:	200005f8 	.word	0x200005f8
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001da0:	2390      	movs	r3, #144	; 0x90
{ 
 8001da2:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001da4:	05db      	lsls	r3, r3, #23
{ 
 8001da6:	b087      	sub	sp, #28
 8001da8:	0004      	movs	r4, r0
 8001daa:	000d      	movs	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001dac:	4298      	cmp	r0, r3
 8001dae:	d00f      	beq.n	8001dd0 <HAL_GPIO_Init+0x30>
 8001db0:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_GPIO_Init+0x200>)
 8001db2:	4298      	cmp	r0, r3
 8001db4:	d00c      	beq.n	8001dd0 <HAL_GPIO_Init+0x30>
 8001db6:	4b7b      	ldr	r3, [pc, #492]	; (8001fa4 <HAL_GPIO_Init+0x204>)
 8001db8:	4298      	cmp	r0, r3
 8001dba:	d009      	beq.n	8001dd0 <HAL_GPIO_Init+0x30>
 8001dbc:	4b7a      	ldr	r3, [pc, #488]	; (8001fa8 <HAL_GPIO_Init+0x208>)
 8001dbe:	4298      	cmp	r0, r3
 8001dc0:	d006      	beq.n	8001dd0 <HAL_GPIO_Init+0x30>
 8001dc2:	4b7a      	ldr	r3, [pc, #488]	; (8001fac <HAL_GPIO_Init+0x20c>)
 8001dc4:	4298      	cmp	r0, r3
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x30>
 8001dc8:	21c1      	movs	r1, #193	; 0xc1
 8001dca:	4879      	ldr	r0, [pc, #484]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001dcc:	f7fe fe93 	bl	8000af6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_GPIO_Init+0x3c>
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x44>
 8001ddc:	21c2      	movs	r1, #194	; 0xc2
 8001dde:	4874      	ldr	r0, [pc, #464]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001de0:	f7fe fe89 	bl	8000af6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001de4:	686b      	ldr	r3, [r5, #4]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d912      	bls.n	8001e10 <HAL_GPIO_Init+0x70>
 8001dea:	001a      	movs	r2, r3
 8001dec:	3a11      	subs	r2, #17
 8001dee:	2a01      	cmp	r2, #1
 8001df0:	d90e      	bls.n	8001e10 <HAL_GPIO_Init+0x70>
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_GPIO_Init+0x214>)
 8001df4:	4970      	ldr	r1, [pc, #448]	; (8001fb8 <HAL_GPIO_Init+0x218>)
 8001df6:	401a      	ands	r2, r3
 8001df8:	1852      	adds	r2, r2, r1
 8001dfa:	4970      	ldr	r1, [pc, #448]	; (8001fbc <HAL_GPIO_Init+0x21c>)
 8001dfc:	420a      	tst	r2, r1
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x70>
 8001e00:	4a6f      	ldr	r2, [pc, #444]	; (8001fc0 <HAL_GPIO_Init+0x220>)
 8001e02:	189b      	adds	r3, r3, r2
 8001e04:	420b      	tst	r3, r1
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x70>
 8001e08:	21c3      	movs	r1, #195	; 0xc3
 8001e0a:	4869      	ldr	r0, [pc, #420]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001e0c:	f7fe fe73 	bl	8000af6 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8001e10:	68ab      	ldr	r3, [r5, #8]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d903      	bls.n	8001e1e <HAL_GPIO_Init+0x7e>
 8001e16:	21c4      	movs	r1, #196	; 0xc4
 8001e18:	4865      	ldr	r0, [pc, #404]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001e1a:	f7fe fe6c 	bl	8000af6 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1e:	2300      	movs	r3, #0
        }
        EXTI->FTSR = temp;
      }
    }
    
    position++;
 8001e20:	9301      	str	r3, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	9901      	ldr	r1, [sp, #4]
 8001e26:	001a      	movs	r2, r3
 8001e28:	40ca      	lsrs	r2, r1
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x90>
  } 
}
 8001e2c:	b007      	add	sp, #28
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e30:	2201      	movs	r2, #1
 8001e32:	9901      	ldr	r1, [sp, #4]
 8001e34:	408a      	lsls	r2, r1
 8001e36:	9203      	str	r2, [sp, #12]
 8001e38:	401a      	ands	r2, r3
 8001e3a:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8001e3c:	d100      	bne.n	8001e40 <HAL_GPIO_Init+0xa0>
 8001e3e:	e0ab      	b.n	8001f98 <HAL_GPIO_Init+0x1f8>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001e40:	2210      	movs	r2, #16
 8001e42:	686b      	ldr	r3, [r5, #4]
 8001e44:	4393      	bics	r3, r2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d122      	bne.n	8001e90 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001e4a:	2390      	movs	r3, #144	; 0x90
 8001e4c:	05db      	lsls	r3, r3, #23
 8001e4e:	429c      	cmp	r4, r3
 8001e50:	d006      	beq.n	8001e60 <HAL_GPIO_Init+0xc0>
 8001e52:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_GPIO_Init+0x200>)
 8001e54:	429c      	cmp	r4, r3
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0xc0>
 8001e58:	21d3      	movs	r1, #211	; 0xd3
 8001e5a:	4855      	ldr	r0, [pc, #340]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001e5c:	f7fe fe4b 	bl	8000af6 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001e60:	692b      	ldr	r3, [r5, #16]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d903      	bls.n	8001e6e <HAL_GPIO_Init+0xce>
 8001e66:	21d4      	movs	r1, #212	; 0xd4
 8001e68:	4851      	ldr	r0, [pc, #324]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001e6a:	f7fe fe44 	bl	8000af6 <assert_failed>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001e6e:	2207      	movs	r2, #7
 8001e70:	9801      	ldr	r0, [sp, #4]
        temp = GPIOx->AFR[position >> 3];
 8001e72:	9b01      	ldr	r3, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001e74:	4002      	ands	r2, r0
 8001e76:	200f      	movs	r0, #15
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3];
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	18e3      	adds	r3, r4, r3
 8001e82:	6a19      	ldr	r1, [r3, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001e84:	4381      	bics	r1, r0
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001e86:	6928      	ldr	r0, [r5, #16]
 8001e88:	4090      	lsls	r0, r2
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001e8e:	621a      	str	r2, [r3, #32]
 8001e90:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e92:	686a      	ldr	r2, [r5, #4]
 8001e94:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001e96:	2303      	movs	r3, #3
 8001e98:	001e      	movs	r6, r3
 8001e9a:	40be      	lsls	r6, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9c:	4013      	ands	r3, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001e9e:	43f6      	mvns	r6, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	40bb      	lsls	r3, r7
      temp = GPIOx->MODER;
 8001ea2:	6821      	ldr	r1, [r4, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001ea4:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea6:	430b      	orrs	r3, r1
      GPIOx->MODER = temp;
 8001ea8:	6023      	str	r3, [r4, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eaa:	2310      	movs	r3, #16
 8001eac:	439a      	bics	r2, r3
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	2a01      	cmp	r2, #1
 8001eb2:	d819      	bhi.n	8001ee8 <HAL_GPIO_Init+0x148>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001eb4:	68eb      	ldr	r3, [r5, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d905      	bls.n	8001ec6 <HAL_GPIO_Init+0x126>
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x126>
 8001ebe:	21e8      	movs	r1, #232	; 0xe8
 8001ec0:	483b      	ldr	r0, [pc, #236]	; (8001fb0 <HAL_GPIO_Init+0x210>)
 8001ec2:	f7fe fe18 	bl	8000af6 <assert_failed>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001ec6:	68eb      	ldr	r3, [r5, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ec8:	2101      	movs	r1, #1
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001eca:	40bb      	lsls	r3, r7
        temp = GPIOx->OSPEEDR; 
 8001ecc:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ece:	4032      	ands	r2, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001ed0:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8001ed2:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 8001ed4:	6862      	ldr	r2, [r4, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ed6:	9b03      	ldr	r3, [sp, #12]
 8001ed8:	439a      	bics	r2, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eda:	686b      	ldr	r3, [r5, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	400b      	ands	r3, r1
 8001ee0:	9901      	ldr	r1, [sp, #4]
 8001ee2:	408b      	lsls	r3, r1
 8001ee4:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8001ee6:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8001ee8:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001eea:	6869      	ldr	r1, [r5, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eec:	4033      	ands	r3, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001eee:	68ae      	ldr	r6, [r5, #8]
 8001ef0:	40be      	lsls	r6, r7
 8001ef2:	431e      	orrs	r6, r3
      GPIOx->PUPDR = temp;
 8001ef4:	60e6      	str	r6, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001ef6:	00cb      	lsls	r3, r1, #3
 8001ef8:	d54e      	bpl.n	8001f98 <HAL_GPIO_Init+0x1f8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2001      	movs	r0, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001efc:	2603      	movs	r6, #3
 8001efe:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_GPIO_Init+0x224>)
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	4302      	orrs	r2, r0
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	4003      	ands	r3, r0
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f0c:	9801      	ldr	r0, [sp, #4]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	9305      	str	r3, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f10:	4030      	ands	r0, r6
 8001f12:	0080      	lsls	r0, r0, #2
 8001f14:	4087      	lsls	r7, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	9b05      	ldr	r3, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	089a      	lsrs	r2, r3, #2
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_GPIO_Init+0x228>)
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	18d2      	adds	r2, r2, r3
 8001f22:	6893      	ldr	r3, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f24:	43bb      	bics	r3, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	2790      	movs	r7, #144	; 0x90
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f28:	469c      	mov	ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	05ff      	lsls	r7, r7, #23
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	42bc      	cmp	r4, r7
 8001f30:	d00c      	beq.n	8001f4c <HAL_GPIO_Init+0x1ac>
 8001f32:	4f1b      	ldr	r7, [pc, #108]	; (8001fa0 <HAL_GPIO_Init+0x200>)
 8001f34:	3301      	adds	r3, #1
 8001f36:	42bc      	cmp	r4, r7
 8001f38:	d008      	beq.n	8001f4c <HAL_GPIO_Init+0x1ac>
 8001f3a:	4f1a      	ldr	r7, [pc, #104]	; (8001fa4 <HAL_GPIO_Init+0x204>)
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	42bc      	cmp	r4, r7
 8001f40:	d004      	beq.n	8001f4c <HAL_GPIO_Init+0x1ac>
 8001f42:	4f19      	ldr	r7, [pc, #100]	; (8001fa8 <HAL_GPIO_Init+0x208>)
 8001f44:	199b      	adds	r3, r3, r6
 8001f46:	42bc      	cmp	r4, r7
 8001f48:	d100      	bne.n	8001f4c <HAL_GPIO_Init+0x1ac>
 8001f4a:	0033      	movs	r3, r6
 8001f4c:	4083      	lsls	r3, r0
 8001f4e:	4660      	mov	r0, ip
 8001f50:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f52:	6093      	str	r3, [r2, #8]
        temp = EXTI->IMR;
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_GPIO_Init+0x22c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f56:	9b02      	ldr	r3, [sp, #8]
        temp = EXTI->IMR;
 8001f58:	6816      	ldr	r6, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f5a:	43d8      	mvns	r0, r3
          SET_BIT(temp, iocurrent); 
 8001f5c:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5e:	03cf      	lsls	r7, r1, #15
 8001f60:	d401      	bmi.n	8001f66 <HAL_GPIO_Init+0x1c6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f62:	0033      	movs	r3, r6
 8001f64:	4003      	ands	r3, r0
        EXTI->IMR = temp;
 8001f66:	6013      	str	r3, [r2, #0]
        temp = EXTI->EMR;
 8001f68:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8001f6a:	9b02      	ldr	r3, [sp, #8]
 8001f6c:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6e:	038f      	lsls	r7, r1, #14
 8001f70:	d401      	bmi.n	8001f76 <HAL_GPIO_Init+0x1d6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001f72:	0033      	movs	r3, r6
 8001f74:	4003      	ands	r3, r0
        EXTI->EMR = temp;
 8001f76:	6053      	str	r3, [r2, #4]
        temp = EXTI->RTSR;
 8001f78:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8001f7a:	9b02      	ldr	r3, [sp, #8]
 8001f7c:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7e:	02cf      	lsls	r7, r1, #11
 8001f80:	d401      	bmi.n	8001f86 <HAL_GPIO_Init+0x1e6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f82:	0033      	movs	r3, r6
 8001f84:	4003      	ands	r3, r0
        EXTI->RTSR = temp;
 8001f86:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR;
 8001f88:	68d6      	ldr	r6, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8001f8a:	9b02      	ldr	r3, [sp, #8]
 8001f8c:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8e:	0289      	lsls	r1, r1, #10
 8001f90:	d401      	bmi.n	8001f96 <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f92:	0033      	movs	r3, r6
 8001f94:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 8001f96:	60d3      	str	r3, [r2, #12]
    position++;
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	e740      	b.n	8001e20 <HAL_GPIO_Init+0x80>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	48001400 	.word	0x48001400
 8001fb0:	08004d7c 	.word	0x08004d7c
 8001fb4:	ffdfffff 	.word	0xffdfffff
 8001fb8:	efef0000 	.word	0xefef0000
 8001fbc:	fffeffff 	.word	0xfffeffff
 8001fc0:	efdf0000 	.word	0xefdf0000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	0005      	movs	r5, r0
 8001fd4:	1e0c      	subs	r4, r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fd6:	d104      	bne.n	8001fe2 <HAL_GPIO_ReadPin+0x12>
 8001fd8:	218e      	movs	r1, #142	; 0x8e
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <HAL_GPIO_ReadPin+0x20>)
 8001fdc:	31ff      	adds	r1, #255	; 0xff
 8001fde:	f7fe fd8a 	bl	8000af6 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe2:	6928      	ldr	r0, [r5, #16]
 8001fe4:	4020      	ands	r0, r4
 8001fe6:	1e43      	subs	r3, r0, #1
 8001fe8:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001fea:	b2c0      	uxtb	r0, r0
  }
 8001fec:	bd70      	pop	{r4, r5, r6, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	08004d7c 	.word	0x08004d7c

08001ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	0005      	movs	r5, r0
 8001ff8:	000c      	movs	r4, r1
 8001ffa:	0016      	movs	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d104      	bne.n	800200a <HAL_GPIO_WritePin+0x16>
 8002000:	21d6      	movs	r1, #214	; 0xd6
 8002002:	4808      	ldr	r0, [pc, #32]	; (8002024 <HAL_GPIO_WritePin+0x30>)
 8002004:	0049      	lsls	r1, r1, #1
 8002006:	f7fe fd76 	bl	8000af6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800200a:	2e01      	cmp	r6, #1
 800200c:	d906      	bls.n	800201c <HAL_GPIO_WritePin+0x28>
 800200e:	21ae      	movs	r1, #174	; 0xae
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <HAL_GPIO_WritePin+0x30>)
 8002012:	31ff      	adds	r1, #255	; 0xff
 8002014:	f7fe fd6f 	bl	8000af6 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002018:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800201a:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 800201c:	2e00      	cmp	r6, #0
 800201e:	d1fb      	bne.n	8002018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002020:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8002022:	e7fa      	b.n	800201a <HAL_GPIO_WritePin+0x26>
 8002024:	08004d7c 	.word	0x08004d7c

08002028 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	0005      	movs	r5, r0
 800202c:	1e0c      	subs	r4, r1, #0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800202e:	d104      	bne.n	800203a <HAL_GPIO_TogglePin+0x12>
 8002030:	21e1      	movs	r1, #225	; 0xe1
 8002032:	4804      	ldr	r0, [pc, #16]	; (8002044 <HAL_GPIO_TogglePin+0x1c>)
 8002034:	0049      	lsls	r1, r1, #1
 8002036:	f7fe fd5e 	bl	8000af6 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 800203a:	696b      	ldr	r3, [r5, #20]
 800203c:	405c      	eors	r4, r3
 800203e:	616c      	str	r4, [r5, #20]
}
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	08004d7c 	.word	0x08004d7c

08002048 <HAL_I2CEx_EnableFastModePlus>:
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 8002048:	0002      	movs	r2, r0
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_I2CEx_EnableFastModePlus+0x48>)
{
 800204c:	b513      	push	{r0, r1, r4, lr}
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 800204e:	401a      	ands	r2, r3
{
 8002050:	0004      	movs	r4, r0
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 8002052:	429a      	cmp	r2, r3
 8002054:	d008      	beq.n	8002068 <HAL_I2CEx_EnableFastModePlus+0x20>
 8002056:	23df      	movs	r3, #223	; 0xdf
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	4218      	tst	r0, r3
 800205c:	d109      	bne.n	8002072 <HAL_I2CEx_EnableFastModePlus+0x2a>
 800205e:	0002      	movs	r2, r0
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_I2CEx_EnableFastModePlus+0x4c>)
 8002062:	401a      	ands	r2, r3
 8002064:	429a      	cmp	r2, r3
 8002066:	d004      	beq.n	8002072 <HAL_I2CEx_EnableFastModePlus+0x2a>
 8002068:	2194      	movs	r1, #148	; 0x94
 800206a:	480b      	ldr	r0, [pc, #44]	; (8002098 <HAL_I2CEx_EnableFastModePlus+0x50>)
 800206c:	0049      	lsls	r1, r1, #1
 800206e:	f7fe fd42 	bl	8000af6 <assert_failed>

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2001      	movs	r0, #1
 8002074:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_I2CEx_EnableFastModePlus+0x54>)
 8002076:	6991      	ldr	r1, [r2, #24]
 8002078:	4301      	orrs	r1, r0
 800207a:	6191      	str	r1, [r2, #24]
 800207c:	6993      	ldr	r3, [r2, #24]
 800207e:	4003      	ands	r3, r0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_I2CEx_EnableFastModePlus+0x58>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4314      	orrs	r4, r2
 800208a:	601c      	str	r4, [r3, #0]
}
 800208c:	bd13      	pop	{r0, r1, r4, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	aaaa0000 	.word	0xaaaa0000
 8002094:	aaaa0200 	.word	0xaaaa0200
 8002098:	08004db5 	.word	0x08004db5
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000

080020a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
  if(hiwdg == NULL)
 80020aa:	2c00      	cmp	r4, #0
 80020ac:	d032      	beq.n	8002114 <HAL_IWDG_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_IWDG_Init+0x88>)
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d003      	beq.n	80020be <HAL_IWDG_Init+0x1a>
 80020b6:	21b5      	movs	r1, #181	; 0xb5
 80020b8:	481d      	ldr	r0, [pc, #116]	; (8002130 <HAL_IWDG_Init+0x8c>)
 80020ba:	f7fe fd1c 	bl	8000af6 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d903      	bls.n	80020cc <HAL_IWDG_Init+0x28>
 80020c4:	21b6      	movs	r1, #182	; 0xb6
 80020c6:	481a      	ldr	r0, [pc, #104]	; (8002130 <HAL_IWDG_Init+0x8c>)
 80020c8:	f7fe fd15 	bl	8000af6 <assert_failed>
 80020cc:	4d19      	ldr	r5, [pc, #100]	; (8002134 <HAL_IWDG_Init+0x90>)
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80020ce:	68a3      	ldr	r3, [r4, #8]
 80020d0:	42ab      	cmp	r3, r5
 80020d2:	d903      	bls.n	80020dc <HAL_IWDG_Init+0x38>
 80020d4:	21b7      	movs	r1, #183	; 0xb7
 80020d6:	4816      	ldr	r0, [pc, #88]	; (8002130 <HAL_IWDG_Init+0x8c>)
 80020d8:	f7fe fd0d 	bl	8000af6 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 80020dc:	68e3      	ldr	r3, [r4, #12]
 80020de:	42ab      	cmp	r3, r5
 80020e0:	d903      	bls.n	80020ea <HAL_IWDG_Init+0x46>
 80020e2:	21b8      	movs	r1, #184	; 0xb8
 80020e4:	4812      	ldr	r0, [pc, #72]	; (8002130 <HAL_IWDG_Init+0x8c>)
 80020e6:	f7fe fd06 	bl	8000af6 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_IWDG_Init+0x94>)
 80020ee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80020f0:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_IWDG_Init+0x98>)
 80020f2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80020f4:	6862      	ldr	r2, [r4, #4]
 80020f6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80020f8:	68a2      	ldr	r2, [r4, #8]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80020fc:	f7ff f8e8 	bl	80012d0 <HAL_GetTick>
 8002100:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	68d8      	ldr	r0, [r3, #12]
 8002106:	2800      	cmp	r0, #0
 8002108:	d105      	bne.n	8002116 <HAL_IWDG_Init+0x72>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	68e2      	ldr	r2, [r4, #12]
 800210e:	4291      	cmp	r1, r2
 8002110:	d008      	beq.n	8002124 <HAL_IWDG_Init+0x80>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002112:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8002114:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002116:	f7ff f8db 	bl	80012d0 <HAL_GetTick>
 800211a:	1b40      	subs	r0, r0, r5
 800211c:	2827      	cmp	r0, #39	; 0x27
 800211e:	d9f0      	bls.n	8002102 <HAL_IWDG_Init+0x5e>
      return HAL_TIMEOUT;
 8002120:	2003      	movs	r0, #3
 8002122:	e7f7      	b.n	8002114 <HAL_IWDG_Init+0x70>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_IWDG_Init+0x9c>)
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e7f4      	b.n	8002114 <HAL_IWDG_Init+0x70>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40003000 	.word	0x40003000
 8002130:	08004df0 	.word	0x08004df0
 8002134:	00000fff 	.word	0x00000fff
 8002138:	0000cccc 	.word	0x0000cccc
 800213c:	00005555 	.word	0x00005555
 8002140:	0000aaaa 	.word	0x0000aaaa

08002144 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002144:	6803      	ldr	r3, [r0, #0]
 8002146:	4a02      	ldr	r2, [pc, #8]	; (8002150 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8002148:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	4770      	bx	lr
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	0000aaaa 	.word	0x0000aaaa

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	0004      	movs	r4, r0
 8002158:	b085      	sub	sp, #20
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 800215a:	2800      	cmp	r0, #0
 800215c:	d104      	bne.n	8002168 <HAL_RCC_OscConfig+0x14>
 800215e:	2189      	movs	r1, #137	; 0x89
 8002160:	48b8      	ldr	r0, [pc, #736]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	f7fe fcc7 	bl	8000af6 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_RCC_OscConfig+0x28>
 800216e:	06db      	lsls	r3, r3, #27
 8002170:	d104      	bne.n	800217c <HAL_RCC_OscConfig+0x28>
 8002172:	2114      	movs	r1, #20
 8002174:	48b3      	ldr	r0, [pc, #716]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 8002176:	31ff      	adds	r1, #255	; 0xff
 8002178:	f7fe fcbd 	bl	8000af6 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	07db      	lsls	r3, r3, #31
 8002180:	d448      	bmi.n	8002214 <HAL_RCC_OscConfig+0xc0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	079b      	lsls	r3, r3, #30
 8002186:	d500      	bpl.n	800218a <HAL_RCC_OscConfig+0x36>
 8002188:	e0a5      	b.n	80022d6 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	071b      	lsls	r3, r3, #28
 800218e:	d500      	bpl.n	8002192 <HAL_RCC_OscConfig+0x3e>
 8002190:	e0f0      	b.n	8002374 <HAL_RCC_OscConfig+0x220>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	075b      	lsls	r3, r3, #29
 8002196:	d500      	bpl.n	800219a <HAL_RCC_OscConfig+0x46>
 8002198:	e11b      	b.n	80023d2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	06db      	lsls	r3, r3, #27
 800219e:	d52b      	bpl.n	80021f8 <HAL_RCC_OscConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 80021a0:	6963      	ldr	r3, [r4, #20]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d906      	bls.n	80021b4 <HAL_RCC_OscConfig+0x60>
 80021a6:	3305      	adds	r3, #5
 80021a8:	d004      	beq.n	80021b4 <HAL_RCC_OscConfig+0x60>
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	48a5      	ldr	r0, [pc, #660]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 80021ae:	0089      	lsls	r1, r1, #2
 80021b0:	f7fe fca1 	bl	8000af6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 80021b4:	69a3      	ldr	r3, [r4, #24]
 80021b6:	2b1f      	cmp	r3, #31
 80021b8:	d903      	bls.n	80021c2 <HAL_RCC_OscConfig+0x6e>
 80021ba:	49a3      	ldr	r1, [pc, #652]	; (8002448 <HAL_RCC_OscConfig+0x2f4>)
 80021bc:	48a1      	ldr	r0, [pc, #644]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 80021be:	f7fe fc9a 	bl	8000af6 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021c2:	6962      	ldr	r2, [r4, #20]
 80021c4:	4da1      	ldr	r5, [pc, #644]	; (800244c <HAL_RCC_OscConfig+0x2f8>)
 80021c6:	2304      	movs	r3, #4
 80021c8:	2a01      	cmp	r2, #1
 80021ca:	d000      	beq.n	80021ce <HAL_RCC_OscConfig+0x7a>
 80021cc:	e18d      	b.n	80024ea <HAL_RCC_OscConfig+0x396>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ce:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021d0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80021d2:	430b      	orrs	r3, r1
 80021d4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80021d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80021d8:	431a      	orrs	r2, r3
 80021da:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80021dc:	f7ff f878 	bl	80012d0 <HAL_GetTick>
 80021e0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80021e4:	4233      	tst	r3, r6
 80021e6:	d100      	bne.n	80021ea <HAL_RCC_OscConfig+0x96>
 80021e8:	e178      	b.n	80024dc <HAL_RCC_OscConfig+0x388>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021ea:	21f8      	movs	r1, #248	; 0xf8
 80021ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021ee:	69a3      	ldr	r3, [r4, #24]
 80021f0:	438a      	bics	r2, r1
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	636b      	str	r3, [r5, #52]	; 0x34
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80021f8:	6a23      	ldr	r3, [r4, #32]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d904      	bls.n	8002208 <HAL_RCC_OscConfig+0xb4>
 80021fe:	219d      	movs	r1, #157	; 0x9d
 8002200:	4890      	ldr	r0, [pc, #576]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 8002202:	0089      	lsls	r1, r1, #2
 8002204:	f7fe fc77 	bl	8000af6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002208:	6a22      	ldr	r2, [r4, #32]
 800220a:	2a00      	cmp	r2, #0
 800220c:	d000      	beq.n	8002210 <HAL_RCC_OscConfig+0xbc>
 800220e:	e187      	b.n	8002520 <HAL_RCC_OscConfig+0x3cc>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002210:	2000      	movs	r0, #0
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xfc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d906      	bls.n	8002228 <HAL_RCC_OscConfig+0xd4>
 800221a:	2b05      	cmp	r3, #5
 800221c:	d004      	beq.n	8002228 <HAL_RCC_OscConfig+0xd4>
 800221e:	211a      	movs	r1, #26
 8002220:	4888      	ldr	r0, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 8002222:	31ff      	adds	r1, #255	; 0xff
 8002224:	f7fe fc67 	bl	8000af6 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002228:	210c      	movs	r1, #12
 800222a:	4d88      	ldr	r5, [pc, #544]	; (800244c <HAL_RCC_OscConfig+0x2f8>)
 800222c:	686a      	ldr	r2, [r5, #4]
 800222e:	400a      	ands	r2, r1
 8002230:	2a04      	cmp	r2, #4
 8002232:	d006      	beq.n	8002242 <HAL_RCC_OscConfig+0xee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002234:	686b      	ldr	r3, [r5, #4]
 8002236:	400b      	ands	r3, r1
 8002238:	2b08      	cmp	r3, #8
 800223a:	d10b      	bne.n	8002254 <HAL_RCC_OscConfig+0x100>
 800223c:	686b      	ldr	r3, [r5, #4]
 800223e:	03db      	lsls	r3, r3, #15
 8002240:	d508      	bpl.n	8002254 <HAL_RCC_OscConfig+0x100>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	682b      	ldr	r3, [r5, #0]
 8002244:	039b      	lsls	r3, r3, #14
 8002246:	d59c      	bpl.n	8002182 <HAL_RCC_OscConfig+0x2e>
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d199      	bne.n	8002182 <HAL_RCC_OscConfig+0x2e>
        return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
}
 8002250:	b005      	add	sp, #20
 8002252:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d114      	bne.n	8002284 <HAL_RCC_OscConfig+0x130>
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	682a      	ldr	r2, [r5, #0]
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	4313      	orrs	r3, r2
 8002262:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002264:	f7ff f834 	bl	80012d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002268:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800226a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226c:	02b6      	lsls	r6, r6, #10
 800226e:	682b      	ldr	r3, [r5, #0]
 8002270:	4233      	tst	r3, r6
 8002272:	d000      	beq.n	8002276 <HAL_RCC_OscConfig+0x122>
 8002274:	e785      	b.n	8002182 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002276:	f7ff f82b 	bl	80012d0 <HAL_GetTick>
 800227a:	1bc0      	subs	r0, r0, r7
 800227c:	2864      	cmp	r0, #100	; 0x64
 800227e:	d9f6      	bls.n	800226e <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8002280:	2003      	movs	r0, #3
 8002282:	e7e5      	b.n	8002250 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	2b00      	cmp	r3, #0
 8002286:	d116      	bne.n	80022b6 <HAL_RCC_OscConfig+0x162>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	4a71      	ldr	r2, [pc, #452]	; (8002450 <HAL_RCC_OscConfig+0x2fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228c:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	4013      	ands	r3, r2
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	4a6f      	ldr	r2, [pc, #444]	; (8002454 <HAL_RCC_OscConfig+0x300>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	4013      	ands	r3, r2
 800229a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800229c:	f7ff f818 	bl	80012d0 <HAL_GetTick>
 80022a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	4233      	tst	r3, r6
 80022a6:	d100      	bne.n	80022aa <HAL_RCC_OscConfig+0x156>
 80022a8:	e76b      	b.n	8002182 <HAL_RCC_OscConfig+0x2e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022aa:	f7ff f811 	bl	80012d0 <HAL_GetTick>
 80022ae:	1bc0      	subs	r0, r0, r7
 80022b0:	2864      	cmp	r0, #100	; 0x64
 80022b2:	d9f6      	bls.n	80022a2 <HAL_RCC_OscConfig+0x14e>
 80022b4:	e7e4      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x172>
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	682a      	ldr	r2, [r5, #0]
 80022be:	02db      	lsls	r3, r3, #11
 80022c0:	4313      	orrs	r3, r2
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	e7c9      	b.n	800225a <HAL_RCC_OscConfig+0x106>
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	4a61      	ldr	r2, [pc, #388]	; (8002450 <HAL_RCC_OscConfig+0x2fc>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	602b      	str	r3, [r5, #0]
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	4a60      	ldr	r2, [pc, #384]	; (8002454 <HAL_RCC_OscConfig+0x300>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	e7c5      	b.n	8002262 <HAL_RCC_OscConfig+0x10e>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80022d6:	68e3      	ldr	r3, [r4, #12]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d904      	bls.n	80022e6 <HAL_RCC_OscConfig+0x192>
 80022dc:	214e      	movs	r1, #78	; 0x4e
 80022de:	4859      	ldr	r0, [pc, #356]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 80022e0:	31ff      	adds	r1, #255	; 0xff
 80022e2:	f7fe fc08 	bl	8000af6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80022e6:	6923      	ldr	r3, [r4, #16]
 80022e8:	2b1f      	cmp	r3, #31
 80022ea:	d904      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1a2>
 80022ec:	21a7      	movs	r1, #167	; 0xa7
 80022ee:	4855      	ldr	r0, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 80022f0:	0049      	lsls	r1, r1, #1
 80022f2:	f7fe fc00 	bl	8000af6 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022f6:	220c      	movs	r2, #12
 80022f8:	4d54      	ldr	r5, [pc, #336]	; (800244c <HAL_RCC_OscConfig+0x2f8>)
 80022fa:	686b      	ldr	r3, [r5, #4]
 80022fc:	4213      	tst	r3, r2
 80022fe:	d006      	beq.n	800230e <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002300:	686b      	ldr	r3, [r5, #4]
 8002302:	4013      	ands	r3, r2
 8002304:	2b08      	cmp	r3, #8
 8002306:	d110      	bne.n	800232a <HAL_RCC_OscConfig+0x1d6>
 8002308:	686b      	ldr	r3, [r5, #4]
 800230a:	03db      	lsls	r3, r3, #15
 800230c:	d40d      	bmi.n	800232a <HAL_RCC_OscConfig+0x1d6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	079b      	lsls	r3, r3, #30
 8002312:	d502      	bpl.n	800231a <HAL_RCC_OscConfig+0x1c6>
 8002314:	68e3      	ldr	r3, [r4, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d199      	bne.n	800224e <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	21f8      	movs	r1, #248	; 0xf8
 800231c:	682a      	ldr	r2, [r5, #0]
 800231e:	6923      	ldr	r3, [r4, #16]
 8002320:	438a      	bics	r2, r1
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4313      	orrs	r3, r2
 8002326:	602b      	str	r3, [r5, #0]
 8002328:	e72f      	b.n	800218a <HAL_RCC_OscConfig+0x36>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232a:	68e2      	ldr	r2, [r4, #12]
 800232c:	2301      	movs	r3, #1
 800232e:	2a00      	cmp	r2, #0
 8002330:	d00f      	beq.n	8002352 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_ENABLE();
 8002332:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8002336:	4313      	orrs	r3, r2
 8002338:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800233a:	f7fe ffc9 	bl	80012d0 <HAL_GetTick>
 800233e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	4233      	tst	r3, r6
 8002344:	d1e9      	bne.n	800231a <HAL_RCC_OscConfig+0x1c6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe ffc3 	bl	80012d0 <HAL_GetTick>
 800234a:	1bc0      	subs	r0, r0, r7
 800234c:	2802      	cmp	r0, #2
 800234e:	d9f7      	bls.n	8002340 <HAL_RCC_OscConfig+0x1ec>
 8002350:	e796      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8002352:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002354:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8002356:	439a      	bics	r2, r3
 8002358:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800235a:	f7fe ffb9 	bl	80012d0 <HAL_GetTick>
 800235e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	4233      	tst	r3, r6
 8002364:	d100      	bne.n	8002368 <HAL_RCC_OscConfig+0x214>
 8002366:	e710      	b.n	800218a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe ffb2 	bl	80012d0 <HAL_GetTick>
 800236c:	1bc0      	subs	r0, r0, r7
 800236e:	2802      	cmp	r0, #2
 8002370:	d9f6      	bls.n	8002360 <HAL_RCC_OscConfig+0x20c>
 8002372:	e785      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002374:	69e3      	ldr	r3, [r4, #28]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d904      	bls.n	8002384 <HAL_RCC_OscConfig+0x230>
 800237a:	21c7      	movs	r1, #199	; 0xc7
 800237c:	4831      	ldr	r0, [pc, #196]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 800237e:	0049      	lsls	r1, r1, #1
 8002380:	f7fe fbb9 	bl	8000af6 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002384:	69e2      	ldr	r2, [r4, #28]
 8002386:	2301      	movs	r3, #1
 8002388:	4d30      	ldr	r5, [pc, #192]	; (800244c <HAL_RCC_OscConfig+0x2f8>)
 800238a:	2a00      	cmp	r2, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_OscConfig+0x25c>
      __HAL_RCC_LSI_ENABLE();
 800238e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002390:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8002392:	4313      	orrs	r3, r2
 8002394:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002396:	f7fe ff9b 	bl	80012d0 <HAL_GetTick>
 800239a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800239e:	4233      	tst	r3, r6
 80023a0:	d000      	beq.n	80023a4 <HAL_RCC_OscConfig+0x250>
 80023a2:	e6f6      	b.n	8002192 <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a4:	f7fe ff94 	bl	80012d0 <HAL_GetTick>
 80023a8:	1bc0      	subs	r0, r0, r7
 80023aa:	2802      	cmp	r0, #2
 80023ac:	d9f6      	bls.n	800239c <HAL_RCC_OscConfig+0x248>
 80023ae:	e767      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_LSI_DISABLE();
 80023b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80023b4:	439a      	bics	r2, r3
 80023b6:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80023b8:	f7fe ff8a 	bl	80012d0 <HAL_GetTick>
 80023bc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023c0:	4233      	tst	r3, r6
 80023c2:	d100      	bne.n	80023c6 <HAL_RCC_OscConfig+0x272>
 80023c4:	e6e5      	b.n	8002192 <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c6:	f7fe ff83 	bl	80012d0 <HAL_GetTick>
 80023ca:	1bc0      	subs	r0, r0, r7
 80023cc:	2802      	cmp	r0, #2
 80023ce:	d9f6      	bls.n	80023be <HAL_RCC_OscConfig+0x26a>
 80023d0:	e756      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80023d2:	68a3      	ldr	r3, [r4, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d906      	bls.n	80023e6 <HAL_RCC_OscConfig+0x292>
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d004      	beq.n	80023e6 <HAL_RCC_OscConfig+0x292>
 80023dc:	21dd      	movs	r1, #221	; 0xdd
 80023de:	4819      	ldr	r0, [pc, #100]	; (8002444 <HAL_RCC_OscConfig+0x2f0>)
 80023e0:	0049      	lsls	r1, r1, #1
 80023e2:	f7fe fb88 	bl	8000af6 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80023e8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4d18      	ldr	r5, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x2f8>)
 80023ec:	0552      	lsls	r2, r2, #21
 80023ee:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80023f0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4213      	tst	r3, r2
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	69eb      	ldr	r3, [r5, #28]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61eb      	str	r3, [r5, #28]
 80023fc:	69eb      	ldr	r3, [r5, #28]
 80023fe:	4013      	ands	r3, r2
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	2780      	movs	r7, #128	; 0x80
 800240a:	4e13      	ldr	r6, [pc, #76]	; (8002458 <HAL_RCC_OscConfig+0x304>)
 800240c:	007f      	lsls	r7, r7, #1
 800240e:	6833      	ldr	r3, [r6, #0]
 8002410:	423b      	tst	r3, r7
 8002412:	d006      	beq.n	8002422 <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	68a3      	ldr	r3, [r4, #8]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d120      	bne.n	800245c <HAL_RCC_OscConfig+0x308>
 800241a:	6a2a      	ldr	r2, [r5, #32]
 800241c:	4313      	orrs	r3, r2
 800241e:	622b      	str	r3, [r5, #32]
 8002420:	e03d      	b.n	800249e <HAL_RCC_OscConfig+0x34a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	6833      	ldr	r3, [r6, #0]
 8002424:	433b      	orrs	r3, r7
 8002426:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002428:	f7fe ff52 	bl	80012d0 <HAL_GetTick>
 800242c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	423b      	tst	r3, r7
 8002432:	d1ef      	bne.n	8002414 <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe ff4c 	bl	80012d0 <HAL_GetTick>
 8002438:	9b01      	ldr	r3, [sp, #4]
 800243a:	1ac0      	subs	r0, r0, r3
 800243c:	2864      	cmp	r0, #100	; 0x64
 800243e:	d9f6      	bls.n	800242e <HAL_RCC_OscConfig+0x2da>
 8002440:	e71e      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	08004e29 	.word	0x08004e29
 8002448:	00000201 	.word	0x00000201
 800244c:	40021000 	.word	0x40021000
 8002450:	fffeffff 	.word	0xfffeffff
 8002454:	fffbffff 	.word	0xfffbffff
 8002458:	40007000 	.word	0x40007000
 800245c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245e:	2b00      	cmp	r3, #0
 8002460:	d114      	bne.n	800248c <HAL_RCC_OscConfig+0x338>
 8002462:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002466:	4393      	bics	r3, r2
 8002468:	622b      	str	r3, [r5, #32]
 800246a:	6a2b      	ldr	r3, [r5, #32]
 800246c:	3203      	adds	r2, #3
 800246e:	4393      	bics	r3, r2
 8002470:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002472:	f7fe ff2d 	bl	80012d0 <HAL_GetTick>
 8002476:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	6a2b      	ldr	r3, [r5, #32]
 800247a:	423b      	tst	r3, r7
 800247c:	d025      	beq.n	80024ca <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe ff27 	bl	80012d0 <HAL_GetTick>
 8002482:	4b64      	ldr	r3, [pc, #400]	; (8002614 <HAL_RCC_OscConfig+0x4c0>)
 8002484:	1b80      	subs	r0, r0, r6
 8002486:	4298      	cmp	r0, r3
 8002488:	d9f6      	bls.n	8002478 <HAL_RCC_OscConfig+0x324>
 800248a:	e6f9      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	2b05      	cmp	r3, #5
 800248e:	d10b      	bne.n	80024a8 <HAL_RCC_OscConfig+0x354>
 8002490:	6a29      	ldr	r1, [r5, #32]
 8002492:	3b01      	subs	r3, #1
 8002494:	430b      	orrs	r3, r1
 8002496:	622b      	str	r3, [r5, #32]
 8002498:	6a2b      	ldr	r3, [r5, #32]
 800249a:	431a      	orrs	r2, r3
 800249c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800249e:	f7fe ff17 	bl	80012d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80024a4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	e00d      	b.n	80024c4 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	6a2b      	ldr	r3, [r5, #32]
 80024aa:	4393      	bics	r3, r2
 80024ac:	2204      	movs	r2, #4
 80024ae:	622b      	str	r3, [r5, #32]
 80024b0:	6a2b      	ldr	r3, [r5, #32]
 80024b2:	4393      	bics	r3, r2
 80024b4:	e7b3      	b.n	800241e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe ff0b 	bl	80012d0 <HAL_GetTick>
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x4c0>)
 80024bc:	1b80      	subs	r0, r0, r6
 80024be:	4298      	cmp	r0, r3
 80024c0:	d900      	bls.n	80024c4 <HAL_RCC_OscConfig+0x370>
 80024c2:	e6dd      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	6a2b      	ldr	r3, [r5, #32]
 80024c6:	423b      	tst	r3, r7
 80024c8:	d0f5      	beq.n	80024b6 <HAL_RCC_OscConfig+0x362>
    if(pwrclkchanged == SET)
 80024ca:	9b00      	ldr	r3, [sp, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d000      	beq.n	80024d2 <HAL_RCC_OscConfig+0x37e>
 80024d0:	e663      	b.n	800219a <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	69eb      	ldr	r3, [r5, #28]
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	61eb      	str	r3, [r5, #28]
 80024da:	e65e      	b.n	800219a <HAL_RCC_OscConfig+0x46>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024dc:	f7fe fef8 	bl	80012d0 <HAL_GetTick>
 80024e0:	1bc0      	subs	r0, r0, r7
 80024e2:	2802      	cmp	r0, #2
 80024e4:	d800      	bhi.n	80024e8 <HAL_RCC_OscConfig+0x394>
 80024e6:	e67c      	b.n	80021e2 <HAL_RCC_OscConfig+0x8e>
 80024e8:	e6ca      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024ea:	3205      	adds	r2, #5
 80024ec:	d103      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSI14ADC_ENABLE();
 80024ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024f0:	439a      	bics	r2, r3
 80024f2:	636a      	str	r2, [r5, #52]	; 0x34
 80024f4:	e679      	b.n	80021ea <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_HSI14ADC_DISABLE();
 80024f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024f8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fa:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80024fc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fe:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002500:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002502:	4393      	bics	r3, r2
 8002504:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002506:	f7fe fee3 	bl	80012d0 <HAL_GetTick>
 800250a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800250c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800250e:	4233      	tst	r3, r6
 8002510:	d100      	bne.n	8002514 <HAL_RCC_OscConfig+0x3c0>
 8002512:	e671      	b.n	80021f8 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002514:	f7fe fedc 	bl	80012d0 <HAL_GetTick>
 8002518:	1bc0      	subs	r0, r0, r7
 800251a:	2802      	cmp	r0, #2
 800251c:	d9f6      	bls.n	800250c <HAL_RCC_OscConfig+0x3b8>
 800251e:	e6af      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002520:	210c      	movs	r1, #12
 8002522:	4d3e      	ldr	r5, [pc, #248]	; (800261c <HAL_RCC_OscConfig+0x4c8>)
      return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002526:	686b      	ldr	r3, [r5, #4]
 8002528:	400b      	ands	r3, r1
 800252a:	2b08      	cmp	r3, #8
 800252c:	d100      	bne.n	8002530 <HAL_RCC_OscConfig+0x3dc>
 800252e:	e68f      	b.n	8002250 <HAL_RCC_OscConfig+0xfc>
 8002530:	4e3b      	ldr	r6, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x4cc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002532:	2a02      	cmp	r2, #2
 8002534:	d15b      	bne.n	80025ee <HAL_RCC_OscConfig+0x49a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800253a:	421a      	tst	r2, r3
 800253c:	d003      	beq.n	8002546 <HAL_RCC_OscConfig+0x3f2>
 800253e:	493a      	ldr	r1, [pc, #232]	; (8002628 <HAL_RCC_OscConfig+0x4d4>)
 8002540:	483a      	ldr	r0, [pc, #232]	; (800262c <HAL_RCC_OscConfig+0x4d8>)
 8002542:	f7fe fad8 	bl	8000af6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002546:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x4dc>)
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x4e0>)
 800254c:	4011      	ands	r1, r2
 800254e:	4013      	ands	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_RCC_OscConfig+0x426>
 8002552:	2080      	movs	r0, #128	; 0x80
 8002554:	0340      	lsls	r0, r0, #13
 8002556:	4283      	cmp	r3, r0
 8002558:	d00f      	beq.n	800257a <HAL_RCC_OscConfig+0x426>
 800255a:	2080      	movs	r0, #128	; 0x80
 800255c:	0380      	lsls	r0, r0, #14
 800255e:	4283      	cmp	r3, r0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x426>
 8002562:	23c0      	movs	r3, #192	; 0xc0
 8002564:	039b      	lsls	r3, r3, #14
 8002566:	4299      	cmp	r1, r3
 8002568:	d007      	beq.n	800257a <HAL_RCC_OscConfig+0x426>
 800256a:	23e0      	movs	r3, #224	; 0xe0
 800256c:	039b      	lsls	r3, r3, #14
 800256e:	429a      	cmp	r2, r3
 8002570:	d003      	beq.n	800257a <HAL_RCC_OscConfig+0x426>
 8002572:	4931      	ldr	r1, [pc, #196]	; (8002638 <HAL_RCC_OscConfig+0x4e4>)
 8002574:	482d      	ldr	r0, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x4d8>)
 8002576:	f7fe fabe 	bl	8000af6 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 800257a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d903      	bls.n	8002588 <HAL_RCC_OscConfig+0x434>
 8002580:	492e      	ldr	r1, [pc, #184]	; (800263c <HAL_RCC_OscConfig+0x4e8>)
 8002582:	482a      	ldr	r0, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x4d8>)
 8002584:	f7fe fab7 	bl	8000af6 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	401e      	ands	r6, r3
 800258c:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 800258e:	f7fe fe9f 	bl	80012d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002594:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	04b6      	lsls	r6, r6, #18
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	4233      	tst	r3, r6
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259e:	220f      	movs	r2, #15
 80025a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80025a2:	4393      	bics	r3, r2
 80025a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025a6:	4313      	orrs	r3, r2
 80025a8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80025aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025ae:	686a      	ldr	r2, [r5, #4]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	4923      	ldr	r1, [pc, #140]	; (8002640 <HAL_RCC_OscConfig+0x4ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b6:	400a      	ands	r2, r1
 80025b8:	4313      	orrs	r3, r2
 80025ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	682a      	ldr	r2, [r5, #0]
 80025c0:	045b      	lsls	r3, r3, #17
 80025c2:	4313      	orrs	r3, r2
 80025c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025c6:	f7fe fe83 	bl	80012d0 <HAL_GetTick>
 80025ca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	04a4      	lsls	r4, r4, #18
 80025ce:	682b      	ldr	r3, [r5, #0]
 80025d0:	4223      	tst	r3, r4
 80025d2:	d000      	beq.n	80025d6 <HAL_RCC_OscConfig+0x482>
 80025d4:	e61c      	b.n	8002210 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d6:	f7fe fe7b 	bl	80012d0 <HAL_GetTick>
 80025da:	1b80      	subs	r0, r0, r6
 80025dc:	2802      	cmp	r0, #2
 80025de:	d9f6      	bls.n	80025ce <HAL_RCC_OscConfig+0x47a>
 80025e0:	e64e      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fe75 	bl	80012d0 <HAL_GetTick>
 80025e6:	1bc0      	subs	r0, r0, r7
 80025e8:	2802      	cmp	r0, #2
 80025ea:	d9d5      	bls.n	8002598 <HAL_RCC_OscConfig+0x444>
 80025ec:	e648      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_PLL_DISABLE();
 80025ee:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80025f2:	401e      	ands	r6, r3
 80025f4:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 80025f6:	f7fe fe6b 	bl	80012d0 <HAL_GetTick>
 80025fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fc:	04a4      	lsls	r4, r4, #18
 80025fe:	682b      	ldr	r3, [r5, #0]
 8002600:	4223      	tst	r3, r4
 8002602:	d100      	bne.n	8002606 <HAL_RCC_OscConfig+0x4b2>
 8002604:	e604      	b.n	8002210 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fe63 	bl	80012d0 <HAL_GetTick>
 800260a:	1b80      	subs	r0, r0, r6
 800260c:	2802      	cmp	r0, #2
 800260e:	d9f6      	bls.n	80025fe <HAL_RCC_OscConfig+0x4aa>
 8002610:	e636      	b.n	8002280 <HAL_RCC_OscConfig+0x12c>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	00001388 	.word	0x00001388
 8002618:	efffffff 	.word	0xefffffff
 800261c:	40021000 	.word	0x40021000
 8002620:	feffffff 	.word	0xfeffffff
 8002624:	fffeffff 	.word	0xfffeffff
 8002628:	0000027d 	.word	0x0000027d
 800262c:	08004e29 	.word	0x08004e29
 8002630:	fffbffff 	.word	0xfffbffff
 8002634:	fff3ffff 	.word	0xfff3ffff
 8002638:	0000027e 	.word	0x0000027e
 800263c:	0000027f 	.word	0x0000027f
 8002640:	ffc2ffff 	.word	0xffc2ffff

08002644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002646:	4c14      	ldr	r4, [pc, #80]	; (8002698 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8002648:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800264a:	2210      	movs	r2, #16
 800264c:	0021      	movs	r1, r4
 800264e:	4668      	mov	r0, sp
 8002650:	f001 fe6c 	bl	800432c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002654:	0021      	movs	r1, r4
 8002656:	ad04      	add	r5, sp, #16
 8002658:	2210      	movs	r2, #16
 800265a:	3110      	adds	r1, #16
 800265c:	0028      	movs	r0, r5
 800265e:	f001 fe65 	bl	800432c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002662:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002664:	4e0d      	ldr	r6, [pc, #52]	; (800269c <HAL_RCC_GetSysClockFreq+0x58>)
 8002666:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	401a      	ands	r2, r3
 800266a:	2a08      	cmp	r2, #8
 800266c:	d111      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800266e:	200f      	movs	r0, #15
 8002670:	466a      	mov	r2, sp
 8002672:	0c99      	lsrs	r1, r3, #18
 8002674:	4001      	ands	r1, r0
 8002676:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002678:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800267a:	4002      	ands	r2, r0
 800267c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800267e:	03db      	lsls	r3, r3, #15
 8002680:	d505      	bpl.n	800268e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002684:	f7fd fd4a 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002688:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800268a:	b008      	add	sp, #32
 800268c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002690:	e7fa      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8002692:	4803      	ldr	r0, [pc, #12]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002694:	e7f9      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x46>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	08004be4 	.word	0x08004be4
 800269c:	40021000 	.word	0x40021000
 80026a0:	007a1200 	.word	0x007a1200
 80026a4:	003d0900 	.word	0x003d0900

080026a8 <HAL_RCC_ClockConfig>:
{
 80026a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026aa:	0004      	movs	r4, r0
 80026ac:	000f      	movs	r7, r1
  assert_param(RCC_ClkInitStruct != NULL);
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d103      	bne.n	80026ba <HAL_RCC_ClockConfig+0x12>
 80026b2:	4968      	ldr	r1, [pc, #416]	; (8002854 <HAL_RCC_ClockConfig+0x1ac>)
 80026b4:	4868      	ldr	r0, [pc, #416]	; (8002858 <HAL_RCC_ClockConfig+0x1b0>)
 80026b6:	f7fe fa1e 	bl	8000af6 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	075b      	lsls	r3, r3, #29
 80026be:	d103      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x20>
 80026c0:	4966      	ldr	r1, [pc, #408]	; (800285c <HAL_RCC_ClockConfig+0x1b4>)
 80026c2:	4865      	ldr	r0, [pc, #404]	; (8002858 <HAL_RCC_ClockConfig+0x1b0>)
 80026c4:	f7fe fa17 	bl	8000af6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80026c8:	2f01      	cmp	r7, #1
 80026ca:	d904      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x2e>
 80026cc:	21b7      	movs	r1, #183	; 0xb7
 80026ce:	4862      	ldr	r0, [pc, #392]	; (8002858 <HAL_RCC_ClockConfig+0x1b0>)
 80026d0:	0089      	lsls	r1, r1, #2
 80026d2:	f7fe fa10 	bl	8000af6 <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026d6:	2201      	movs	r2, #1
 80026d8:	4d61      	ldr	r5, [pc, #388]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	682b      	ldr	r3, [r5, #0]
 80026dc:	4013      	ands	r3, r2
 80026de:	429f      	cmp	r7, r3
 80026e0:	d81f      	bhi.n	8002722 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	079b      	lsls	r3, r3, #30
 80026e6:	d426      	bmi.n	8002736 <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	07db      	lsls	r3, r3, #31
 80026ec:	d445      	bmi.n	800277a <HAL_RCC_ClockConfig+0xd2>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80026ee:	2301      	movs	r3, #1
 80026f0:	682a      	ldr	r2, [r5, #0]
 80026f2:	401a      	ands	r2, r3
 80026f4:	4297      	cmp	r7, r2
 80026f6:	d200      	bcs.n	80026fa <HAL_RCC_ClockConfig+0x52>
 80026f8:	e08a      	b.n	8002810 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	4d59      	ldr	r5, [pc, #356]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	075b      	lsls	r3, r3, #29
 8002700:	d500      	bpl.n	8002704 <HAL_RCC_ClockConfig+0x5c>
 8002702:	e08d      	b.n	8002820 <HAL_RCC_ClockConfig+0x178>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002704:	f7ff ff9e 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002708:	686b      	ldr	r3, [r5, #4]
 800270a:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	0f1b      	lsrs	r3, r3, #28
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	40d8      	lsrs	r0, r3
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe fdaf 	bl	800127c <HAL_InitTick>
  return HAL_OK;
 800271e:	2000      	movs	r0, #0
 8002720:	e008      	b.n	8002734 <HAL_RCC_ClockConfig+0x8c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	4393      	bics	r3, r2
 8002726:	433b      	orrs	r3, r7
 8002728:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272a:	682b      	ldr	r3, [r5, #0]
 800272c:	4013      	ands	r3, r2
 800272e:	429f      	cmp	r7, r3
 8002730:	d0d7      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
}
 8002734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002736:	68a3      	ldr	r3, [r4, #8]
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	0019      	movs	r1, r3
 800273c:	4391      	bics	r1, r2
 800273e:	d014      	beq.n	800276a <HAL_RCC_ClockConfig+0xc2>
 8002740:	2220      	movs	r2, #32
 8002742:	0019      	movs	r1, r3
 8002744:	4391      	bics	r1, r2
 8002746:	2990      	cmp	r1, #144	; 0x90
 8002748:	d00f      	beq.n	800276a <HAL_RCC_ClockConfig+0xc2>
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	0019      	movs	r1, r3
 800274e:	4391      	bics	r1, r2
 8002750:	29a0      	cmp	r1, #160	; 0xa0
 8002752:	d00a      	beq.n	800276a <HAL_RCC_ClockConfig+0xc2>
 8002754:	2210      	movs	r2, #16
 8002756:	0019      	movs	r1, r3
 8002758:	4391      	bics	r1, r2
 800275a:	29c0      	cmp	r1, #192	; 0xc0
 800275c:	d005      	beq.n	800276a <HAL_RCC_ClockConfig+0xc2>
 800275e:	2bf0      	cmp	r3, #240	; 0xf0
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xc2>
 8002762:	4943      	ldr	r1, [pc, #268]	; (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	483c      	ldr	r0, [pc, #240]	; (8002858 <HAL_RCC_ClockConfig+0x1b0>)
 8002766:	f7fe f9c6 	bl	8000af6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276a:	21f0      	movs	r1, #240	; 0xf0
 800276c:	4a3d      	ldr	r2, [pc, #244]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	6853      	ldr	r3, [r2, #4]
 8002770:	438b      	bics	r3, r1
 8002772:	68a1      	ldr	r1, [r4, #8]
 8002774:	430b      	orrs	r3, r1
 8002776:	6053      	str	r3, [r2, #4]
 8002778:	e7b6      	b.n	80026e8 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d903      	bls.n	8002788 <HAL_RCC_ClockConfig+0xe0>
 8002780:	493c      	ldr	r1, [pc, #240]	; (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002782:	4835      	ldr	r0, [pc, #212]	; (8002858 <HAL_RCC_ClockConfig+0x1b0>)
 8002784:	f7fe f9b7 	bl	8000af6 <assert_failed>
 8002788:	4e36      	ldr	r6, [pc, #216]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	2a01      	cmp	r2, #1
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	039b      	lsls	r3, r3, #14
 8002794:	d5cd      	bpl.n	8002732 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	2103      	movs	r1, #3
 8002798:	6873      	ldr	r3, [r6, #4]
 800279a:	438b      	bics	r3, r1
 800279c:	4313      	orrs	r3, r2
 800279e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80027a0:	f7fe fd96 	bl	80012d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80027a6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x130>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ac:	220c      	movs	r2, #12
 80027ae:	6873      	ldr	r3, [r6, #4]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d09b      	beq.n	80026ee <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f7fe fd8b 	bl	80012d0 <HAL_GetTick>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	1ac0      	subs	r0, r0, r3
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 80027c0:	4298      	cmp	r0, r3
 80027c2:	d9f3      	bls.n	80027ac <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	e7b5      	b.n	8002734 <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	2a02      	cmp	r2, #2
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x12a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	d4e2      	bmi.n	8002796 <HAL_RCC_ClockConfig+0xee>
 80027d0:	e7af      	b.n	8002732 <HAL_RCC_ClockConfig+0x8a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	079b      	lsls	r3, r3, #30
 80027d4:	d4df      	bmi.n	8002796 <HAL_RCC_ClockConfig+0xee>
 80027d6:	e7ac      	b.n	8002732 <HAL_RCC_ClockConfig+0x8a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d013      	beq.n	8002804 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027dc:	220c      	movs	r2, #12
 80027de:	6873      	ldr	r3, [r6, #4]
 80027e0:	4213      	tst	r3, r2
 80027e2:	d100      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x13e>
 80027e4:	e783      	b.n	80026ee <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f7fe fd73 	bl	80012d0 <HAL_GetTick>
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	1ac0      	subs	r0, r0, r3
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 80027f0:	4298      	cmp	r0, r3
 80027f2:	d9f3      	bls.n	80027dc <HAL_RCC_ClockConfig+0x134>
 80027f4:	e7e6      	b.n	80027c4 <HAL_RCC_ClockConfig+0x11c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7fe fd6b 	bl	80012d0 <HAL_GetTick>
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	1ac0      	subs	r0, r0, r3
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002800:	4298      	cmp	r0, r3
 8002802:	d8df      	bhi.n	80027c4 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002804:	220c      	movs	r2, #12
 8002806:	6873      	ldr	r3, [r6, #4]
 8002808:	4013      	ands	r3, r2
 800280a:	2b08      	cmp	r3, #8
 800280c:	d1f3      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 800280e:	e76e      	b.n	80026ee <HAL_RCC_ClockConfig+0x46>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002810:	682a      	ldr	r2, [r5, #0]
 8002812:	439a      	bics	r2, r3
 8002814:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002816:	682a      	ldr	r2, [r5, #0]
 8002818:	421a      	tst	r2, r3
 800281a:	d000      	beq.n	800281e <HAL_RCC_ClockConfig+0x176>
 800281c:	e789      	b.n	8002732 <HAL_RCC_ClockConfig+0x8a>
 800281e:	e76c      	b.n	80026fa <HAL_RCC_ClockConfig+0x52>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002820:	68e3      	ldr	r3, [r4, #12]
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x1d4>)
 8002824:	4213      	tst	r3, r2
 8002826:	d00d      	beq.n	8002844 <HAL_RCC_ClockConfig+0x19c>
 8002828:	21a0      	movs	r1, #160	; 0xa0
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_RCC_ClockConfig+0x1d8>)
 800282c:	00c9      	lsls	r1, r1, #3
 800282e:	401a      	ands	r2, r3
 8002830:	428a      	cmp	r2, r1
 8002832:	d007      	beq.n	8002844 <HAL_RCC_ClockConfig+0x19c>
 8002834:	22c0      	movs	r2, #192	; 0xc0
 8002836:	00d2      	lsls	r2, r2, #3
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_RCC_ClockConfig+0x19c>
 800283c:	4911      	ldr	r1, [pc, #68]	; (8002884 <HAL_RCC_ClockConfig+0x1dc>)
 800283e:	4806      	ldr	r0, [pc, #24]	; (8002858 <HAL_RCC_ClockConfig+0x1b0>)
 8002840:	f7fe f959 	bl	8000af6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	686b      	ldr	r3, [r5, #4]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_RCC_ClockConfig+0x1e0>)
 8002848:	4013      	ands	r3, r2
 800284a:	68e2      	ldr	r2, [r4, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	606b      	str	r3, [r5, #4]
 8002850:	e758      	b.n	8002704 <HAL_RCC_ClockConfig+0x5c>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	000002da 	.word	0x000002da
 8002858:	08004e29 	.word	0x08004e29
 800285c:	000002db 	.word	0x000002db
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
 8002868:	08004c81 	.word	0x08004c81
 800286c:	200001e4 	.word	0x200001e4
 8002870:	000002f3 	.word	0x000002f3
 8002874:	000002fa 	.word	0x000002fa
 8002878:	00001388 	.word	0x00001388
 800287c:	fffffbff 	.word	0xfffffbff
 8002880:	fffffdff 	.word	0xfffffdff
 8002884:	00000363 	.word	0x00000363
 8002888:	fffff8ff 	.word	0xfffff8ff

0800288c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800288c:	4b01      	ldr	r3, [pc, #4]	; (8002894 <HAL_RCC_GetHCLKFreq+0x8>)
 800288e:	6818      	ldr	r0, [r3, #0]
}
 8002890:	4770      	bx	lr
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	200001e4 	.word	0x200001e4

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	055b      	lsls	r3, r3, #21
 80028a0:	0f5b      	lsrs	r3, r3, #29
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028a6:	6810      	ldr	r0, [r2, #0]
 80028a8:	40d8      	lsrs	r0, r3
}    
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004c91 	.word	0x08004c91
 80028b4:	200001e4 	.word	0x200001e4

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028bc:	6802      	ldr	r2, [r0, #0]
{
 80028be:	b085      	sub	sp, #20
 80028c0:	0005      	movs	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d903      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x16>
 80028c6:	217e      	movs	r1, #126	; 0x7e
 80028c8:	4849      	ldr	r0, [pc, #292]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80028ca:	f7fe f914 	bl	8000af6 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ce:	682b      	ldr	r3, [r5, #0]
 80028d0:	03db      	lsls	r3, r3, #15
 80028d2:	d530      	bpl.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80028d4:	686b      	ldr	r3, [r5, #4]
 80028d6:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d8:	4213      	tst	r3, r2
 80028da:	d003      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 80028dc:	2184      	movs	r1, #132	; 0x84
 80028de:	4844      	ldr	r0, [pc, #272]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80028e0:	f7fe f909 	bl	8000af6 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e8:	4c43      	ldr	r4, [pc, #268]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028ea:	0552      	lsls	r2, r2, #21
 80028ec:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4213      	tst	r3, r2
 80028f2:	d108      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	69e3      	ldr	r3, [r4, #28]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61e3      	str	r3, [r4, #28]
 80028fa:	69e3      	ldr	r3, [r4, #28]
 80028fc:	4013      	ands	r3, r2
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	2780      	movs	r7, #128	; 0x80
 8002908:	4e3c      	ldr	r6, [pc, #240]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800290a:	007f      	lsls	r7, r7, #1
 800290c:	6833      	ldr	r3, [r6, #0]
 800290e:	423b      	tst	r3, r7
 8002910:	d038      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002912:	22c0      	movs	r2, #192	; 0xc0
 8002914:	6a23      	ldr	r3, [r4, #32]
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291a:	d145      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291c:	6a23      	ldr	r3, [r4, #32]
 800291e:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002920:	4013      	ands	r3, r2
 8002922:	686a      	ldr	r2, [r5, #4]
 8002924:	4313      	orrs	r3, r2
 8002926:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002928:	9b00      	ldr	r3, [sp, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d103      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	69e3      	ldr	r3, [r4, #28]
 8002930:	4a33      	ldr	r2, [pc, #204]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002932:	4013      	ands	r3, r2
 8002934:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	07db      	lsls	r3, r3, #31
 800293a:	d50d      	bpl.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800293c:	68ab      	ldr	r3, [r5, #8]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d903      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8002942:	21cb      	movs	r1, #203	; 0xcb
 8002944:	482a      	ldr	r0, [pc, #168]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002946:	f7fe f8d6 	bl	8000af6 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800294a:	2103      	movs	r1, #3
 800294c:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800294e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002950:	438b      	bics	r3, r1
 8002952:	68a9      	ldr	r1, [r5, #8]
 8002954:	430b      	orrs	r3, r1
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002958:	682b      	ldr	r3, [r5, #0]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800295a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	d521      	bpl.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002960:	2310      	movs	r3, #16
 8002962:	68ea      	ldr	r2, [r5, #12]
 8002964:	439a      	bics	r2, r3
 8002966:	4282      	cmp	r2, r0
 8002968:	d003      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800296a:	21ef      	movs	r1, #239	; 0xef
 800296c:	4820      	ldr	r0, [pc, #128]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800296e:	f7fe f8c2 	bl	8000af6 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	2110      	movs	r1, #16
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002978:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800297a:	438b      	bics	r3, r1
 800297c:	68e9      	ldr	r1, [r5, #12]
 800297e:	430b      	orrs	r3, r1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	e00f      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002984:	6833      	ldr	r3, [r6, #0]
 8002986:	433b      	orrs	r3, r7
 8002988:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800298a:	f7fe fca1 	bl	80012d0 <HAL_GetTick>
 800298e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	6833      	ldr	r3, [r6, #0]
 8002992:	423b      	tst	r3, r7
 8002994:	d1bd      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe fc9b 	bl	80012d0 <HAL_GetTick>
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	1ac0      	subs	r0, r0, r3
 800299e:	2864      	cmp	r0, #100	; 0x64
 80029a0:	d9f6      	bls.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xd8>
          return HAL_TIMEOUT;
 80029a2:	2003      	movs	r0, #3
}
 80029a4:	b005      	add	sp, #20
 80029a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a8:	6869      	ldr	r1, [r5, #4]
 80029aa:	400a      	ands	r2, r1
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d0b5      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_BACKUPRESET_FORCE();
 80029b0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80029b4:	6a20      	ldr	r0, [r4, #32]
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	4303      	orrs	r3, r0
 80029ba:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029bc:	6a23      	ldr	r3, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c2:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c4:	4003      	ands	r3, r0
 80029c6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80029c8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ca:	07d3      	lsls	r3, r2, #31
 80029cc:	d5a6      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x64>
        tickstart = HAL_GetTick();
 80029ce:	f7fe fc7f 	bl	80012d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80029d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	6a23      	ldr	r3, [r4, #32]
 80029d8:	423b      	tst	r3, r7
 80029da:	d19f      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fc78 	bl	80012d0 <HAL_GetTick>
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80029e2:	1b80      	subs	r0, r0, r6
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d9f6      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80029e8:	e7db      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	00010021 	.word	0x00010021
 80029f0:	08004e61 	.word	0x08004e61
 80029f4:	fffffcff 	.word	0xfffffcff
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	efffffff 	.word	0xefffffff
 8002a04:	fffeffff 	.word	0xfffeffff
 8002a08:	00001388 	.word	0x00001388

08002a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	2201      	movs	r2, #1
 8002a10:	6a03      	ldr	r3, [r0, #32]
{
 8002a12:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a14:	4393      	bics	r3, r2
 8002a16:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a18:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1a:	6847      	ldr	r7, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1c:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a1e:	3272      	adds	r2, #114	; 0x72
 8002a20:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a22:	680a      	ldr	r2, [r1, #0]
{
 8002a24:	000e      	movs	r6, r1
  tmpccmrx |= OC_Config->OCMode;
 8002a26:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a2c:	688b      	ldr	r3, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002a2e:	9201      	str	r2, [sp, #4]
  tmpccer |= OC_Config->OCPolarity;
 8002a30:	431d      	orrs	r5, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <TIM_OC1_SetConfig+0xa0>)
 8002a34:	4298      	cmp	r0, r3
 8002a36:	d005      	beq.n	8002a44 <TIM_OC1_SetConfig+0x38>
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <TIM_OC1_SetConfig+0xa4>)
 8002a3a:	4298      	cmp	r0, r3
 8002a3c:	d002      	beq.n	8002a44 <TIM_OC1_SetConfig+0x38>
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <TIM_OC1_SetConfig+0xa8>)
 8002a40:	4298      	cmp	r0, r3
 8002a42:	d12c      	bne.n	8002a9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8002a44:	2308      	movs	r3, #8
 8002a46:	68f2      	ldr	r2, [r6, #12]
 8002a48:	439a      	bics	r2, r3
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC1_SetConfig+0x48>
 8002a4c:	491a      	ldr	r1, [pc, #104]	; (8002ab8 <TIM_OC1_SetConfig+0xac>)
 8002a4e:	481b      	ldr	r0, [pc, #108]	; (8002abc <TIM_OC1_SetConfig+0xb0>)
 8002a50:	f7fe f851 	bl	8000af6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a54:	2308      	movs	r3, #8
 8002a56:	439d      	bics	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a58:	68f3      	ldr	r3, [r6, #12]
 8002a5a:	431d      	orrs	r5, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	439d      	bics	r5, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <TIM_OC1_SetConfig+0xa0>)
 8002a62:	429c      	cmp	r4, r3
 8002a64:	d005      	beq.n	8002a72 <TIM_OC1_SetConfig+0x66>
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <TIM_OC1_SetConfig+0xa4>)
 8002a68:	429c      	cmp	r4, r3
 8002a6a:	d002      	beq.n	8002a72 <TIM_OC1_SetConfig+0x66>
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <TIM_OC1_SetConfig+0xa8>)
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	d115      	bne.n	8002a9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <TIM_OC1_SetConfig+0xb4>)
 8002a74:	69b2      	ldr	r2, [r6, #24]
 8002a76:	421a      	tst	r2, r3
 8002a78:	d003      	beq.n	8002a82 <TIM_OC1_SetConfig+0x76>
 8002a7a:	4912      	ldr	r1, [pc, #72]	; (8002ac4 <TIM_OC1_SetConfig+0xb8>)
 8002a7c:	480f      	ldr	r0, [pc, #60]	; (8002abc <TIM_OC1_SetConfig+0xb0>)
 8002a7e:	f7fe f83a 	bl	8000af6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <TIM_OC1_SetConfig+0xbc>)
 8002a84:	6972      	ldr	r2, [r6, #20]
 8002a86:	421a      	tst	r2, r3
 8002a88:	d003      	beq.n	8002a92 <TIM_OC1_SetConfig+0x86>
 8002a8a:	4910      	ldr	r1, [pc, #64]	; (8002acc <TIM_OC1_SetConfig+0xc0>)
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <TIM_OC1_SetConfig+0xb0>)
 8002a8e:	f7fe f832 	bl	8000af6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <TIM_OC1_SetConfig+0xc4>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a94:	69b2      	ldr	r2, [r6, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a96:	401f      	ands	r7, r3
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a98:	6973      	ldr	r3, [r6, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	431f      	orrs	r7, r3
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9e:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 8002aa0:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002aa2:	61a3      	str	r3, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aa4:	6873      	ldr	r3, [r6, #4]
 8002aa6:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa8:	6225      	str	r5, [r4, #32]
}
 8002aaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800
 8002ab8:	00001290 	.word	0x00001290
 8002abc:	08004e9c 	.word	0x08004e9c
 8002ac0:	fffffdff 	.word	0xfffffdff
 8002ac4:	0000129d 	.word	0x0000129d
 8002ac8:	fffffeff 	.word	0xfffffeff
 8002acc:	0000129e 	.word	0x0000129e
 8002ad0:	fffffcff 	.word	0xfffffcff

08002ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad6:	000f      	movs	r7, r1
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ad8:	2173      	movs	r1, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ada:	6a03      	ldr	r3, [r0, #32]
 8002adc:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <TIM_OC3_SetConfig+0xa0>)
{
 8002ade:	b085      	sub	sp, #20
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002ae4:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002ae6:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002ae8:	69c3      	ldr	r3, [r0, #28]
{
 8002aea:	0005      	movs	r5, r0
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aec:	438b      	bics	r3, r1
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aee:	6839      	ldr	r1, [r7, #0]
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	4319      	orrs	r1, r3
 8002af4:	9101      	str	r1, [sp, #4]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002af6:	68bb      	ldr	r3, [r7, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002af8:	491f      	ldr	r1, [pc, #124]	; (8002b78 <TIM_OC3_SetConfig+0xa4>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002afa:	021b      	lsls	r3, r3, #8
  tmpccer &= ~TIM_CCER_CC3P;
 8002afc:	400c      	ands	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002afe:	431c      	orrs	r4, r3

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <TIM_OC3_SetConfig+0xa8>)
 8002b02:	9103      	str	r1, [sp, #12]
 8002b04:	4298      	cmp	r0, r3
 8002b06:	d126      	bne.n	8002b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8002b08:	2308      	movs	r3, #8
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	439a      	bics	r2, r3
 8002b0e:	d003      	beq.n	8002b18 <TIM_OC3_SetConfig+0x44>
 8002b10:	491b      	ldr	r1, [pc, #108]	; (8002b80 <TIM_OC3_SetConfig+0xac>)
 8002b12:	481c      	ldr	r0, [pc, #112]	; (8002b84 <TIM_OC3_SetConfig+0xb0>)
 8002b14:	f7fd ffef 	bl	8000af6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <TIM_OC3_SetConfig+0xb4>)
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b1a:	68fa      	ldr	r2, [r7, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1c:	4023      	ands	r3, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b1e:	0214      	lsls	r4, r2, #8
 8002b20:	431c      	orrs	r4, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <TIM_OC3_SetConfig+0xb8>)
 8002b24:	401c      	ands	r4, r3
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	9a03      	ldr	r2, [sp, #12]
 8002b2a:	4213      	tst	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_OC3_SetConfig+0x62>
 8002b2e:	4918      	ldr	r1, [pc, #96]	; (8002b90 <TIM_OC3_SetConfig+0xbc>)
 8002b30:	4814      	ldr	r0, [pc, #80]	; (8002b84 <TIM_OC3_SetConfig+0xb0>)
 8002b32:	f7fd ffe0 	bl	8000af6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	9a02      	ldr	r2, [sp, #8]
 8002b3a:	4213      	tst	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_OC3_SetConfig+0x72>
 8002b3e:	4915      	ldr	r1, [pc, #84]	; (8002b94 <TIM_OC3_SetConfig+0xc0>)
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <TIM_OC3_SetConfig+0xb0>)
 8002b42:	f7fd ffd8 	bl	8000af6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <TIM_OC3_SetConfig+0xc4>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b48:	697a      	ldr	r2, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b4a:	4033      	ands	r3, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b4c:	69be      	ldr	r6, [r7, #24]
 8002b4e:	4316      	orrs	r6, r2
 8002b50:	0136      	lsls	r6, r6, #4
 8002b52:	431e      	orrs	r6, r3
 8002b54:	e005      	b.n	8002b62 <TIM_OC3_SetConfig+0x8e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <TIM_OC3_SetConfig+0xc8>)
 8002b58:	4298      	cmp	r0, r3
 8002b5a:	d0e4      	beq.n	8002b26 <TIM_OC3_SetConfig+0x52>
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <TIM_OC3_SetConfig+0xcc>)
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	d0e1      	beq.n	8002b26 <TIM_OC3_SetConfig+0x52>

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b62:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 8002b64:	606e      	str	r6, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b66:	61eb      	str	r3, [r5, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	63eb      	str	r3, [r5, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6c:	622c      	str	r4, [r5, #32]
}
 8002b6e:	b005      	add	sp, #20
 8002b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	fffffeff 	.word	0xfffffeff
 8002b78:	fffffdff 	.word	0xfffffdff
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	00001325 	.word	0x00001325
 8002b84:	08004e9c 	.word	0x08004e9c
 8002b88:	fffff7ff 	.word	0xfffff7ff
 8002b8c:	fffffbff 	.word	0xfffffbff
 8002b90:	00001332 	.word	0x00001332
 8002b94:	00001333 	.word	0x00001333
 8002b98:	ffffcfff 	.word	0xffffcfff
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba6:	6a03      	ldr	r3, [r0, #32]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <TIM_OC4_SetConfig+0x64>)
{
 8002baa:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bac:	4013      	ands	r3, r2
 8002bae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <TIM_OC4_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8002bb4:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002bb6:	69c7      	ldr	r7, [r0, #28]
{
 8002bb8:	000e      	movs	r6, r1
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bba:	4017      	ands	r7, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bbc:	680a      	ldr	r2, [r1, #0]
 8002bbe:	0212      	lsls	r2, r2, #8
 8002bc0:	4317      	orrs	r7, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc2:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <TIM_OC4_SetConfig+0x6c>)
 8002bc4:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bc6:	688a      	ldr	r2, [r1, #8]
 8002bc8:	0312      	lsls	r2, r2, #12
 8002bca:	431a      	orrs	r2, r3

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <TIM_OC4_SetConfig+0x70>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bce:	9201      	str	r2, [sp, #4]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd0:	4298      	cmp	r0, r3
 8002bd2:	d005      	beq.n	8002be0 <TIM_OC4_SetConfig+0x3c>
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <TIM_OC4_SetConfig+0x74>)
 8002bd6:	4298      	cmp	r0, r3
 8002bd8:	d002      	beq.n	8002be0 <TIM_OC4_SetConfig+0x3c>
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <TIM_OC4_SetConfig+0x78>)
 8002bdc:	4298      	cmp	r0, r3
 8002bde:	d10c      	bne.n	8002bfa <TIM_OC4_SetConfig+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <TIM_OC4_SetConfig+0x7c>)
 8002be2:	6972      	ldr	r2, [r6, #20]
 8002be4:	421a      	tst	r2, r3
 8002be6:	d003      	beq.n	8002bf0 <TIM_OC4_SetConfig+0x4c>
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <TIM_OC4_SetConfig+0x80>)
 8002bea:	480f      	ldr	r0, [pc, #60]	; (8002c28 <TIM_OC4_SetConfig+0x84>)
 8002bec:	f7fd ff83 	bl	8000af6 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <TIM_OC4_SetConfig+0x88>)
 8002bf2:	401d      	ands	r5, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf4:	6973      	ldr	r3, [r6, #20]
 8002bf6:	019b      	lsls	r3, r3, #6
 8002bf8:	431d      	orrs	r5, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bfa:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8002bfc:	6065      	str	r5, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002bfe:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002c00:	6423      	str	r3, [r4, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c02:	9b01      	ldr	r3, [sp, #4]
 8002c04:	6223      	str	r3, [r4, #32]
}
 8002c06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002c08:	ffffefff 	.word	0xffffefff
 8002c0c:	ffff8cff 	.word	0xffff8cff
 8002c10:	ffffdfff 	.word	0xffffdfff
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40014400 	.word	0x40014400
 8002c1c:	40014800 	.word	0x40014800
 8002c20:	fffffeff 	.word	0xfffffeff
 8002c24:	00001370 	.word	0x00001370
 8002c28:	08004e9c 	.word	0x08004e9c
 8002c2c:	ffffbfff 	.word	0xffffbfff

08002c30 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c30:	6803      	ldr	r3, [r0, #0]
 8002c32:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <HAL_TIM_Base_Start+0x48>)
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d010      	beq.n	8002c5e <HAL_TIM_Base_Start+0x2e>
 8002c3c:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <HAL_TIM_Base_Start+0x4c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00d      	beq.n	8002c5e <HAL_TIM_Base_Start+0x2e>
 8002c42:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <HAL_TIM_Base_Start+0x50>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00a      	beq.n	8002c5e <HAL_TIM_Base_Start+0x2e>
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_TIM_Base_Start+0x54>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_TIM_Base_Start+0x2e>
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_TIM_Base_Start+0x58>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_Base_Start+0x2e>
 8002c54:	2198      	movs	r1, #152	; 0x98
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <HAL_TIM_Base_Start+0x5c>)
 8002c58:	0049      	lsls	r1, r1, #1
 8002c5a:	f7fd ff4c 	bl	8000af6 <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 8002c5e:	0022      	movs	r2, r4
 8002c60:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8002c62:	2101      	movs	r1, #1
 8002c64:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002c66:	323d      	adds	r2, #61	; 0x3d
 8002c68:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 8002c6a:	6803      	ldr	r3, [r0, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6003      	str	r3, [r0, #0]
}
 8002c70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002c72:	7011      	strb	r1, [r2, #0]
}
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40002000 	.word	0x40002000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800
 8002c8c:	08004e9c 	.word	0x08004e9c

08002c90 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c90:	6803      	ldr	r3, [r0, #0]
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_TIM_Base_Start_IT+0x44>)
{
 8002c94:	b510      	push	{r4, lr}
 8002c96:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d010      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0x2e>
 8002c9c:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <HAL_TIM_Base_Start_IT+0x48>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00d      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0x2e>
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_TIM_Base_Start_IT+0x4c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00a      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0x2e>
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_TIM_Base_Start_IT+0x50>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0x2e>
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <HAL_TIM_Base_Start_IT+0x54>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0x2e>
 8002cb4:	21af      	movs	r1, #175	; 0xaf
 8002cb6:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <HAL_TIM_Base_Start_IT+0x58>)
 8002cb8:	0049      	lsls	r1, r1, #1
 8002cba:	f7fd ff1c 	bl	8000af6 <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	6823      	ldr	r3, [r4, #0]
}
 8002cc2:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc4:	68d9      	ldr	r1, [r3, #12]
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
}
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40002000 	.word	0x40002000
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800
 8002ce8:	08004e9c 	.word	0x08004e9c

08002cec <HAL_TIM_OC_MspInit>:
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_PWM_MspInit>:
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_PeriodElapsedCallback>:
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_OC_DelayElapsedCallback>:
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_IC_CaptureCallback>:
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_TriggerCallback>:
 8002cf8:	4770      	bx	lr

08002cfa <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	6803      	ldr	r3, [r0, #0]
{
 8002cfe:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d00:	6919      	ldr	r1, [r3, #16]
{
 8002d02:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d04:	4211      	tst	r1, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	4211      	tst	r1, r2
 8002d0c:	d00b      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d0e:	3a05      	subs	r2, #5
 8002d10:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d12:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d14:	3204      	adds	r2, #4
 8002d16:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d18:	079b      	lsls	r3, r3, #30
 8002d1a:	d100      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x24>
 8002d1c:	e079      	b.n	8002e12 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	f7ff ffe9 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	2300      	movs	r3, #0
 8002d24:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d26:	2204      	movs	r2, #4
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	6919      	ldr	r1, [r3, #16]
 8002d2c:	4211      	tst	r1, r2
 8002d2e:	d010      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d30:	68d9      	ldr	r1, [r3, #12]
 8002d32:	4211      	tst	r1, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d36:	3a09      	subs	r2, #9
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d3a:	3207      	adds	r2, #7
 8002d3c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	23c0      	movs	r3, #192	; 0xc0
 8002d42:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002d44:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d46:	421a      	tst	r2, r3
 8002d48:	d069      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	f7ff ffd3 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d52:	2208      	movs	r2, #8
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	6919      	ldr	r1, [r3, #16]
 8002d58:	4211      	tst	r1, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d5c:	68d9      	ldr	r1, [r3, #12]
 8002d5e:	4211      	tst	r1, r2
 8002d60:	d00b      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d62:	3a11      	subs	r2, #17
 8002d64:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d66:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d68:	320d      	adds	r2, #13
 8002d6a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6e:	079b      	lsls	r3, r3, #30
 8002d70:	d05b      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	f7ff ffbf 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	2300      	movs	r3, #0
 8002d78:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	6919      	ldr	r1, [r3, #16]
 8002d80:	4211      	tst	r1, r2
 8002d82:	d010      	beq.n	8002da6 <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	4211      	tst	r1, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d8a:	3a21      	subs	r2, #33	; 0x21
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	3219      	adds	r2, #25
 8002d90:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	23c0      	movs	r3, #192	; 0xc0
 8002d96:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002d98:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d9a:	421a      	tst	r2, r3
 8002d9c:	d04b      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	f7ff ffa9 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	2300      	movs	r3, #0
 8002da4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da6:	2201      	movs	r2, #1
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	4211      	tst	r1, r2
 8002dae:	d007      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002db0:	68d9      	ldr	r1, [r3, #12]
 8002db2:	4211      	tst	r1, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db6:	3a03      	subs	r2, #3
 8002db8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	0020      	movs	r0, r4
 8002dbc:	f7ff ff98 	bl	8002cf0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	6919      	ldr	r1, [r3, #16]
 8002dc6:	4211      	tst	r1, r2
 8002dc8:	d008      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	4211      	tst	r1, r2
 8002dce:	d005      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd0:	3a02      	subs	r2, #2
 8002dd2:	3aff      	subs	r2, #255	; 0xff
 8002dd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dd6:	0020      	movs	r0, r4
 8002dd8:	f000 fe87 	bl	8003aea <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ddc:	2240      	movs	r2, #64	; 0x40
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	6919      	ldr	r1, [r3, #16]
 8002de2:	4211      	tst	r1, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	4211      	tst	r1, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dec:	3a81      	subs	r2, #129	; 0x81
 8002dee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002df0:	0020      	movs	r0, r4
 8002df2:	f7ff ff81 	bl	8002cf8 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df6:	2220      	movs	r2, #32
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	4211      	tst	r1, r2
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	4211      	tst	r1, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e06:	3a41      	subs	r2, #65	; 0x41
 8002e08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002e0a:	0020      	movs	r0, r4
 8002e0c:	f000 fe6c 	bl	8003ae8 <HAL_TIMEx_CommutationCallback>
}
 8002e10:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	f7ff ff6e 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e16:	0020      	movs	r0, r4
 8002e18:	f7ff ff6d 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e1c:	e781      	b.n	8002d22 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	f7ff ff68 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e22:	0020      	movs	r0, r4
 8002e24:	f7ff ff67 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e28:	e791      	b.n	8002d4e <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	f7ff ff62 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2e:	0020      	movs	r0, r4
 8002e30:	f7ff ff61 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e34:	e79f      	b.n	8002d76 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	f7ff ff5c 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3a:	0020      	movs	r0, r4
 8002e3c:	f7ff ff5b 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e40:	e7af      	b.n	8002da2 <HAL_TIM_IRQHandler+0xa8>
	...

08002e44 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <TIM_Base_SetConfig+0x68>)
{
 8002e46:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002e48:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4a:	4290      	cmp	r0, r2
 8002e4c:	d002      	beq.n	8002e54 <TIM_Base_SetConfig+0x10>
 8002e4e:	4c18      	ldr	r4, [pc, #96]	; (8002eb0 <TIM_Base_SetConfig+0x6c>)
 8002e50:	42a0      	cmp	r0, r4
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	2470      	movs	r4, #112	; 0x70
 8002e56:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002e58:	684c      	ldr	r4, [r1, #4]
 8002e5a:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5c:	4290      	cmp	r0, r2
 8002e5e:	d00b      	beq.n	8002e78 <TIM_Base_SetConfig+0x34>
 8002e60:	4c13      	ldr	r4, [pc, #76]	; (8002eb0 <TIM_Base_SetConfig+0x6c>)
 8002e62:	42a0      	cmp	r0, r4
 8002e64:	d008      	beq.n	8002e78 <TIM_Base_SetConfig+0x34>
 8002e66:	4c13      	ldr	r4, [pc, #76]	; (8002eb4 <TIM_Base_SetConfig+0x70>)
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d005      	beq.n	8002e78 <TIM_Base_SetConfig+0x34>
 8002e6c:	4c12      	ldr	r4, [pc, #72]	; (8002eb8 <TIM_Base_SetConfig+0x74>)
 8002e6e:	42a0      	cmp	r0, r4
 8002e70:	d002      	beq.n	8002e78 <TIM_Base_SetConfig+0x34>
 8002e72:	4c12      	ldr	r4, [pc, #72]	; (8002ebc <TIM_Base_SetConfig+0x78>)
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d103      	bne.n	8002e80 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e78:	4c11      	ldr	r4, [pc, #68]	; (8002ec0 <TIM_Base_SetConfig+0x7c>)
 8002e7a:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7c:	68cc      	ldr	r4, [r1, #12]
 8002e7e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	2480      	movs	r4, #128	; 0x80
 8002e82:	43a3      	bics	r3, r4
 8002e84:	694c      	ldr	r4, [r1, #20]
 8002e86:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002e88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8a:	688b      	ldr	r3, [r1, #8]
 8002e8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002e8e:	680b      	ldr	r3, [r1, #0]
 8002e90:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e92:	4290      	cmp	r0, r2
 8002e94:	d005      	beq.n	8002ea2 <TIM_Base_SetConfig+0x5e>
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <TIM_Base_SetConfig+0x74>)
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d002      	beq.n	8002ea2 <TIM_Base_SetConfig+0x5e>
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <TIM_Base_SetConfig+0x78>)
 8002e9e:	4298      	cmp	r0, r3
 8002ea0:	d101      	bne.n	8002ea6 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea2:	690b      	ldr	r3, [r1, #16]
 8002ea4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	6143      	str	r3, [r0, #20]
}
 8002eaa:	bd10      	pop	{r4, pc}
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40002000 	.word	0x40002000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800
 8002ec0:	fffffcff 	.word	0xfffffcff

08002ec4 <HAL_TIM_Base_Init>:
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002ec8:	2001      	movs	r0, #1
  if(htim == NULL)
 8002eca:	2c00      	cmp	r4, #0
 8002ecc:	d04c      	beq.n	8002f68 <HAL_TIM_Base_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_TIM_Base_Init+0xa8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00f      	beq.n	8002ef6 <HAL_TIM_Base_Init+0x32>
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_TIM_Base_Init+0xac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00c      	beq.n	8002ef6 <HAL_TIM_Base_Init+0x32>
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_TIM_Base_Init+0xb0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIM_Base_Init+0x32>
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_TIM_Base_Init+0xb4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d006      	beq.n	8002ef6 <HAL_TIM_Base_Init+0x32>
 8002ee8:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <HAL_TIM_Base_Init+0xb8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_Base_Init+0x32>
 8002eee:	21d4      	movs	r1, #212	; 0xd4
 8002ef0:	4823      	ldr	r0, [pc, #140]	; (8002f80 <HAL_TIM_Base_Init+0xbc>)
 8002ef2:	f7fd fe00 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002ef6:	68a3      	ldr	r3, [r4, #8]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	0019      	movs	r1, r3
 8002efc:	4391      	bics	r1, r2
 8002efe:	d00a      	beq.n	8002f16 <HAL_TIM_Base_Init+0x52>
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	0019      	movs	r1, r3
 8002f04:	4391      	bics	r1, r2
 8002f06:	2920      	cmp	r1, #32
 8002f08:	d005      	beq.n	8002f16 <HAL_TIM_Base_Init+0x52>
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_Base_Init+0x52>
 8002f0e:	21d5      	movs	r1, #213	; 0xd5
 8002f10:	481b      	ldr	r0, [pc, #108]	; (8002f80 <HAL_TIM_Base_Init+0xbc>)
 8002f12:	f7fd fdf0 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002f16:	6923      	ldr	r3, [r4, #16]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_TIM_Base_Init+0xc0>)
 8002f1a:	4213      	tst	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_TIM_Base_Init+0x6a>
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_Base_Init+0x6a>
 8002f26:	21d6      	movs	r1, #214	; 0xd6
 8002f28:	4815      	ldr	r0, [pc, #84]	; (8002f80 <HAL_TIM_Base_Init+0xbc>)
 8002f2a:	f7fd fde4 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	69a2      	ldr	r2, [r4, #24]
 8002f32:	439a      	bics	r2, r3
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_Base_Init+0x7a>
 8002f36:	21d7      	movs	r1, #215	; 0xd7
 8002f38:	4811      	ldr	r0, [pc, #68]	; (8002f80 <HAL_TIM_Base_Init+0xbc>)
 8002f3a:	f7fd fddc 	bl	8000af6 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	0025      	movs	r5, r4
 8002f40:	353d      	adds	r5, #61	; 0x3d
 8002f42:	782b      	ldrb	r3, [r5, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	0022      	movs	r2, r4
 8002f4c:	323c      	adds	r2, #60	; 0x3c
 8002f4e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002f50:	0020      	movs	r0, r4
 8002f52:	f7fd ff6b 	bl	8000e2c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f56:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f58:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002f5a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	1d21      	adds	r1, r4, #4
 8002f5e:	f7ff ff71 	bl	8002e44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f62:	2301      	movs	r3, #1
  return HAL_OK;
 8002f64:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f66:	702b      	strb	r3, [r5, #0]
}
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40002000 	.word	0x40002000
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40014800 	.word	0x40014800
 8002f80:	08004e9c 	.word	0x08004e9c
 8002f84:	fffffeff 	.word	0xfffffeff

08002f88 <HAL_TIM_OC_Init>:
{
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
  if(htim == NULL)
 8002f8e:	2c00      	cmp	r4, #0
 8002f90:	d050      	beq.n	8003034 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	4a28      	ldr	r2, [pc, #160]	; (8003038 <HAL_TIM_OC_Init+0xb0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d010      	beq.n	8002fbc <HAL_TIM_OC_Init+0x34>
 8002f9a:	4a28      	ldr	r2, [pc, #160]	; (800303c <HAL_TIM_OC_Init+0xb4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00d      	beq.n	8002fbc <HAL_TIM_OC_Init+0x34>
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_TIM_OC_Init+0xb8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00a      	beq.n	8002fbc <HAL_TIM_OC_Init+0x34>
 8002fa6:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_TIM_OC_Init+0xbc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_OC_Init+0x34>
 8002fac:	4a26      	ldr	r2, [pc, #152]	; (8003048 <HAL_TIM_OC_Init+0xc0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_OC_Init+0x34>
 8002fb2:	21f5      	movs	r1, #245	; 0xf5
 8002fb4:	4825      	ldr	r0, [pc, #148]	; (800304c <HAL_TIM_OC_Init+0xc4>)
 8002fb6:	0049      	lsls	r1, r1, #1
 8002fb8:	f7fd fd9d 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002fbc:	68a3      	ldr	r3, [r4, #8]
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	4391      	bics	r1, r2
 8002fc4:	d00b      	beq.n	8002fde <HAL_TIM_OC_Init+0x56>
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	0019      	movs	r1, r3
 8002fca:	4391      	bics	r1, r2
 8002fcc:	2920      	cmp	r1, #32
 8002fce:	d006      	beq.n	8002fde <HAL_TIM_OC_Init+0x56>
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_OC_Init+0x56>
 8002fd4:	21ec      	movs	r1, #236	; 0xec
 8002fd6:	481d      	ldr	r0, [pc, #116]	; (800304c <HAL_TIM_OC_Init+0xc4>)
 8002fd8:	31ff      	adds	r1, #255	; 0xff
 8002fda:	f7fd fd8c 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_TIM_OC_Init+0xc8>)
 8002fe2:	4213      	tst	r3, r2
 8002fe4:	d008      	beq.n	8002ff8 <HAL_TIM_OC_Init+0x70>
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0092      	lsls	r2, r2, #2
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_OC_Init+0x70>
 8002fee:	21f6      	movs	r1, #246	; 0xf6
 8002ff0:	4816      	ldr	r0, [pc, #88]	; (800304c <HAL_TIM_OC_Init+0xc4>)
 8002ff2:	0049      	lsls	r1, r1, #1
 8002ff4:	f7fd fd7f 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	69a2      	ldr	r2, [r4, #24]
 8002ffc:	439a      	bics	r2, r3
 8002ffe:	d004      	beq.n	800300a <HAL_TIM_OC_Init+0x82>
 8003000:	21ee      	movs	r1, #238	; 0xee
 8003002:	4812      	ldr	r0, [pc, #72]	; (800304c <HAL_TIM_OC_Init+0xc4>)
 8003004:	31ff      	adds	r1, #255	; 0xff
 8003006:	f7fd fd76 	bl	8000af6 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800300a:	0025      	movs	r5, r4
 800300c:	353d      	adds	r5, #61	; 0x3d
 800300e:	782b      	ldrb	r3, [r5, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_TIM_OC_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8003016:	0022      	movs	r2, r4
 8003018:	323c      	adds	r2, #60	; 0x3c
 800301a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 800301c:	0020      	movs	r0, r4
 800301e:	f7ff fe65 	bl	8002cec <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003022:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003024:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003026:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003028:	1d21      	adds	r1, r4, #4
 800302a:	f7ff ff0b 	bl	8002e44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800302e:	2301      	movs	r3, #1
  return HAL_OK;
 8003030:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003032:	702b      	strb	r3, [r5, #0]
}
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40002000 	.word	0x40002000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800
 800304c:	08004e9c 	.word	0x08004e9c
 8003050:	fffffeff 	.word	0xfffffeff

08003054 <HAL_TIM_PWM_Init>:
{
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
  if(htim == NULL)
 800305a:	2c00      	cmp	r4, #0
 800305c:	d04d      	beq.n	80030fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_TIM_PWM_Init+0xa8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <HAL_TIM_PWM_Init+0x32>
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_TIM_PWM_Init+0xac>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00c      	beq.n	8003086 <HAL_TIM_PWM_Init+0x32>
 800306c:	4a25      	ldr	r2, [pc, #148]	; (8003104 <HAL_TIM_PWM_Init+0xb0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_TIM_PWM_Init+0x32>
 8003072:	4a25      	ldr	r2, [pc, #148]	; (8003108 <HAL_TIM_PWM_Init+0xb4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d006      	beq.n	8003086 <HAL_TIM_PWM_Init+0x32>
 8003078:	4a24      	ldr	r2, [pc, #144]	; (800310c <HAL_TIM_PWM_Init+0xb8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <HAL_TIM_PWM_Init+0x32>
 800307e:	4924      	ldr	r1, [pc, #144]	; (8003110 <HAL_TIM_PWM_Init+0xbc>)
 8003080:	4824      	ldr	r0, [pc, #144]	; (8003114 <HAL_TIM_PWM_Init+0xc0>)
 8003082:	f7fd fd38 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003086:	68a3      	ldr	r3, [r4, #8]
 8003088:	2210      	movs	r2, #16
 800308a:	0019      	movs	r1, r3
 800308c:	4391      	bics	r1, r2
 800308e:	d00a      	beq.n	80030a6 <HAL_TIM_PWM_Init+0x52>
 8003090:	2240      	movs	r2, #64	; 0x40
 8003092:	0019      	movs	r1, r3
 8003094:	4391      	bics	r1, r2
 8003096:	2920      	cmp	r1, #32
 8003098:	d005      	beq.n	80030a6 <HAL_TIM_PWM_Init+0x52>
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_PWM_Init+0x52>
 800309e:	491e      	ldr	r1, [pc, #120]	; (8003118 <HAL_TIM_PWM_Init+0xc4>)
 80030a0:	481c      	ldr	r0, [pc, #112]	; (8003114 <HAL_TIM_PWM_Init+0xc0>)
 80030a2:	f7fd fd28 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80030a6:	6923      	ldr	r3, [r4, #16]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	; (800311c <HAL_TIM_PWM_Init+0xc8>)
 80030aa:	4213      	tst	r3, r2
 80030ac:	d007      	beq.n	80030be <HAL_TIM_PWM_Init+0x6a>
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <HAL_TIM_PWM_Init+0x6a>
 80030b6:	491a      	ldr	r1, [pc, #104]	; (8003120 <HAL_TIM_PWM_Init+0xcc>)
 80030b8:	4816      	ldr	r0, [pc, #88]	; (8003114 <HAL_TIM_PWM_Init+0xc0>)
 80030ba:	f7fd fd1c 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	69a2      	ldr	r2, [r4, #24]
 80030c2:	439a      	bics	r2, r3
 80030c4:	d004      	beq.n	80030d0 <HAL_TIM_PWM_Init+0x7c>
 80030c6:	21fa      	movs	r1, #250	; 0xfa
 80030c8:	4812      	ldr	r0, [pc, #72]	; (8003114 <HAL_TIM_PWM_Init+0xc0>)
 80030ca:	0089      	lsls	r1, r1, #2
 80030cc:	f7fd fd13 	bl	8000af6 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80030d0:	0025      	movs	r5, r4
 80030d2:	353d      	adds	r5, #61	; 0x3d
 80030d4:	782b      	ldrb	r3, [r5, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 80030dc:	0022      	movs	r2, r4
 80030de:	323c      	adds	r2, #60	; 0x3c
 80030e0:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80030e2:	0020      	movs	r0, r4
 80030e4:	f7ff fe03 	bl	8002cee <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80030e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ea:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80030ec:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ee:	1d21      	adds	r1, r4, #4
 80030f0:	f7ff fea8 	bl	8002e44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80030f4:	2301      	movs	r3, #1
  return HAL_OK;
 80030f6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80030f8:	702b      	strb	r3, [r5, #0]
}
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400
 8003104:	40002000 	.word	0x40002000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	000003e5 	.word	0x000003e5
 8003114:	08004e9c 	.word	0x08004e9c
 8003118:	000003e6 	.word	0x000003e6
 800311c:	fffffeff 	.word	0xfffffeff
 8003120:	000003e7 	.word	0x000003e7

08003124 <TIM_OC2_SetConfig>:
{
 8003124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003126:	2210      	movs	r2, #16
 8003128:	6a03      	ldr	r3, [r0, #32]
{
 800312a:	0004      	movs	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312c:	4393      	bics	r3, r2
 800312e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003130:	6a06      	ldr	r6, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <TIM_OC2_SetConfig+0x9c>)
  tmpcr2 =  TIMx->CR2;
 8003134:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003136:	6983      	ldr	r3, [r0, #24]
{
 8003138:	000f      	movs	r7, r1
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800313a:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313c:	680a      	ldr	r2, [r1, #0]
 800313e:	0212      	lsls	r2, r2, #8
 8003140:	431a      	orrs	r2, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8003142:	2320      	movs	r3, #32
 8003144:	439e      	bics	r6, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003146:	688b      	ldr	r3, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	9201      	str	r2, [sp, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	431e      	orrs	r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <TIM_OC2_SetConfig+0xa0>)
 8003150:	4298      	cmp	r0, r3
 8003152:	d127      	bne.n	80031a4 <TIM_OC2_SetConfig+0x80>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003154:	2308      	movs	r3, #8
 8003156:	68ca      	ldr	r2, [r1, #12]
 8003158:	439a      	bics	r2, r3
 800315a:	d003      	beq.n	8003164 <TIM_OC2_SetConfig+0x40>
 800315c:	491a      	ldr	r1, [pc, #104]	; (80031c8 <TIM_OC2_SetConfig+0xa4>)
 800315e:	481b      	ldr	r0, [pc, #108]	; (80031cc <TIM_OC2_SetConfig+0xa8>)
 8003160:	f7fd fcc9 	bl	8000af6 <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	439e      	bics	r6, r3
 8003168:	0033      	movs	r3, r6
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	0116      	lsls	r6, r2, #4
 800316e:	431e      	orrs	r6, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 8003170:	2340      	movs	r3, #64	; 0x40
 8003172:	439e      	bics	r6, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <TIM_OC2_SetConfig+0xac>)
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	421a      	tst	r2, r3
 800317a:	d003      	beq.n	8003184 <TIM_OC2_SetConfig+0x60>
 800317c:	4915      	ldr	r1, [pc, #84]	; (80031d4 <TIM_OC2_SetConfig+0xb0>)
 800317e:	4813      	ldr	r0, [pc, #76]	; (80031cc <TIM_OC2_SetConfig+0xa8>)
 8003180:	f7fd fcb9 	bl	8000af6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <TIM_OC2_SetConfig+0xb4>)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	421a      	tst	r2, r3
 800318a:	d003      	beq.n	8003194 <TIM_OC2_SetConfig+0x70>
 800318c:	4913      	ldr	r1, [pc, #76]	; (80031dc <TIM_OC2_SetConfig+0xb8>)
 800318e:	480f      	ldr	r0, [pc, #60]	; (80031cc <TIM_OC2_SetConfig+0xa8>)
 8003190:	f7fd fcb1 	bl	8000af6 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <TIM_OC2_SetConfig+0xbc>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003196:	697a      	ldr	r2, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003198:	402b      	ands	r3, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800319a:	69bd      	ldr	r5, [r7, #24]
 800319c:	4315      	orrs	r5, r2
 800319e:	00ad      	lsls	r5, r5, #2
 80031a0:	431d      	orrs	r5, r3
 80031a2:	e005      	b.n	80031b0 <TIM_OC2_SetConfig+0x8c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <TIM_OC2_SetConfig+0xc0>)
 80031a6:	4298      	cmp	r0, r3
 80031a8:	d0e4      	beq.n	8003174 <TIM_OC2_SetConfig+0x50>
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <TIM_OC2_SetConfig+0xc4>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d0e1      	beq.n	8003174 <TIM_OC2_SetConfig+0x50>
  TIMx->CCMR1 = tmpccmrx;
 80031b0:	9b01      	ldr	r3, [sp, #4]
  TIMx->CR2 = tmpcr2;
 80031b2:	6065      	str	r5, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80031b4:	61a3      	str	r3, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80031ba:	6226      	str	r6, [r4, #32]
}
 80031bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	ffff8cff 	.word	0xffff8cff
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	000012da 	.word	0x000012da
 80031cc:	08004e9c 	.word	0x08004e9c
 80031d0:	fffffdff 	.word	0xfffffdff
 80031d4:	000012e8 	.word	0x000012e8
 80031d8:	fffffeff 	.word	0xfffffeff
 80031dc:	000012e9 	.word	0x000012e9
 80031e0:	fffff3ff 	.word	0xfffff3ff
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800

080031ec <HAL_TIM_OC_ConfigChannel>:
{
 80031ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ee:	0004      	movs	r4, r0
 80031f0:	000d      	movs	r5, r1
 80031f2:	0016      	movs	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 80031f4:	2a18      	cmp	r2, #24
 80031f6:	d803      	bhi.n	8003200 <HAL_TIM_OC_ConfigChannel+0x14>
 80031f8:	4b42      	ldr	r3, [pc, #264]	; (8003304 <HAL_TIM_OC_ConfigChannel+0x118>)
 80031fa:	40d3      	lsrs	r3, r2
 80031fc:	07db      	lsls	r3, r3, #31
 80031fe:	d403      	bmi.n	8003208 <HAL_TIM_OC_ConfigChannel+0x1c>
 8003200:	4941      	ldr	r1, [pc, #260]	; (8003308 <HAL_TIM_OC_ConfigChannel+0x11c>)
 8003202:	4842      	ldr	r0, [pc, #264]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 8003204:	f7fd fc77 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	2210      	movs	r2, #16
 800320c:	0019      	movs	r1, r3
 800320e:	4391      	bics	r1, r2
 8003210:	000a      	movs	r2, r1
 8003212:	2130      	movs	r1, #48	; 0x30
 8003214:	438b      	bics	r3, r1
 8003216:	d005      	beq.n	8003224 <HAL_TIM_OC_ConfigChannel+0x38>
 8003218:	2a40      	cmp	r2, #64	; 0x40
 800321a:	d003      	beq.n	8003224 <HAL_TIM_OC_ConfigChannel+0x38>
 800321c:	493c      	ldr	r1, [pc, #240]	; (8003310 <HAL_TIM_OC_ConfigChannel+0x124>)
 800321e:	483b      	ldr	r0, [pc, #236]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 8003220:	f7fd fc69 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003224:	2302      	movs	r3, #2
 8003226:	68aa      	ldr	r2, [r5, #8]
 8003228:	439a      	bics	r2, r3
 800322a:	d003      	beq.n	8003234 <HAL_TIM_OC_ConfigChannel+0x48>
 800322c:	4939      	ldr	r1, [pc, #228]	; (8003314 <HAL_TIM_OC_ConfigChannel+0x128>)
 800322e:	4837      	ldr	r0, [pc, #220]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 8003230:	f7fd fc61 	bl	8000af6 <assert_failed>
  __HAL_LOCK(htim);
 8003234:	0027      	movs	r7, r4
 8003236:	2302      	movs	r3, #2
 8003238:	373c      	adds	r7, #60	; 0x3c
 800323a:	783a      	ldrb	r2, [r7, #0]
 800323c:	0018      	movs	r0, r3
 800323e:	2a01      	cmp	r2, #1
 8003240:	d02e      	beq.n	80032a0 <HAL_TIM_OC_ConfigChannel+0xb4>
 8003242:	2201      	movs	r2, #1
 8003244:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003246:	0022      	movs	r2, r4
 8003248:	323d      	adds	r2, #61	; 0x3d
 800324a:	9201      	str	r2, [sp, #4]
 800324c:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 800324e:	2e0c      	cmp	r6, #12
 8003250:	d821      	bhi.n	8003296 <HAL_TIM_OC_ConfigChannel+0xaa>
 8003252:	0030      	movs	r0, r6
 8003254:	f7fc ff58 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003258:	1f1f1f07 	.word	0x1f1f1f07
 800325c:	1f1f1f25 	.word	0x1f1f1f25
 8003260:	1f1f1f35 	.word	0x1f1f1f35
 8003264:	45          	.byte	0x45
 8003265:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <HAL_TIM_OC_ConfigChannel+0x12c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <HAL_TIM_OC_ConfigChannel+0xa2>
 800326e:	4a2b      	ldr	r2, [pc, #172]	; (800331c <HAL_TIM_OC_ConfigChannel+0x130>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00c      	beq.n	800328e <HAL_TIM_OC_ConfigChannel+0xa2>
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_TIM_OC_ConfigChannel+0x134>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_TIM_OC_ConfigChannel+0xa2>
 800327a:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <HAL_TIM_OC_ConfigChannel+0x138>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d006      	beq.n	800328e <HAL_TIM_OC_ConfigChannel+0xa2>
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_TIM_OC_ConfigChannel+0x13c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <HAL_TIM_OC_ConfigChannel+0xa2>
 8003286:	4929      	ldr	r1, [pc, #164]	; (800332c <HAL_TIM_OC_ConfigChannel+0x140>)
 8003288:	4820      	ldr	r0, [pc, #128]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 800328a:	f7fd fc34 	bl	8000af6 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800328e:	0029      	movs	r1, r5
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	f7ff fbbb 	bl	8002a0c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003296:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003298:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800329a:	9a01      	ldr	r2, [sp, #4]
 800329c:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 800329e:	7038      	strb	r0, [r7, #0]
}
 80032a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d006      	beq.n	80032b8 <HAL_TIM_OC_ConfigChannel+0xcc>
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_TIM_OC_ConfigChannel+0x130>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_OC_ConfigChannel+0xcc>
 80032b0:	491f      	ldr	r1, [pc, #124]	; (8003330 <HAL_TIM_OC_ConfigChannel+0x144>)
 80032b2:	4816      	ldr	r0, [pc, #88]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 80032b4:	f7fd fc1f 	bl	8000af6 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b8:	0029      	movs	r1, r5
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	f7ff ff32 	bl	8003124 <TIM_OC2_SetConfig>
    break;
 80032c0:	e7e9      	b.n	8003296 <HAL_TIM_OC_ConfigChannel+0xaa>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d006      	beq.n	80032d8 <HAL_TIM_OC_ConfigChannel+0xec>
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <HAL_TIM_OC_ConfigChannel+0x130>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <HAL_TIM_OC_ConfigChannel+0xec>
 80032d0:	4918      	ldr	r1, [pc, #96]	; (8003334 <HAL_TIM_OC_ConfigChannel+0x148>)
 80032d2:	480e      	ldr	r0, [pc, #56]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 80032d4:	f7fd fc0f 	bl	8000af6 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d8:	0029      	movs	r1, r5
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f7ff fbfa 	bl	8002ad4 <TIM_OC3_SetConfig>
    break;
 80032e0:	e7d9      	b.n	8003296 <HAL_TIM_OC_ConfigChannel+0xaa>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_TIM_OC_ConfigChannel+0x12c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d006      	beq.n	80032f8 <HAL_TIM_OC_ConfigChannel+0x10c>
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <HAL_TIM_OC_ConfigChannel+0x130>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <HAL_TIM_OC_ConfigChannel+0x10c>
 80032f0:	4911      	ldr	r1, [pc, #68]	; (8003338 <HAL_TIM_OC_ConfigChannel+0x14c>)
 80032f2:	4806      	ldr	r0, [pc, #24]	; (800330c <HAL_TIM_OC_ConfigChannel+0x120>)
 80032f4:	f7fd fbff 	bl	8000af6 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032f8:	0029      	movs	r1, r5
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	f7ff fc52 	bl	8002ba4 <TIM_OC4_SetConfig>
    break;
 8003300:	e7c9      	b.n	8003296 <HAL_TIM_OC_ConfigChannel+0xaa>
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	01001111 	.word	0x01001111
 8003308:	00000b77 	.word	0x00000b77
 800330c:	08004e9c 	.word	0x08004e9c
 8003310:	00000b78 	.word	0x00000b78
 8003314:	00000b79 	.word	0x00000b79
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40002000 	.word	0x40002000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800
 800332c:	00000b84 	.word	0x00000b84
 8003330:	00000b8c 	.word	0x00000b8c
 8003334:	00000b94 	.word	0x00000b94
 8003338:	00000b9c 	.word	0x00000b9c

0800333c <HAL_TIM_PWM_ConfigChannel>:
{
 800333c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800333e:	0007      	movs	r7, r0
 8003340:	373c      	adds	r7, #60	; 0x3c
 8003342:	783b      	ldrb	r3, [r7, #0]
{
 8003344:	0004      	movs	r4, r0
 8003346:	000d      	movs	r5, r1
 8003348:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800334a:	2002      	movs	r0, #2
 800334c:	2b01      	cmp	r3, #1
 800334e:	d061      	beq.n	8003414 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003350:	2301      	movs	r3, #1
 8003352:	703b      	strb	r3, [r7, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
 8003354:	2a18      	cmp	r2, #24
 8003356:	d803      	bhi.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x24>
 8003358:	4a5a      	ldr	r2, [pc, #360]	; (80034c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800335a:	40f2      	lsrs	r2, r6
 800335c:	4393      	bics	r3, r2
 800335e:	d003      	beq.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8003360:	4959      	ldr	r1, [pc, #356]	; (80034c8 <HAL_TIM_PWM_ConfigChannel+0x18c>)
 8003362:	485a      	ldr	r0, [pc, #360]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 8003364:	f7fd fbc7 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003368:	2310      	movs	r3, #16
 800336a:	682a      	ldr	r2, [r5, #0]
 800336c:	439a      	bics	r2, r3
 800336e:	2a60      	cmp	r2, #96	; 0x60
 8003370:	d003      	beq.n	800337a <HAL_TIM_PWM_ConfigChannel+0x3e>
 8003372:	4957      	ldr	r1, [pc, #348]	; (80034d0 <HAL_TIM_PWM_ConfigChannel+0x194>)
 8003374:	4855      	ldr	r0, [pc, #340]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 8003376:	f7fd fbbe 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800337a:	2302      	movs	r3, #2
 800337c:	68aa      	ldr	r2, [r5, #8]
 800337e:	439a      	bics	r2, r3
 8003380:	d004      	beq.n	800338c <HAL_TIM_PWM_ConfigChannel+0x50>
 8003382:	21c2      	movs	r1, #194	; 0xc2
 8003384:	4851      	ldr	r0, [pc, #324]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 8003386:	0109      	lsls	r1, r1, #4
 8003388:	f7fd fbb5 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800338c:	2304      	movs	r3, #4
 800338e:	692a      	ldr	r2, [r5, #16]
 8003390:	439a      	bics	r2, r3
 8003392:	d003      	beq.n	800339c <HAL_TIM_PWM_ConfigChannel+0x60>
 8003394:	494f      	ldr	r1, [pc, #316]	; (80034d4 <HAL_TIM_PWM_ConfigChannel+0x198>)
 8003396:	484d      	ldr	r0, [pc, #308]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 8003398:	f7fd fbad 	bl	8000af6 <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	0023      	movs	r3, r4
 800339e:	333d      	adds	r3, #61	; 0x3d
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2302      	movs	r3, #2
 80033a4:	9a01      	ldr	r2, [sp, #4]
 80033a6:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 80033a8:	2e0c      	cmp	r6, #12
 80033aa:	d82e      	bhi.n	800340a <HAL_TIM_PWM_ConfigChannel+0xce>
 80033ac:	0030      	movs	r0, r6
 80033ae:	f7fc feab 	bl	8000108 <__gnu_thumb1_case_uqi>
 80033b2:	2c07      	.short	0x2c07
 80033b4:	2c322c2c 	.word	0x2c322c2c
 80033b8:	2c4f2c2c 	.word	0x2c4f2c2c
 80033bc:	2c2c      	.short	0x2c2c
 80033be:	6c          	.byte	0x6c
 80033bf:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00f      	beq.n	80033e8 <HAL_TIM_PWM_ConfigChannel+0xac>
 80033c8:	4a44      	ldr	r2, [pc, #272]	; (80034dc <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00c      	beq.n	80033e8 <HAL_TIM_PWM_ConfigChannel+0xac>
 80033ce:	4a44      	ldr	r2, [pc, #272]	; (80034e0 <HAL_TIM_PWM_ConfigChannel+0x1a4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_TIM_PWM_ConfigChannel+0xac>
 80033d4:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <HAL_TIM_PWM_ConfigChannel+0x1a8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d006      	beq.n	80033e8 <HAL_TIM_PWM_ConfigChannel+0xac>
 80033da:	4a43      	ldr	r2, [pc, #268]	; (80034e8 <HAL_TIM_PWM_ConfigChannel+0x1ac>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <HAL_TIM_PWM_ConfigChannel+0xac>
 80033e0:	4942      	ldr	r1, [pc, #264]	; (80034ec <HAL_TIM_PWM_ConfigChannel+0x1b0>)
 80033e2:	483a      	ldr	r0, [pc, #232]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 80033e4:	f7fd fb87 	bl	8000af6 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033e8:	0029      	movs	r1, r5
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	f7ff fb0e 	bl	8002a0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f0:	2208      	movs	r2, #8
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	6999      	ldr	r1, [r3, #24]
 80033f6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f8:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	438a      	bics	r2, r1
 8003400:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800340a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800340c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800340e:	9a01      	ldr	r2, [sp, #4]
 8003410:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 8003412:	7038      	strb	r0, [r7, #0]
}
 8003414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d006      	beq.n	800342c <HAL_TIM_PWM_ConfigChannel+0xf0>
 800341e:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <HAL_TIM_PWM_ConfigChannel+0xf0>
 8003424:	4932      	ldr	r1, [pc, #200]	; (80034f0 <HAL_TIM_PWM_ConfigChannel+0x1b4>)
 8003426:	4829      	ldr	r0, [pc, #164]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 8003428:	f7fd fb65 	bl	8000af6 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800342c:	0029      	movs	r1, r5
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	f7ff fe78 	bl	8003124 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	6999      	ldr	r1, [r3, #24]
 800343c:	430a      	orrs	r2, r1
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	492c      	ldr	r1, [pc, #176]	; (80034f4 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
 8003444:	400a      	ands	r2, r1
 8003446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003448:	692a      	ldr	r2, [r5, #16]
 800344a:	6999      	ldr	r1, [r3, #24]
 800344c:	0212      	lsls	r2, r2, #8
 800344e:	e7da      	b.n	8003406 <HAL_TIM_PWM_ConfigChannel+0xca>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	4a21      	ldr	r2, [pc, #132]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d006      	beq.n	8003466 <HAL_TIM_PWM_ConfigChannel+0x12a>
 8003458:	4a20      	ldr	r2, [pc, #128]	; (80034dc <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <HAL_TIM_PWM_ConfigChannel+0x12a>
 800345e:	4926      	ldr	r1, [pc, #152]	; (80034f8 <HAL_TIM_PWM_ConfigChannel+0x1bc>)
 8003460:	481a      	ldr	r0, [pc, #104]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 8003462:	f7fd fb48 	bl	8000af6 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003466:	0029      	movs	r1, r5
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	f7ff fb33 	bl	8002ad4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800346e:	2208      	movs	r2, #8
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003476:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	438a      	bics	r2, r1
 800347e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003484:	430a      	orrs	r2, r1
 8003486:	61da      	str	r2, [r3, #28]
    break;
 8003488:	e7bf      	b.n	800340a <HAL_TIM_PWM_ConfigChannel+0xce>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x19c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d006      	beq.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_TIM_PWM_ConfigChannel+0x1a0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003498:	4918      	ldr	r1, [pc, #96]	; (80034fc <HAL_TIM_PWM_ConfigChannel+0x1c0>)
 800349a:	480c      	ldr	r0, [pc, #48]	; (80034cc <HAL_TIM_PWM_ConfigChannel+0x190>)
 800349c:	f7fd fb2b 	bl	8000af6 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034a0:	0029      	movs	r1, r5
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	f7ff fb7e 	bl	8002ba4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	69d9      	ldr	r1, [r3, #28]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	490f      	ldr	r1, [pc, #60]	; (80034f4 <HAL_TIM_PWM_ConfigChannel+0x1b8>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034bc:	692a      	ldr	r2, [r5, #16]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	0212      	lsls	r2, r2, #8
 80034c2:	e7df      	b.n	8003484 <HAL_TIM_PWM_ConfigChannel+0x148>
 80034c4:	01001111 	.word	0x01001111
 80034c8:	00000c1e 	.word	0x00000c1e
 80034cc:	08004e9c 	.word	0x08004e9c
 80034d0:	00000c1f 	.word	0x00000c1f
 80034d4:	00000c21 	.word	0x00000c21
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40002000 	.word	0x40002000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800
 80034ec:	00000c29 	.word	0x00000c29
 80034f0:	00000c38 	.word	0x00000c38
 80034f4:	fffffbff 	.word	0xfffffbff
 80034f8:	00000c47 	.word	0x00000c47
 80034fc:	00000c56 	.word	0x00000c56

08003500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003500:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8003502:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003504:	4d03      	ldr	r5, [pc, #12]	; (8003514 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003506:	430a      	orrs	r2, r1
 8003508:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800350a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350c:	4313      	orrs	r3, r2
 800350e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003510:	6083      	str	r3, [r0, #8]
}
 8003512:	bd30      	pop	{r4, r5, pc}
 8003514:	ffff00ff 	.word	0xffff00ff

08003518 <HAL_TIM_ConfigClockSource>:
{
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800351a:	0006      	movs	r6, r0
 800351c:	2302      	movs	r3, #2
 800351e:	363c      	adds	r6, #60	; 0x3c
 8003520:	7832      	ldrb	r2, [r6, #0]
{
 8003522:	0005      	movs	r5, r0
 8003524:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8003526:	0018      	movs	r0, r3
 8003528:	2a01      	cmp	r2, #1
 800352a:	d028      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x66>
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	002f      	movs	r7, r5
  __HAL_LOCK(htim);
 800352e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8003532:	7032      	strb	r2, [r6, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003534:	4aa0      	ldr	r2, [pc, #640]	; (80037b8 <HAL_TIM_ConfigClockSource+0x2a0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003536:	703b      	strb	r3, [r7, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	1899      	adds	r1, r3, r2
 800353c:	4a9f      	ldr	r2, [pc, #636]	; (80037bc <HAL_TIM_ConfigClockSource+0x2a4>)
 800353e:	4211      	tst	r1, r2
 8003540:	d008      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x3c>
 8003542:	2230      	movs	r2, #48	; 0x30
 8003544:	4393      	bics	r3, r2
 8003546:	d005      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x3c>
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d003      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x3c>
 800354c:	499c      	ldr	r1, [pc, #624]	; (80037c0 <HAL_TIM_ConfigClockSource+0x2a8>)
 800354e:	489d      	ldr	r0, [pc, #628]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003550:	f7fd fad1 	bl	8000af6 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8003554:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003556:	499c      	ldr	r1, [pc, #624]	; (80037c8 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8003558:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355a:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800355c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	2a40      	cmp	r2, #64	; 0x40
 8003562:	d100      	bne.n	8003566 <HAL_TIM_ConfigClockSource+0x4e>
 8003564:	e15c      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x308>
 8003566:	d821      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x94>
 8003568:	2a10      	cmp	r2, #16
 800356a:	d100      	bne.n	800356e <HAL_TIM_ConfigClockSource+0x56>
 800356c:	e1a3      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x39e>
 800356e:	d807      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x68>
 8003570:	2a00      	cmp	r2, #0
 8003572:	d100      	bne.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
 8003574:	e18c      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x378>
  htim->State = HAL_TIM_STATE_READY;
 8003576:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003578:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800357a:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 800357c:	7030      	strb	r0, [r6, #0]
}
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8003580:	2a20      	cmp	r2, #32
 8003582:	d100      	bne.n	8003586 <HAL_TIM_ConfigClockSource+0x6e>
 8003584:	e1a8      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x3c0>
 8003586:	2a30      	cmp	r2, #48	; 0x30
 8003588:	d1f5      	bne.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800358a:	4a90      	ldr	r2, [pc, #576]	; (80037cc <HAL_TIM_ConfigClockSource+0x2b4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d006      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x86>
 8003590:	4a8f      	ldr	r2, [pc, #572]	; (80037d0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x86>
 8003596:	498f      	ldr	r1, [pc, #572]	; (80037d4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8003598:	488a      	ldr	r0, [pc, #552]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800359a:	f7fd faac 	bl	8000af6 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 800359e:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80035a0:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80035a2:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80035a4:	4393      	bics	r3, r2
 80035a6:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80035a8:	2337      	movs	r3, #55	; 0x37
 80035aa:	e181      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x398>
  switch (sClockSourceConfig->ClockSource)
 80035ac:	2a70      	cmp	r2, #112	; 0x70
 80035ae:	d100      	bne.n	80035b2 <HAL_TIM_ConfigClockSource+0x9a>
 80035b0:	e093      	b.n	80036da <HAL_TIM_ConfigClockSource+0x1c2>
 80035b2:	d83d      	bhi.n	8003630 <HAL_TIM_ConfigClockSource+0x118>
 80035b4:	2a50      	cmp	r2, #80	; 0x50
 80035b6:	d100      	bne.n	80035ba <HAL_TIM_ConfigClockSource+0xa2>
 80035b8:	e0c2      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x228>
 80035ba:	2a60      	cmp	r2, #96	; 0x60
 80035bc:	d1db      	bne.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80035be:	4a83      	ldr	r2, [pc, #524]	; (80037cc <HAL_TIM_ConfigClockSource+0x2b4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d006      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0xba>
 80035c4:	4a82      	ldr	r2, [pc, #520]	; (80037d0 <HAL_TIM_ConfigClockSource+0x2b8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0xba>
 80035ca:	4983      	ldr	r1, [pc, #524]	; (80037d8 <HAL_TIM_ConfigClockSource+0x2c0>)
 80035cc:	487d      	ldr	r0, [pc, #500]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80035ce:	f7fd fa92 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	0212      	lsls	r2, r2, #8
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0xd8>
 80035dc:	2202      	movs	r2, #2
 80035de:	0019      	movs	r1, r3
 80035e0:	4391      	bics	r1, r2
 80035e2:	d005      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0xd8>
 80035e4:	2b0a      	cmp	r3, #10
 80035e6:	d003      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0xd8>
 80035e8:	497c      	ldr	r1, [pc, #496]	; (80037dc <HAL_TIM_ConfigClockSource+0x2c4>)
 80035ea:	4876      	ldr	r0, [pc, #472]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80035ec:	f7fd fa83 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80035f0:	68e3      	ldr	r3, [r4, #12]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d903      	bls.n	80035fe <HAL_TIM_ConfigClockSource+0xe6>
 80035f6:	497a      	ldr	r1, [pc, #488]	; (80037e0 <HAL_TIM_ConfigClockSource+0x2c8>)
 80035f8:	4872      	ldr	r0, [pc, #456]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80035fa:	f7fd fa7c 	bl	8000af6 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fe:	6862      	ldr	r2, [r4, #4]
 8003600:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003602:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003604:	682b      	ldr	r3, [r5, #0]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003606:	4d77      	ldr	r5, [pc, #476]	; (80037e4 <HAL_TIM_ConfigClockSource+0x2cc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003608:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360a:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360c:	43a0      	bics	r0, r4
 800360e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003610:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8003612:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003614:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003616:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	24a0      	movs	r4, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800361a:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 800361c:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361e:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8003624:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003626:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003628:	438a      	bics	r2, r1
 800362a:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800362c:	2267      	movs	r2, #103	; 0x67
 800362e:	e0bf      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x298>
  switch (sClockSourceConfig->ClockSource)
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	0149      	lsls	r1, r1, #5
 8003634:	428a      	cmp	r2, r1
 8003636:	d037      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x190>
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	0189      	lsls	r1, r1, #6
 800363c:	428a      	cmp	r2, r1
 800363e:	d19a      	bne.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003640:	4a62      	ldr	r2, [pc, #392]	; (80037cc <HAL_TIM_ConfigClockSource+0x2b4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d006      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0x13c>
 8003646:	4a62      	ldr	r2, [pc, #392]	; (80037d0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0x13c>
 800364c:	4966      	ldr	r1, [pc, #408]	; (80037e8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800364e:	485d      	ldr	r0, [pc, #372]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003650:	f7fd fa51 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003654:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_TIM_ConfigClockSource+0x2d4>)
 8003656:	68a2      	ldr	r2, [r4, #8]
 8003658:	421a      	tst	r2, r3
 800365a:	d003      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0x14c>
 800365c:	4964      	ldr	r1, [pc, #400]	; (80037f0 <HAL_TIM_ConfigClockSource+0x2d8>)
 800365e:	4859      	ldr	r0, [pc, #356]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003660:	f7fd fa49 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	0212      	lsls	r2, r2, #8
 800366a:	4293      	cmp	r3, r2
 800366c:	d00a      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800366e:	2202      	movs	r2, #2
 8003670:	0019      	movs	r1, r3
 8003672:	4391      	bics	r1, r2
 8003674:	d006      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003676:	2b0a      	cmp	r3, #10
 8003678:	d004      	beq.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800367a:	21ff      	movs	r1, #255	; 0xff
 800367c:	4851      	ldr	r0, [pc, #324]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800367e:	0109      	lsls	r1, r1, #4
 8003680:	f7fd fa39 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003684:	68e3      	ldr	r3, [r4, #12]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d903      	bls.n	8003692 <HAL_TIM_ConfigClockSource+0x17a>
 800368a:	495a      	ldr	r1, [pc, #360]	; (80037f4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800368c:	484d      	ldr	r0, [pc, #308]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800368e:	f7fd fa32 	bl	8000af6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	68a1      	ldr	r1, [r4, #8]
 8003698:	6828      	ldr	r0, [r5, #0]
 800369a:	f7ff ff31 	bl	8003500 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	682a      	ldr	r2, [r5, #0]
 80036a2:	01db      	lsls	r3, r3, #7
 80036a4:	6891      	ldr	r1, [r2, #8]
 80036a6:	e049      	b.n	800373c <HAL_TIM_ConfigClockSource+0x224>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80036a8:	4a48      	ldr	r2, [pc, #288]	; (80037cc <HAL_TIM_ConfigClockSource+0x2b4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x1b6>
 80036ae:	4a48      	ldr	r2, [pc, #288]	; (80037d0 <HAL_TIM_ConfigClockSource+0x2b8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00c      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x1b6>
 80036b4:	4a50      	ldr	r2, [pc, #320]	; (80037f8 <HAL_TIM_ConfigClockSource+0x2e0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x1b6>
 80036ba:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_TIM_ConfigClockSource+0x2e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d006      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x1b6>
 80036c0:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <HAL_TIM_ConfigClockSource+0x2e8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x1b6>
 80036c6:	494f      	ldr	r1, [pc, #316]	; (8003804 <HAL_TIM_ConfigClockSource+0x2ec>)
 80036c8:	483e      	ldr	r0, [pc, #248]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80036ca:	f7fd fa14 	bl	8000af6 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80036ce:	2107      	movs	r1, #7
 80036d0:	682a      	ldr	r2, [r5, #0]
 80036d2:	6893      	ldr	r3, [r2, #8]
 80036d4:	438b      	bics	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80036d6:	6093      	str	r3, [r2, #8]
    break;
 80036d8:	e74d      	b.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80036da:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <HAL_TIM_ConfigClockSource+0x2b4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d006      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x1d6>
 80036e0:	4a3b      	ldr	r2, [pc, #236]	; (80037d0 <HAL_TIM_ConfigClockSource+0x2b8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x1d6>
 80036e6:	4948      	ldr	r1, [pc, #288]	; (8003808 <HAL_TIM_ConfigClockSource+0x2f0>)
 80036e8:	4836      	ldr	r0, [pc, #216]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80036ea:	f7fd fa04 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_TIM_ConfigClockSource+0x2d4>)
 80036f0:	68a2      	ldr	r2, [r4, #8]
 80036f2:	421a      	tst	r2, r3
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x1e6>
 80036f6:	4945      	ldr	r1, [pc, #276]	; (800380c <HAL_TIM_ConfigClockSource+0x2f4>)
 80036f8:	4832      	ldr	r0, [pc, #200]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 80036fa:	f7fd f9fc 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	0212      	lsls	r2, r2, #8
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_TIM_ConfigClockSource+0x204>
 8003708:	2202      	movs	r2, #2
 800370a:	0019      	movs	r1, r3
 800370c:	4391      	bics	r1, r2
 800370e:	d005      	beq.n	800371c <HAL_TIM_ConfigClockSource+0x204>
 8003710:	2b0a      	cmp	r3, #10
 8003712:	d003      	beq.n	800371c <HAL_TIM_ConfigClockSource+0x204>
 8003714:	493e      	ldr	r1, [pc, #248]	; (8003810 <HAL_TIM_ConfigClockSource+0x2f8>)
 8003716:	482b      	ldr	r0, [pc, #172]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003718:	f7fd f9ed 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800371c:	68e3      	ldr	r3, [r4, #12]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d903      	bls.n	800372a <HAL_TIM_ConfigClockSource+0x212>
 8003722:	493c      	ldr	r1, [pc, #240]	; (8003814 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003724:	4827      	ldr	r0, [pc, #156]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003726:	f7fd f9e6 	bl	8000af6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	68e3      	ldr	r3, [r4, #12]
 800372c:	6862      	ldr	r2, [r4, #4]
 800372e:	68a1      	ldr	r1, [r4, #8]
 8003730:	6828      	ldr	r0, [r5, #0]
 8003732:	f7ff fee5 	bl	8003500 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003736:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8003738:	682a      	ldr	r2, [r5, #0]
 800373a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800373c:	430b      	orrs	r3, r1
 800373e:	e7ca      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_TIM_ConfigClockSource+0x2b4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x23e>
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x23e>
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	481d      	ldr	r0, [pc, #116]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003750:	0149      	lsls	r1, r1, #5
 8003752:	f7fd f9d0 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	0212      	lsls	r2, r2, #8
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_TIM_ConfigClockSource+0x25c>
 8003760:	2202      	movs	r2, #2
 8003762:	0019      	movs	r1, r3
 8003764:	4391      	bics	r1, r2
 8003766:	d005      	beq.n	8003774 <HAL_TIM_ConfigClockSource+0x25c>
 8003768:	2b0a      	cmp	r3, #10
 800376a:	d003      	beq.n	8003774 <HAL_TIM_ConfigClockSource+0x25c>
 800376c:	492a      	ldr	r1, [pc, #168]	; (8003818 <HAL_TIM_ConfigClockSource+0x300>)
 800376e:	4815      	ldr	r0, [pc, #84]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 8003770:	f7fd f9c1 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003774:	68e3      	ldr	r3, [r4, #12]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	d903      	bls.n	8003782 <HAL_TIM_ConfigClockSource+0x26a>
 800377a:	4928      	ldr	r1, [pc, #160]	; (800381c <HAL_TIM_ConfigClockSource+0x304>)
 800377c:	4811      	ldr	r0, [pc, #68]	; (80037c4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800377e:	f7fd f9ba 	bl	8000af6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003784:	2501      	movs	r5, #1
  tmpccer = TIMx->CCER;
 8003786:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003788:	6861      	ldr	r1, [r4, #4]
 800378a:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378c:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800378e:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003790:	43ac      	bics	r4, r5
 8003792:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003794:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003796:	35ef      	adds	r5, #239	; 0xef
 8003798:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800379a:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800379c:	240a      	movs	r4, #10
 800379e:	43a0      	bics	r0, r4
  tmpccer |= TIM_ICPolarity;
 80037a0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80037a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a4:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80037a6:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80037a8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80037aa:	438a      	bics	r2, r1
 80037ac:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80037ae:	2257      	movs	r2, #87	; 0x57
 80037b0:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	e6df      	b.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	fffff000 	.word	0xfffff000
 80037bc:	ffffefff 	.word	0xffffefff
 80037c0:	00000fbd 	.word	0x00000fbd
 80037c4:	08004e9c 	.word	0x08004e9c
 80037c8:	ffff0088 	.word	0xffff0088
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	00001045 	.word	0x00001045
 80037d8:	0000100f 	.word	0x0000100f
 80037dc:	00001012 	.word	0x00001012
 80037e0:	00001013 	.word	0x00001013
 80037e4:	ffff0fff 	.word	0xffff0fff
 80037e8:	00000fec 	.word	0x00000fec
 80037ec:	ffffcfff 	.word	0xffffcfff
 80037f0:	00000fef 	.word	0x00000fef
 80037f4:	00000ff1 	.word	0x00000ff1
 80037f8:	40002000 	.word	0x40002000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800
 8003804:	00000fc9 	.word	0x00000fc9
 8003808:	00000fd2 	.word	0x00000fd2
 800380c:	00000fd5 	.word	0x00000fd5
 8003810:	00000fd6 	.word	0x00000fd6
 8003814:	00000fd7 	.word	0x00000fd7
 8003818:	00001003 	.word	0x00001003
 800381c:	00001004 	.word	0x00001004
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003820:	4a36      	ldr	r2, [pc, #216]	; (80038fc <HAL_TIM_ConfigClockSource+0x3e4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d006      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0x31c>
 8003826:	4a36      	ldr	r2, [pc, #216]	; (8003900 <HAL_TIM_ConfigClockSource+0x3e8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0x31c>
 800382c:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_TIM_ConfigClockSource+0x3ec>)
 800382e:	4836      	ldr	r0, [pc, #216]	; (8003908 <HAL_TIM_ConfigClockSource+0x3f0>)
 8003830:	f7fd f961 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	6863      	ldr	r3, [r4, #4]
 8003838:	0212      	lsls	r2, r2, #8
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x33a>
 800383e:	2202      	movs	r2, #2
 8003840:	0019      	movs	r1, r3
 8003842:	4391      	bics	r1, r2
 8003844:	d005      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x33a>
 8003846:	2b0a      	cmp	r3, #10
 8003848:	d003      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x33a>
 800384a:	4930      	ldr	r1, [pc, #192]	; (800390c <HAL_TIM_ConfigClockSource+0x3f4>)
 800384c:	482e      	ldr	r0, [pc, #184]	; (8003908 <HAL_TIM_ConfigClockSource+0x3f0>)
 800384e:	f7fd f952 	bl	8000af6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d903      	bls.n	8003860 <HAL_TIM_ConfigClockSource+0x348>
 8003858:	492d      	ldr	r1, [pc, #180]	; (8003910 <HAL_TIM_ConfigClockSource+0x3f8>)
 800385a:	482b      	ldr	r0, [pc, #172]	; (8003908 <HAL_TIM_ConfigClockSource+0x3f0>)
 800385c:	f7fd f94b 	bl	8000af6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003860:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003862:	2501      	movs	r5, #1
  tmpccer = TIMx->CCER;
 8003864:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	6861      	ldr	r1, [r4, #4]
 8003868:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386e:	43ac      	bics	r4, r5
 8003870:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003874:	35ef      	adds	r5, #239	; 0xef
 8003876:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003878:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387a:	240a      	movs	r4, #10
 800387c:	43a0      	bics	r0, r4
  tmpccer |= TIM_ICPolarity;
 800387e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003882:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003884:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8003886:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003888:	438a      	bics	r2, r1
 800388a:	0011      	movs	r1, r2
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800388c:	2247      	movs	r2, #71	; 0x47
 800388e:	e78f      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x298>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003890:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <HAL_TIM_ConfigClockSource+0x3e4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d006      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0x38c>
 8003896:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_TIM_ConfigClockSource+0x3e8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0x38c>
 800389c:	491d      	ldr	r1, [pc, #116]	; (8003914 <HAL_TIM_ConfigClockSource+0x3fc>)
 800389e:	481a      	ldr	r0, [pc, #104]	; (8003908 <HAL_TIM_ConfigClockSource+0x3f0>)
 80038a0:	f7fd f929 	bl	8000af6 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 80038a4:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80038a6:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80038a8:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80038aa:	4393      	bics	r3, r2
 80038ac:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80038ae:	2307      	movs	r3, #7
 80038b0:	4313      	orrs	r3, r2
   TIMx->SMCR = tmpsmcr;
 80038b2:	608b      	str	r3, [r1, #8]
 80038b4:	e65f      	b.n	8003576 <HAL_TIM_ConfigClockSource+0x5e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80038b6:	4a11      	ldr	r2, [pc, #68]	; (80038fc <HAL_TIM_ConfigClockSource+0x3e4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d006      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x3b2>
 80038bc:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_TIM_ConfigClockSource+0x3e8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x3b2>
 80038c2:	4915      	ldr	r1, [pc, #84]	; (8003918 <HAL_TIM_ConfigClockSource+0x400>)
 80038c4:	4810      	ldr	r0, [pc, #64]	; (8003908 <HAL_TIM_ConfigClockSource+0x3f0>)
 80038c6:	f7fd f916 	bl	8000af6 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 80038ca:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80038cc:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80038ce:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80038d0:	4393      	bics	r3, r2
 80038d2:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80038d4:	2317      	movs	r3, #23
 80038d6:	e7eb      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x398>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_TIM_ConfigClockSource+0x3e4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d006      	beq.n	80038ec <HAL_TIM_ConfigClockSource+0x3d4>
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_TIM_ConfigClockSource+0x3e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <HAL_TIM_ConfigClockSource+0x3d4>
 80038e4:	490d      	ldr	r1, [pc, #52]	; (800391c <HAL_TIM_ConfigClockSource+0x404>)
 80038e6:	4808      	ldr	r0, [pc, #32]	; (8003908 <HAL_TIM_ConfigClockSource+0x3f0>)
 80038e8:	f7fd f905 	bl	8000af6 <assert_failed>
   tmpsmcr &= ~TIM_SMCR_TS;
 80038ec:	2270      	movs	r2, #112	; 0x70
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80038ee:	6829      	ldr	r1, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80038f0:	688b      	ldr	r3, [r1, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80038f2:	4393      	bics	r3, r2
 80038f4:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80038f6:	2327      	movs	r3, #39	; 0x27
 80038f8:	e7da      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x398>
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400
 8003904:	0000101e 	.word	0x0000101e
 8003908:	08004e9c 	.word	0x08004e9c
 800390c:	00001021 	.word	0x00001021
 8003910:	00001022 	.word	0x00001022
 8003914:	0000102d 	.word	0x0000102d
 8003918:	00001035 	.word	0x00001035
 800391c:	0000103d 	.word	0x0000103d

08003920 <HAL_TIMEx_MasterConfigSynchronization>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
{
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	0005      	movs	r5, r0
 8003928:	000c      	movs	r4, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800392a:	4293      	cmp	r3, r2
 800392c:	d006      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 800392e:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 8003934:	491c      	ldr	r1, [pc, #112]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003936:	481d      	ldr	r0, [pc, #116]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8003938:	f7fd f8dd 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800393c:	2330      	movs	r3, #48	; 0x30
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	439a      	bics	r2, r3
 8003942:	d005      	beq.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8003944:	2a40      	cmp	r2, #64	; 0x40
 8003946:	d003      	beq.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8003948:	4919      	ldr	r1, [pc, #100]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800394a:	4818      	ldr	r0, [pc, #96]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800394c:	f7fd f8d3 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	439a      	bics	r2, r3
 8003956:	d003      	beq.n	8003960 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800395a:	4814      	ldr	r0, [pc, #80]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800395c:	f7fd f8cb 	bl	8000af6 <assert_failed>

  __HAL_LOCK(htim);
 8003960:	0029      	movs	r1, r5
 8003962:	313c      	adds	r1, #60	; 0x3c
 8003964:	780b      	ldrb	r3, [r1, #0]
 8003966:	2002      	movs	r0, #2
 8003968:	2b01      	cmp	r3, #1
 800396a:	d017      	beq.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x7c>

  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	002e      	movs	r6, r5

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800396e:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	363d      	adds	r6, #61	; 0x3d
 8003972:	7030      	strb	r0, [r6, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	306e      	adds	r0, #110	; 0x6e
 8003978:	4382      	bics	r2, r0
 800397a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	4302      	orrs	r2, r0

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003982:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003984:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4382      	bics	r2, r0
 800398a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	6860      	ldr	r0, [r4, #4]
 8003990:	4302      	orrs	r2, r0
 8003992:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003994:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003996:	2301      	movs	r3, #1
 8003998:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800399a:	7008      	strb	r0, [r1, #0]

  return HAL_OK;
}
 800399c:	bd70      	pop	{r4, r5, r6, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	00000649 	.word	0x00000649
 80039ac:	08004ed4 	.word	0x08004ed4
 80039b0:	0000064a 	.word	0x0000064a
 80039b4:	0000064b 	.word	0x0000064b

080039b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpbdtr = 0;
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80039ba:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>)
 80039bc:	6803      	ldr	r3, [r0, #0]
{
 80039be:	0005      	movs	r5, r0
 80039c0:	000c      	movs	r4, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00a      	beq.n	80039dc <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80039c6:	4a37      	ldr	r2, [pc, #220]	; (8003aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80039cc:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIMEx_ConfigBreakDeadTime+0x24>
 80039d2:	21ce      	movs	r1, #206	; 0xce
 80039d4:	4835      	ldr	r0, [pc, #212]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80039d6:	00c9      	lsls	r1, r1, #3
 80039d8:	f7fd f88d 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80039e0:	4213      	tst	r3, r2
 80039e2:	d003      	beq.n	80039ec <HAL_TIMEx_ConfigBreakDeadTime+0x34>
 80039e4:	4933      	ldr	r1, [pc, #204]	; (8003ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80039e6:	4831      	ldr	r0, [pc, #196]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80039e8:	f7fd f885 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80039f0:	4213      	tst	r3, r2
 80039f2:	d003      	beq.n	80039fc <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80039f4:	4931      	ldr	r1, [pc, #196]	; (8003abc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80039f6:	482d      	ldr	r0, [pc, #180]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80039f8:	f7fd f87d 	bl	8000af6 <assert_failed>
 80039fc:	4f30      	ldr	r7, [pc, #192]	; (8003ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80039fe:	68a3      	ldr	r3, [r4, #8]
 8003a00:	423b      	tst	r3, r7
 8003a02:	d003      	beq.n	8003a0c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8003a04:	492f      	ldr	r1, [pc, #188]	; (8003ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003a06:	4829      	ldr	r0, [pc, #164]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003a08:	f7fd f875 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8003a0c:	68e3      	ldr	r3, [r4, #12]
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d903      	bls.n	8003a1a <HAL_TIMEx_ConfigBreakDeadTime+0x62>
 8003a12:	492d      	ldr	r1, [pc, #180]	; (8003ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003a14:	4825      	ldr	r0, [pc, #148]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003a16:	f7fd f86e 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8003a1a:	6923      	ldr	r3, [r4, #16]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003a1e:	4213      	tst	r3, r2
 8003a20:	d003      	beq.n	8003a2a <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8003a22:	492b      	ldr	r1, [pc, #172]	; (8003ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003a24:	4821      	ldr	r0, [pc, #132]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003a26:	f7fd f866 	bl	8000af6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8003a2a:	6963      	ldr	r3, [r4, #20]
 8003a2c:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003a2e:	4213      	tst	r3, r2
 8003a30:	d003      	beq.n	8003a3a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8003a32:	4929      	ldr	r1, [pc, #164]	; (8003ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003a34:	481d      	ldr	r0, [pc, #116]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003a36:	f7fd f85e 	bl	8000af6 <assert_failed>
 8003a3a:	4e28      	ldr	r6, [pc, #160]	; (8003adc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8003a3c:	69a3      	ldr	r3, [r4, #24]
 8003a3e:	4233      	tst	r3, r6
 8003a40:	d003      	beq.n	8003a4a <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 8003a42:	4927      	ldr	r1, [pc, #156]	; (8003ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003a44:	4819      	ldr	r0, [pc, #100]	; (8003aac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003a46:	f7fd f856 	bl	8000af6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4a:	002b      	movs	r3, r5
 8003a4c:	333c      	adds	r3, #60	; 0x3c
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	2002      	movs	r0, #2
 8003a52:	2a01      	cmp	r2, #1
 8003a54:	d022      	beq.n	8003a9c <HAL_TIMEx_ConfigBreakDeadTime+0xe4>

  htim->State = HAL_TIM_STATE_BUSY;
 8003a56:	002a      	movs	r2, r5
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a58:	68e1      	ldr	r1, [r4, #12]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	323d      	adds	r2, #61	; 0x3d
 8003a5c:	7010      	strb	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a5e:	68a0      	ldr	r0, [r4, #8]
 8003a60:	4039      	ands	r1, r7
 8003a62:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a64:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003a66:	4001      	ands	r1, r0
 8003a68:	6860      	ldr	r0, [r4, #4]
 8003a6a:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a6c:	4810      	ldr	r0, [pc, #64]	; (8003ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003a6e:	4001      	ands	r1, r0
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a74:	4815      	ldr	r0, [pc, #84]	; (8003acc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003a76:	4001      	ands	r1, r0
 8003a78:	6920      	ldr	r0, [r4, #16]
 8003a7a:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a7c:	4815      	ldr	r0, [pc, #84]	; (8003ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003a7e:	4001      	ands	r1, r0
 8003a80:	6960      	ldr	r0, [r4, #20]
 8003a82:	4301      	orrs	r1, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a84:	400e      	ands	r6, r1
 8003a86:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a88:	4816      	ldr	r0, [pc, #88]	; (8003ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a8a:	430e      	orrs	r6, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a8c:	4006      	ands	r6, r0
 8003a8e:	430e      	orrs	r6, r1
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a90:	6829      	ldr	r1, [r5, #0]
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003a92:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8003a94:	644e      	str	r6, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	2101      	movs	r1, #1
 8003a98:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(htim);
 8003a9a:	7018      	strb	r0, [r3, #0]

  return HAL_OK;
}
 8003a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800
 8003aac:	08004ed4 	.word	0x08004ed4
 8003ab0:	fffff7ff 	.word	0xfffff7ff
 8003ab4:	00000671 	.word	0x00000671
 8003ab8:	fffffbff 	.word	0xfffffbff
 8003abc:	00000672 	.word	0x00000672
 8003ac0:	fffffcff 	.word	0xfffffcff
 8003ac4:	00000673 	.word	0x00000673
 8003ac8:	00000674 	.word	0x00000674
 8003acc:	ffffefff 	.word	0xffffefff
 8003ad0:	00000675 	.word	0x00000675
 8003ad4:	ffffdfff 	.word	0xffffdfff
 8003ad8:	00000676 	.word	0x00000676
 8003adc:	ffffbfff 	.word	0xffffbfff
 8003ae0:	00000677 	.word	0x00000677
 8003ae4:	ffff7fff 	.word	0xffff7fff

08003ae8 <HAL_TIMEx_CommutationCallback>:
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aea:	4770      	bx	lr

08003aec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aec:	6803      	ldr	r3, [r0, #0]
 8003aee:	4906      	ldr	r1, [pc, #24]	; (8003b08 <UART_EndRxTransfer+0x1c>)
 8003af0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af2:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	400a      	ands	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	3123      	adds	r1, #35	; 0x23
 8003afc:	31ff      	adds	r1, #255	; 0xff
 8003afe:	438a      	bics	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003b02:	2320      	movs	r3, #32
 8003b04:	7003      	strb	r3, [r0, #0]
}
 8003b06:	4770      	bx	lr
 8003b08:	fffffedf 	.word	0xfffffedf

08003b0c <HAL_UART_Transmit_DMA>:
{
 8003b0c:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003b0e:	0002      	movs	r2, r0
{
 8003b10:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8003b12:	3269      	adds	r2, #105	; 0x69
 8003b14:	7814      	ldrb	r4, [r2, #0]
{
 8003b16:	0005      	movs	r5, r0
    return HAL_BUSY;
 8003b18:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8003b1a:	2c20      	cmp	r4, #32
 8003b1c:	d134      	bne.n	8003b88 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8003b1e:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8003b20:	2900      	cmp	r1, #0
 8003b22:	d031      	beq.n	8003b88 <HAL_UART_Transmit_DMA+0x7c>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02f      	beq.n	8003b88 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b28:	2480      	movs	r4, #128	; 0x80
 8003b2a:	68ae      	ldr	r6, [r5, #8]
 8003b2c:	0164      	lsls	r4, r4, #5
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d104      	bne.n	8003b3c <HAL_UART_Transmit_DMA+0x30>
 8003b32:	692c      	ldr	r4, [r5, #16]
 8003b34:	2c00      	cmp	r4, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1U) != 0U)
 8003b38:	4201      	tst	r1, r0
 8003b3a:	d125      	bne.n	8003b88 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8003b3c:	002e      	movs	r6, r5
 8003b3e:	3668      	adds	r6, #104	; 0x68
 8003b40:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8003b42:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003b44:	2c01      	cmp	r4, #1
 8003b46:	d01f      	beq.n	8003b88 <HAL_UART_Transmit_DMA+0x7c>
 8003b48:	3801      	subs	r0, #1
 8003b4a:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8003b4c:	0028      	movs	r0, r5
 8003b4e:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8003b50:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8003b54:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 8003b56:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b58:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5c:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b5e:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003b62:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b64:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_UART_Transmit_DMA+0x84>)
 8003b68:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_UART_Transmit_DMA+0x88>)
 8003b6c:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8003b6e:	682a      	ldr	r2, [r5, #0]
 8003b70:	3228      	adds	r2, #40	; 0x28
 8003b72:	f7fd ff9d 	bl	8001ab0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003b76:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8003b78:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	1892      	adds	r2, r2, r2
 8003b82:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8003b84:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bd70      	pop	{r4, r5, r6, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	08003b99 	.word	0x08003b99
 8003b90:	08003bcb 	.word	0x08003bcb
 8003b94:	08003bd9 	.word	0x08003bd9

08003b98 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003b98:	2120      	movs	r1, #32
 8003b9a:	6803      	ldr	r3, [r0, #0]
{
 8003b9c:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003b9e:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003ba0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	d10c      	bne.n	8003bc0 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8003ba6:	0011      	movs	r1, r2
 8003ba8:	3152      	adds	r1, #82	; 0x52
 8003baa:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb6:	2240      	movs	r2, #64	; 0x40
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8003bbe:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8003bc0:	0010      	movs	r0, r2
 8003bc2:	f7fc fcbf 	bl	8000544 <HAL_UART_TxCpltCallback>
}
 8003bc6:	e7fa      	b.n	8003bbe <UART_DMATransmitCplt+0x26>

08003bc8 <HAL_UART_TxHalfCpltCallback>:
 8003bc8:	4770      	bx	lr

08003bca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bca:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8003bcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003bce:	f7ff fffb 	bl	8003bc8 <HAL_UART_TxHalfCpltCallback>
}
 8003bd2:	bd10      	pop	{r4, pc}

08003bd4 <HAL_UART_RxCpltCallback>:
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_UART_ErrorCallback>:
 8003bd6:	4770      	bx	lr

08003bd8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003bda:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bdc:	0021      	movs	r1, r4
 8003bde:	3169      	adds	r1, #105	; 0x69
 8003be0:	780b      	ldrb	r3, [r1, #0]
 8003be2:	2b21      	cmp	r3, #33	; 0x21
 8003be4:	d10d      	bne.n	8003c02 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	0612      	lsls	r2, r2, #24
 8003bec:	d509      	bpl.n	8003c02 <UART_DMAError+0x2a>
  {
    huart->TxXferCount = 0U;
 8003bee:	0022      	movs	r2, r4
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	3252      	adds	r2, #82	; 0x52
 8003bf4:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	30c0      	adds	r0, #192	; 0xc0
 8003bfa:	4382      	bics	r2, r0
 8003bfc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	700b      	strb	r3, [r1, #0]
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c02:	0023      	movs	r3, r4
 8003c04:	336a      	adds	r3, #106	; 0x6a
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b22      	cmp	r3, #34	; 0x22
 8003c0a:	d10a      	bne.n	8003c22 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	065b      	lsls	r3, r3, #25
 8003c12:	d506      	bpl.n	8003c22 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
 8003c14:	0023      	movs	r3, r4
 8003c16:	2200      	movs	r2, #0
 8003c18:	335a      	adds	r3, #90	; 0x5a
 8003c1a:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f7ff ff65 	bl	8003aec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c22:	2310      	movs	r3, #16
 8003c24:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003c26:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003c2c:	f7ff ffd3 	bl	8003bd6 <HAL_UART_ErrorCallback>
}
 8003c30:	bd10      	pop	{r4, pc}

08003c32 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003c32:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	0002      	movs	r2, r0
{
 8003c38:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003c3a:	325a      	adds	r2, #90	; 0x5a
 8003c3c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003c3e:	3a08      	subs	r2, #8
 8003c40:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8003c42:	f7ff ffc8 	bl	8003bd6 <HAL_UART_ErrorCallback>
}
 8003c46:	bd10      	pop	{r4, pc}

08003c48 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003c48:	4b5e      	ldr	r3, [pc, #376]	; (8003dc4 <UART_SetConfig+0x17c>)
 8003c4a:	6842      	ldr	r2, [r0, #4]
{
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d903      	bls.n	8003c5c <UART_SetConfig+0x14>
 8003c54:	495c      	ldr	r1, [pc, #368]	; (8003dc8 <UART_SetConfig+0x180>)
 8003c56:	485d      	ldr	r0, [pc, #372]	; (8003dcc <UART_SetConfig+0x184>)
 8003c58:	f7fc ff4d 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <UART_SetConfig+0x188>)
 8003c5e:	68a2      	ldr	r2, [r4, #8]
 8003c60:	421a      	tst	r2, r3
 8003c62:	d003      	beq.n	8003c6c <UART_SetConfig+0x24>
 8003c64:	495b      	ldr	r1, [pc, #364]	; (8003dd4 <UART_SetConfig+0x18c>)
 8003c66:	4859      	ldr	r0, [pc, #356]	; (8003dcc <UART_SetConfig+0x184>)
 8003c68:	f7fc ff45 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	; (8003dd8 <UART_SetConfig+0x190>)
 8003c6e:	68e2      	ldr	r2, [r4, #12]
 8003c70:	421a      	tst	r2, r3
 8003c72:	d003      	beq.n	8003c7c <UART_SetConfig+0x34>
 8003c74:	4959      	ldr	r1, [pc, #356]	; (8003ddc <UART_SetConfig+0x194>)
 8003c76:	4855      	ldr	r0, [pc, #340]	; (8003dcc <UART_SetConfig+0x184>)
 8003c78:	f7fc ff3d 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003c7c:	6923      	ldr	r3, [r4, #16]
 8003c7e:	4a58      	ldr	r2, [pc, #352]	; (8003de0 <UART_SetConfig+0x198>)
 8003c80:	4213      	tst	r3, r2
 8003c82:	d007      	beq.n	8003c94 <UART_SetConfig+0x4c>
 8003c84:	22c0      	movs	r2, #192	; 0xc0
 8003c86:	00d2      	lsls	r2, r2, #3
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <UART_SetConfig+0x4c>
 8003c8c:	4955      	ldr	r1, [pc, #340]	; (8003de4 <UART_SetConfig+0x19c>)
 8003c8e:	484f      	ldr	r0, [pc, #316]	; (8003dcc <UART_SetConfig+0x184>)
 8003c90:	f7fc ff31 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003c94:	6963      	ldr	r3, [r4, #20]
 8003c96:	220c      	movs	r2, #12
 8003c98:	0019      	movs	r1, r3
 8003c9a:	4391      	bics	r1, r2
 8003c9c:	d101      	bne.n	8003ca2 <UART_SetConfig+0x5a>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <UART_SetConfig+0x62>
 8003ca2:	4951      	ldr	r1, [pc, #324]	; (8003de8 <UART_SetConfig+0x1a0>)
 8003ca4:	4849      	ldr	r0, [pc, #292]	; (8003dcc <UART_SetConfig+0x184>)
 8003ca6:	f7fc ff26 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <UART_SetConfig+0x1a4>)
 8003cac:	69a2      	ldr	r2, [r4, #24]
 8003cae:	421a      	tst	r2, r3
 8003cb0:	d003      	beq.n	8003cba <UART_SetConfig+0x72>
 8003cb2:	494f      	ldr	r1, [pc, #316]	; (8003df0 <UART_SetConfig+0x1a8>)
 8003cb4:	4845      	ldr	r0, [pc, #276]	; (8003dcc <UART_SetConfig+0x184>)
 8003cb6:	f7fc ff1e 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003cba:	4b4e      	ldr	r3, [pc, #312]	; (8003df4 <UART_SetConfig+0x1ac>)
 8003cbc:	6a22      	ldr	r2, [r4, #32]
 8003cbe:	421a      	tst	r2, r3
 8003cc0:	d003      	beq.n	8003cca <UART_SetConfig+0x82>
 8003cc2:	494d      	ldr	r1, [pc, #308]	; (8003df8 <UART_SetConfig+0x1b0>)
 8003cc4:	4841      	ldr	r0, [pc, #260]	; (8003dcc <UART_SetConfig+0x184>)
 8003cc6:	f7fc ff16 	bl	8000af6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <UART_SetConfig+0x1b4>)
 8003ccc:	69e2      	ldr	r2, [r4, #28]
 8003cce:	421a      	tst	r2, r3
 8003cd0:	d003      	beq.n	8003cda <UART_SetConfig+0x92>
 8003cd2:	494b      	ldr	r1, [pc, #300]	; (8003e00 <UART_SetConfig+0x1b8>)
 8003cd4:	483d      	ldr	r0, [pc, #244]	; (8003dcc <UART_SetConfig+0x184>)
 8003cd6:	f7fc ff0e 	bl	8000af6 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cda:	6920      	ldr	r0, [r4, #16]
 8003cdc:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cde:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce0:	4303      	orrs	r3, r0
 8003ce2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003ce4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce6:	69e2      	ldr	r2, [r4, #28]
 8003ce8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cea:	4846      	ldr	r0, [pc, #280]	; (8003e04 <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cee:	4001      	ands	r1, r0
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	686b      	ldr	r3, [r5, #4]
 8003cf6:	4944      	ldr	r1, [pc, #272]	; (8003e08 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cf8:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfa:	400b      	ands	r3, r1
 8003cfc:	68e1      	ldr	r1, [r4, #12]
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d02:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d04:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d06:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d08:	4840      	ldr	r0, [pc, #256]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003d0a:	4001      	ands	r1, r0
 8003d0c:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d0e:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d10:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d12:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <UART_SetConfig+0x1c8>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	400b      	ands	r3, r1
 8003d18:	493e      	ldr	r1, [pc, #248]	; (8003e14 <UART_SetConfig+0x1cc>)
 8003d1a:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d12c      	bne.n	8003d7e <UART_SetConfig+0x136>
    switch (clocksource)
 8003d24:	2808      	cmp	r0, #8
 8003d26:	d827      	bhi.n	8003d78 <UART_SetConfig+0x130>
 8003d28:	f7fc f9ee 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003d2c:	260b2605 	.word	0x260b2605
 8003d30:	2626261e 	.word	0x2626261e
 8003d34:	21          	.byte	0x21
 8003d35:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d36:	f7fe fdaf 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	0040      	lsls	r0, r0, #1
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	e002      	b.n	8003d48 <UART_SetConfig+0x100>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	0858      	lsrs	r0, r3, #1
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <UART_SetConfig+0x1d0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d48:	18c0      	adds	r0, r0, r3
 8003d4a:	6861      	ldr	r1, [r4, #4]
 8003d4c:	f7fc f9e6 	bl	800011c <__udivsi3>
 8003d50:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d52:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003d54:	220f      	movs	r2, #15
 8003d56:	0019      	movs	r1, r3
 8003d58:	4391      	bics	r1, r2
 8003d5a:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5c:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8003d5e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d60:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60cb      	str	r3, [r1, #12]
}
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d68:	f7fe fc6c 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003d6c:	e7e5      	b.n	8003d3a <UART_SetConfig+0xf2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	0858      	lsrs	r0, r3, #1
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	025b      	lsls	r3, r3, #9
 8003d76:	e7e7      	b.n	8003d48 <UART_SetConfig+0x100>
        ret = HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e7ea      	b.n	8003d54 <UART_SetConfig+0x10c>
    switch (clocksource)
 8003d7e:	2808      	cmp	r0, #8
 8003d80:	d81d      	bhi.n	8003dbe <UART_SetConfig+0x176>
 8003d82:	f7fc f9c1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003d86:	1c05      	.short	0x1c05
 8003d88:	1c141c0a 	.word	0x1c141c0a
 8003d8c:	1c1c      	.short	0x1c1c
 8003d8e:	17          	.byte	0x17
 8003d8f:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d90:	f7fe fd82 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d94:	6861      	ldr	r1, [r4, #4]
 8003d96:	084b      	lsrs	r3, r1, #1
 8003d98:	e002      	b.n	8003da0 <UART_SetConfig+0x158>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d9a:	6861      	ldr	r1, [r4, #4]
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <UART_SetConfig+0x1d4>)
 8003d9e:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003da0:	18c0      	adds	r0, r0, r3
 8003da2:	f7fc f9bb 	bl	800011c <__udivsi3>
 8003da6:	b280      	uxth	r0, r0
 8003da8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003daa:	2000      	movs	r0, #0
        break;
 8003dac:	e7db      	b.n	8003d66 <UART_SetConfig+0x11e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003dae:	f7fe fc49 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003db2:	e7ef      	b.n	8003d94 <UART_SetConfig+0x14c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	6861      	ldr	r1, [r4, #4]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	0848      	lsrs	r0, r1, #1
 8003dbc:	e7f0      	b.n	8003da0 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	e7d1      	b.n	8003d66 <UART_SetConfig+0x11e>
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	005b8d80 	.word	0x005b8d80
 8003dc8:	00000846 	.word	0x00000846
 8003dcc:	08004f13 	.word	0x08004f13
 8003dd0:	ffffefff 	.word	0xffffefff
 8003dd4:	00000847 	.word	0x00000847
 8003dd8:	ffffdfff 	.word	0xffffdfff
 8003ddc:	00000848 	.word	0x00000848
 8003de0:	fffffbff 	.word	0xfffffbff
 8003de4:	00000849 	.word	0x00000849
 8003de8:	0000084a 	.word	0x0000084a
 8003dec:	fffffcff 	.word	0xfffffcff
 8003df0:	0000084b 	.word	0x0000084b
 8003df4:	fffff7ff 	.word	0xfffff7ff
 8003df8:	0000084c 	.word	0x0000084c
 8003dfc:	ffff7fff 	.word	0xffff7fff
 8003e00:	0000084d 	.word	0x0000084d
 8003e04:	ffff69f3 	.word	0xffff69f3
 8003e08:	ffffcfff 	.word	0xffffcfff
 8003e0c:	fffff4ff 	.word	0xfffff4ff
 8003e10:	40021000 	.word	0x40021000
 8003e14:	08004f0f 	.word	0x08004f0f
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200

08003e20 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003e20:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003e22:	b570      	push	{r4, r5, r6, lr}
 8003e24:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d903      	bls.n	8003e32 <UART_AdvFeatureConfig+0x12>
 8003e2a:	4954      	ldr	r1, [pc, #336]	; (8003f7c <UART_AdvFeatureConfig+0x15c>)
 8003e2c:	4854      	ldr	r0, [pc, #336]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003e2e:	f7fc fe62 	bl	8000af6 <assert_failed>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e34:	07db      	lsls	r3, r3, #31
 8003e36:	d50d      	bpl.n	8003e54 <UART_AdvFeatureConfig+0x34>
 8003e38:	4d52      	ldr	r5, [pc, #328]	; (8003f84 <UART_AdvFeatureConfig+0x164>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e3c:	422b      	tst	r3, r5
 8003e3e:	d003      	beq.n	8003e48 <UART_AdvFeatureConfig+0x28>
 8003e40:	4951      	ldr	r1, [pc, #324]	; (8003f88 <UART_AdvFeatureConfig+0x168>)
 8003e42:	484f      	ldr	r0, [pc, #316]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003e44:	f7fc fe57 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003e4c:	6853      	ldr	r3, [r2, #4]
 8003e4e:	402b      	ands	r3, r5
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e56:	079b      	lsls	r3, r3, #30
 8003e58:	d50d      	bpl.n	8003e76 <UART_AdvFeatureConfig+0x56>
 8003e5a:	4d4c      	ldr	r5, [pc, #304]	; (8003f8c <UART_AdvFeatureConfig+0x16c>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003e5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e5e:	422b      	tst	r3, r5
 8003e60:	d003      	beq.n	8003e6a <UART_AdvFeatureConfig+0x4a>
 8003e62:	494b      	ldr	r1, [pc, #300]	; (8003f90 <UART_AdvFeatureConfig+0x170>)
 8003e64:	4846      	ldr	r0, [pc, #280]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003e66:	f7fc fe46 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e6e:	6853      	ldr	r3, [r2, #4]
 8003e70:	402b      	ands	r3, r5
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e78:	075b      	lsls	r3, r3, #29
 8003e7a:	d50d      	bpl.n	8003e98 <UART_AdvFeatureConfig+0x78>
 8003e7c:	4d45      	ldr	r5, [pc, #276]	; (8003f94 <UART_AdvFeatureConfig+0x174>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e80:	422b      	tst	r3, r5
 8003e82:	d003      	beq.n	8003e8c <UART_AdvFeatureConfig+0x6c>
 8003e84:	4944      	ldr	r1, [pc, #272]	; (8003f98 <UART_AdvFeatureConfig+0x178>)
 8003e86:	483e      	ldr	r0, [pc, #248]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003e88:	f7fc fe35 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e8c:	6822      	ldr	r2, [r4, #0]
 8003e8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e90:	6853      	ldr	r3, [r2, #4]
 8003e92:	402b      	ands	r3, r5
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e9a:	071b      	lsls	r3, r3, #28
 8003e9c:	d50d      	bpl.n	8003eba <UART_AdvFeatureConfig+0x9a>
 8003e9e:	4d3f      	ldr	r5, [pc, #252]	; (8003f9c <UART_AdvFeatureConfig+0x17c>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ea2:	422b      	tst	r3, r5
 8003ea4:	d003      	beq.n	8003eae <UART_AdvFeatureConfig+0x8e>
 8003ea6:	493e      	ldr	r1, [pc, #248]	; (8003fa0 <UART_AdvFeatureConfig+0x180>)
 8003ea8:	4835      	ldr	r0, [pc, #212]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003eaa:	f7fc fe24 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eb2:	6853      	ldr	r3, [r2, #4]
 8003eb4:	402b      	ands	r3, r5
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ebc:	06db      	lsls	r3, r3, #27
 8003ebe:	d50d      	bpl.n	8003edc <UART_AdvFeatureConfig+0xbc>
 8003ec0:	4d38      	ldr	r5, [pc, #224]	; (8003fa4 <UART_AdvFeatureConfig+0x184>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ec4:	422b      	tst	r3, r5
 8003ec6:	d003      	beq.n	8003ed0 <UART_AdvFeatureConfig+0xb0>
 8003ec8:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <UART_AdvFeatureConfig+0x188>)
 8003eca:	482d      	ldr	r0, [pc, #180]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003ecc:	f7fc fe13 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ed4:	6893      	ldr	r3, [r2, #8]
 8003ed6:	402b      	ands	r3, r5
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ede:	069b      	lsls	r3, r3, #26
 8003ee0:	d50d      	bpl.n	8003efe <UART_AdvFeatureConfig+0xde>
 8003ee2:	4d32      	ldr	r5, [pc, #200]	; (8003fac <UART_AdvFeatureConfig+0x18c>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ee6:	422b      	tst	r3, r5
 8003ee8:	d003      	beq.n	8003ef2 <UART_AdvFeatureConfig+0xd2>
 8003eea:	4931      	ldr	r1, [pc, #196]	; (8003fb0 <UART_AdvFeatureConfig+0x190>)
 8003eec:	4824      	ldr	r0, [pc, #144]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003eee:	f7fc fe02 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003ef6:	6893      	ldr	r3, [r2, #8]
 8003ef8:	402b      	ands	r3, r5
 8003efa:	430b      	orrs	r3, r1
 8003efc:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f00:	065b      	lsls	r3, r3, #25
 8003f02:	d528      	bpl.n	8003f56 <UART_AdvFeatureConfig+0x136>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <UART_AdvFeatureConfig+0x194>)
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d003      	beq.n	8003f14 <UART_AdvFeatureConfig+0xf4>
 8003f0c:	492a      	ldr	r1, [pc, #168]	; (8003fb8 <UART_AdvFeatureConfig+0x198>)
 8003f0e:	481c      	ldr	r0, [pc, #112]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003f10:	f7fc fdf1 	bl	8000af6 <assert_failed>
 8003f14:	4d29      	ldr	r5, [pc, #164]	; (8003fbc <UART_AdvFeatureConfig+0x19c>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f18:	422b      	tst	r3, r5
 8003f1a:	d003      	beq.n	8003f24 <UART_AdvFeatureConfig+0x104>
 8003f1c:	4928      	ldr	r1, [pc, #160]	; (8003fc0 <UART_AdvFeatureConfig+0x1a0>)
 8003f1e:	4818      	ldr	r0, [pc, #96]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003f20:	f7fc fde9 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f28:	684b      	ldr	r3, [r1, #4]
 8003f2a:	402b      	ands	r3, r5
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	035b      	lsls	r3, r3, #13
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d10e      	bne.n	8003f56 <UART_AdvFeatureConfig+0x136>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <UART_AdvFeatureConfig+0x1a4>)
 8003f3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f3c:	421a      	tst	r2, r3
 8003f3e:	d003      	beq.n	8003f48 <UART_AdvFeatureConfig+0x128>
 8003f40:	4921      	ldr	r1, [pc, #132]	; (8003fc8 <UART_AdvFeatureConfig+0x1a8>)
 8003f42:	480f      	ldr	r0, [pc, #60]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003f44:	f7fc fdd7 	bl	8000af6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	4920      	ldr	r1, [pc, #128]	; (8003fcc <UART_AdvFeatureConfig+0x1ac>)
 8003f4c:	6853      	ldr	r3, [r2, #4]
 8003f4e:	400b      	ands	r3, r1
 8003f50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	d50d      	bpl.n	8003f78 <UART_AdvFeatureConfig+0x158>
 8003f5c:	4d1c      	ldr	r5, [pc, #112]	; (8003fd0 <UART_AdvFeatureConfig+0x1b0>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003f5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f60:	422b      	tst	r3, r5
 8003f62:	d003      	beq.n	8003f6c <UART_AdvFeatureConfig+0x14c>
 8003f64:	491b      	ldr	r1, [pc, #108]	; (8003fd4 <UART_AdvFeatureConfig+0x1b4>)
 8003f66:	4806      	ldr	r0, [pc, #24]	; (8003f80 <UART_AdvFeatureConfig+0x160>)
 8003f68:	f7fc fdc5 	bl	8000af6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f70:	6853      	ldr	r3, [r2, #4]
 8003f72:	402b      	ands	r3, r5
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6053      	str	r3, [r2, #4]
}
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	000008a9 	.word	0x000008a9
 8003f80:	08004f13 	.word	0x08004f13
 8003f84:	fffdffff 	.word	0xfffdffff
 8003f88:	000008ae 	.word	0x000008ae
 8003f8c:	fffeffff 	.word	0xfffeffff
 8003f90:	000008b5 	.word	0x000008b5
 8003f94:	fffbffff 	.word	0xfffbffff
 8003f98:	000008bc 	.word	0x000008bc
 8003f9c:	ffff7fff 	.word	0xffff7fff
 8003fa0:	000008c3 	.word	0x000008c3
 8003fa4:	ffffefff 	.word	0xffffefff
 8003fa8:	000008ca 	.word	0x000008ca
 8003fac:	ffffdfff 	.word	0xffffdfff
 8003fb0:	000008d1 	.word	0x000008d1
 8003fb4:	40013800 	.word	0x40013800
 8003fb8:	000008d8 	.word	0x000008d8
 8003fbc:	ffefffff 	.word	0xffefffff
 8003fc0:	000008d9 	.word	0x000008d9
 8003fc4:	ffdfffff 	.word	0xffdfffff
 8003fc8:	000008de 	.word	0x000008de
 8003fcc:	ff9fffff 	.word	0xff9fffff
 8003fd0:	fff7ffff 	.word	0xfff7ffff
 8003fd4:	000008e6 	.word	0x000008e6

08003fd8 <HAL_UART_Init>:
{
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
}
 8003fe0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003fe2:	6981      	ldr	r1, [r0, #24]
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <HAL_UART_Init+0x98>)
 8003fe6:	6802      	ldr	r2, [r0, #0]
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	d03b      	beq.n	8004064 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d004      	beq.n	8003ffa <HAL_UART_Init+0x22>
 8003ff0:	2197      	movs	r1, #151	; 0x97
 8003ff2:	0049      	lsls	r1, r1, #1
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003ff4:	481f      	ldr	r0, [pc, #124]	; (8004074 <HAL_UART_Init+0x9c>)
 8003ff6:	f7fc fd7e 	bl	8000af6 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003ffa:	0025      	movs	r5, r4
 8003ffc:	3569      	adds	r5, #105	; 0x69
 8003ffe:	782b      	ldrb	r3, [r5, #0]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <HAL_UART_Init+0x3a>
    huart->Lock = HAL_UNLOCKED;
 8004006:	0022      	movs	r2, r4
 8004008:	3268      	adds	r2, #104	; 0x68
 800400a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800400c:	0020      	movs	r0, r4
 800400e:	f7fd f8bf 	bl	8001190 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004012:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004014:	2101      	movs	r1, #1
 8004016:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004018:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800401a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800401c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800401e:	438b      	bics	r3, r1
 8004020:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004022:	f7ff fe11 	bl	8003c48 <UART_SetConfig>
 8004026:	2801      	cmp	r0, #1
 8004028:	d0d9      	beq.n	8003fde <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_Init+0x5e>
    UART_AdvFeatureConfig(huart);
 8004030:	0020      	movs	r0, r4
 8004032:	f7ff fef5 	bl	8003e20 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	490f      	ldr	r1, [pc, #60]	; (8004078 <HAL_UART_Init+0xa0>)
 800403a:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800403e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004040:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	438a      	bics	r2, r1
 8004048:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800404a:	2201      	movs	r2, #1
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004052:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8004054:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004056:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 800405a:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800405c:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800405e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8004060:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004062:	e7bd      	b.n	8003fe0 <HAL_UART_Init+0x8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004064:	429a      	cmp	r2, r3
 8004066:	d0c8      	beq.n	8003ffa <HAL_UART_Init+0x22>
 8004068:	2134      	movs	r1, #52	; 0x34
 800406a:	31ff      	adds	r1, #255	; 0xff
 800406c:	e7c2      	b.n	8003ff4 <HAL_UART_Init+0x1c>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	40013800 	.word	0x40013800
 8004074:	08004f13 	.word	0x08004f13
 8004078:	fffff7ff 	.word	0xfffff7ff

0800407c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407c:	0003      	movs	r3, r0
{
 800407e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004080:	3369      	adds	r3, #105	; 0x69
 8004082:	781b      	ldrb	r3, [r3, #0]
{
 8004084:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8004086:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004088:	2b21      	cmp	r3, #33	; 0x21
 800408a:	d10f      	bne.n	80040ac <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 800408c:	0014      	movs	r4, r2
 800408e:	3452      	adds	r4, #82	; 0x52
 8004090:	8823      	ldrh	r3, [r4, #0]
 8004092:	6811      	ldr	r1, [r2, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800409a:	680a      	ldr	r2, [r1, #0]
 800409c:	307e      	adds	r0, #126	; 0x7e
 800409e:	4382      	bics	r2, r0
 80040a0:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	4302      	orrs	r2, r0
 80040a8:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 80040aa:	2000      	movs	r0, #0
  }
}
 80040ac:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ae:	2080      	movs	r0, #128	; 0x80
 80040b0:	6895      	ldr	r5, [r2, #8]
 80040b2:	0140      	lsls	r0, r0, #5
 80040b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80040b6:	4285      	cmp	r5, r0
 80040b8:	d10d      	bne.n	80040d6 <UART_Transmit_IT+0x5a>
 80040ba:	6910      	ldr	r0, [r2, #16]
 80040bc:	2800      	cmp	r0, #0
 80040be:	d10a      	bne.n	80040d6 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80040c0:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 80040c2:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80040c4:	05c0      	lsls	r0, r0, #23
 80040c6:	0dc0      	lsrs	r0, r0, #23
 80040c8:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80040ca:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80040cc:	8823      	ldrh	r3, [r4, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	8023      	strh	r3, [r4, #0]
 80040d4:	e7e9      	b.n	80040aa <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80040d6:	1c58      	adds	r0, r3, #1
 80040d8:	64d0      	str	r0, [r2, #76]	; 0x4c
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	850b      	strh	r3, [r1, #40]	; 0x28
 80040de:	e7f5      	b.n	80040cc <UART_Transmit_IT+0x50>

080040e0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	6802      	ldr	r2, [r0, #0]
{
 80040e4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040e6:	6813      	ldr	r3, [r2, #0]
 80040e8:	438b      	bics	r3, r1
 80040ea:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ec:	0003      	movs	r3, r0
 80040ee:	2220      	movs	r2, #32
 80040f0:	3369      	adds	r3, #105	; 0x69
 80040f2:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80040f4:	f7fc fa26 	bl	8000544 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80040f8:	2000      	movs	r0, #0
 80040fa:	bd10      	pop	{r4, pc}

080040fc <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040fc:	0002      	movs	r2, r0
{
 80040fe:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004100:	326a      	adds	r2, #106	; 0x6a
 8004102:	7811      	ldrb	r1, [r2, #0]
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	2922      	cmp	r1, #34	; 0x22
 8004108:	d12d      	bne.n	8004166 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 800410a:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 800410e:	315c      	adds	r1, #92	; 0x5c
 8004110:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004112:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	0164      	lsls	r4, r4, #5
 8004116:	4029      	ands	r1, r5
 8004118:	6885      	ldr	r5, [r0, #8]
 800411a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800411c:	42a5      	cmp	r5, r4
 800411e:	d11e      	bne.n	800415e <UART_Receive_IT+0x62>
 8004120:	6904      	ldr	r4, [r0, #16]
 8004122:	2c00      	cmp	r4, #0
 8004124:	d11b      	bne.n	800415e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8004126:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8004128:	3302      	adds	r3, #2
 800412a:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 800412c:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800412e:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8004130:	315a      	adds	r1, #90	; 0x5a
 8004132:	880b      	ldrh	r3, [r1, #0]
 8004134:	3b01      	subs	r3, #1
 8004136:	b29b      	uxth	r3, r3
 8004138:	800b      	strh	r3, [r1, #0]
 800413a:	42a3      	cmp	r3, r4
 800413c:	d10d      	bne.n	800415a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	4d0c      	ldr	r5, [pc, #48]	; (8004174 <UART_Receive_IT+0x78>)
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	4029      	ands	r1, r5
 8004146:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	6899      	ldr	r1, [r3, #8]
 800414a:	3523      	adds	r5, #35	; 0x23
 800414c:	35ff      	adds	r5, #255	; 0xff
 800414e:	43a9      	bics	r1, r5
 8004150:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004152:	2320      	movs	r3, #32
 8004154:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8004156:	f7ff fd3d 	bl	8003bd4 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800415a:	0020      	movs	r0, r4
 800415c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800415e:	1c5c      	adds	r4, r3, #1
 8004160:	6544      	str	r4, [r0, #84]	; 0x54
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	e7e2      	b.n	800412c <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004166:	2208      	movs	r2, #8
 8004168:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800416a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800416c:	430a      	orrs	r2, r1
 800416e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8004170:	e7f3      	b.n	800415a <UART_Receive_IT+0x5e>
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	fffffedf 	.word	0xfffffedf

08004178 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004178:	220f      	movs	r2, #15
{
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800417e:	6800      	ldr	r0, [r0, #0]
 8004180:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004182:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004184:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8004186:	d108      	bne.n	800419a <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004188:	2520      	movs	r5, #32
 800418a:	422b      	tst	r3, r5
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0x22>
 800418e:	4229      	tst	r1, r5
 8004190:	d003      	beq.n	800419a <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8004192:	0020      	movs	r0, r4
 8004194:	f7ff ffb2 	bl	80040fc <UART_Receive_IT>
}
 8004198:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800419a:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 800419c:	2a00      	cmp	r2, #0
 800419e:	d060      	beq.n	8004262 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80041a0:	2201      	movs	r2, #1
 80041a2:	4015      	ands	r5, r2
 80041a4:	d103      	bne.n	80041ae <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80041a6:	2690      	movs	r6, #144	; 0x90
 80041a8:	0076      	lsls	r6, r6, #1
 80041aa:	4231      	tst	r1, r6
 80041ac:	d059      	beq.n	8004262 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041ae:	4213      	tst	r3, r2
 80041b0:	d005      	beq.n	80041be <HAL_UART_IRQHandler+0x46>
 80041b2:	05ce      	lsls	r6, r1, #23
 80041b4:	d503      	bpl.n	80041be <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80041b6:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80041ba:	4332      	orrs	r2, r6
 80041bc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041be:	2202      	movs	r2, #2
 80041c0:	4213      	tst	r3, r2
 80041c2:	d006      	beq.n	80041d2 <HAL_UART_IRQHandler+0x5a>
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80041c8:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ca:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80041cc:	1892      	adds	r2, r2, r2
 80041ce:	4332      	orrs	r2, r6
 80041d0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041d2:	2204      	movs	r2, #4
 80041d4:	4213      	tst	r3, r2
 80041d6:	d006      	beq.n	80041e6 <HAL_UART_IRQHandler+0x6e>
 80041d8:	2d00      	cmp	r5, #0
 80041da:	d004      	beq.n	80041e6 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80041dc:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041de:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80041e0:	3a02      	subs	r2, #2
 80041e2:	4332      	orrs	r2, r6
 80041e4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80041e6:	071a      	lsls	r2, r3, #28
 80041e8:	d508      	bpl.n	80041fc <HAL_UART_IRQHandler+0x84>
 80041ea:	068a      	lsls	r2, r1, #26
 80041ec:	d401      	bmi.n	80041f2 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	d004      	beq.n	80041fc <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80041f2:	2208      	movs	r2, #8
 80041f4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80041f8:	4302      	orrs	r2, r0
 80041fa:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80041fe:	2a00      	cmp	r2, #0
 8004200:	d0ca      	beq.n	8004198 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004202:	2220      	movs	r2, #32
 8004204:	4213      	tst	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_UART_IRQHandler+0x9a>
 8004208:	4211      	tst	r1, r2
 800420a:	d002      	beq.n	8004212 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 800420c:	0020      	movs	r0, r4
 800420e:	f7ff ff75 	bl	80040fc <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004212:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8004214:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004216:	071b      	lsls	r3, r3, #28
 8004218:	d404      	bmi.n	8004224 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	689d      	ldr	r5, [r3, #8]
 800421e:	2340      	movs	r3, #64	; 0x40
 8004220:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004222:	d01a      	beq.n	800425a <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8004224:	f7ff fc62 	bl	8003aec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	420a      	tst	r2, r1
 8004230:	d00f      	beq.n	8004252 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8004234:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	438a      	bics	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800423a:	2800      	cmp	r0, #0
 800423c:	d009      	beq.n	8004252 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_UART_IRQHandler+0x114>)
 8004240:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004242:	f7fd fc81 	bl	8001b48 <HAL_DMA_Abort_IT>
 8004246:	2800      	cmp	r0, #0
 8004248:	d0a6      	beq.n	8004198 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800424a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800424c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800424e:	4798      	blx	r3
 8004250:	e7a2      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8004252:	0020      	movs	r0, r4
 8004254:	f7ff fcbf 	bl	8003bd6 <HAL_UART_ErrorCallback>
 8004258:	e79e      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 800425a:	f7ff fcbc 	bl	8003bd6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8004260:	e79a      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004262:	2280      	movs	r2, #128	; 0x80
 8004264:	4213      	tst	r3, r2
 8004266:	d005      	beq.n	8004274 <HAL_UART_IRQHandler+0xfc>
 8004268:	4211      	tst	r1, r2
 800426a:	d003      	beq.n	8004274 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 800426c:	0020      	movs	r0, r4
 800426e:	f7ff ff05 	bl	800407c <UART_Transmit_IT>
    return;
 8004272:	e791      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004274:	2240      	movs	r2, #64	; 0x40
 8004276:	4213      	tst	r3, r2
 8004278:	d100      	bne.n	800427c <HAL_UART_IRQHandler+0x104>
 800427a:	e78d      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
 800427c:	4211      	tst	r1, r2
 800427e:	d100      	bne.n	8004282 <HAL_UART_IRQHandler+0x10a>
 8004280:	e78a      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8004282:	0020      	movs	r0, r4
 8004284:	f7ff ff2c 	bl	80040e0 <UART_EndTransmit_IT>
    return;
 8004288:	e786      	b.n	8004198 <HAL_UART_IRQHandler+0x20>
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	08003c33 	.word	0x08003c33

08004290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004294:	480d      	ldr	r0, [pc, #52]	; (80042cc <LoopForever+0x6>)
  ldr r1, =_edata
 8004296:	490e      	ldr	r1, [pc, #56]	; (80042d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004298:	4a0e      	ldr	r2, [pc, #56]	; (80042d4 <LoopForever+0xe>)
  movs r3, #0
 800429a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800429c:	e002      	b.n	80042a4 <LoopCopyDataInit>

0800429e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a2:	3304      	adds	r3, #4

080042a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a8:	d3f9      	bcc.n	800429e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042aa:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042ac:	4c0b      	ldr	r4, [pc, #44]	; (80042dc <LoopForever+0x16>)
  movs r3, #0
 80042ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b0:	e001      	b.n	80042b6 <LoopFillZerobss>

080042b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b4:	3204      	adds	r2, #4

080042b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b8:	d3fb      	bcc.n	80042b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042ba:	f7fc fd51 	bl	8000d60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80042be:	f000 f811 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042c2:	f7fc faf9 	bl	80008b8 <main>

080042c6 <LoopForever>:

LoopForever:
    b LoopForever
 80042c6:	e7fe      	b.n	80042c6 <LoopForever>
  ldr   r0, =_estack
 80042c8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80042cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80042d4:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 80042d8:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80042dc:	2000061c 	.word	0x2000061c

080042e0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042e0:	e7fe      	b.n	80042e0 <DMA1_Channel1_IRQHandler>
	...

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	2600      	movs	r6, #0
 80042e8:	4d0c      	ldr	r5, [pc, #48]	; (800431c <__libc_init_array+0x38>)
 80042ea:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ec:	1b64      	subs	r4, r4, r5
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	2600      	movs	r6, #0
 80042f6:	f000 fc69 	bl	8004bcc <_init>
 80042fa:	4d0a      	ldr	r5, [pc, #40]	; (8004324 <__libc_init_array+0x40>)
 80042fc:	4c0a      	ldr	r4, [pc, #40]	; (8004328 <__libc_init_array+0x44>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	00b3      	lsls	r3, r6, #2
 800430a:	58eb      	ldr	r3, [r5, r3]
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	00b3      	lsls	r3, r6, #2
 8004314:	58eb      	ldr	r3, [r5, r3]
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004f80 	.word	0x08004f80
 8004320:	08004f80 	.word	0x08004f80
 8004324:	08004f80 	.word	0x08004f80
 8004328:	08004f84 	.word	0x08004f84

0800432c <memcpy>:
 800432c:	2300      	movs	r3, #0
 800432e:	b510      	push	{r4, lr}
 8004330:	429a      	cmp	r2, r3
 8004332:	d100      	bne.n	8004336 <memcpy+0xa>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	5ccc      	ldrb	r4, [r1, r3]
 8004338:	54c4      	strb	r4, [r0, r3]
 800433a:	3301      	adds	r3, #1
 800433c:	e7f8      	b.n	8004330 <memcpy+0x4>

0800433e <memset>:
 800433e:	0003      	movs	r3, r0
 8004340:	1882      	adds	r2, r0, r2
 8004342:	4293      	cmp	r3, r2
 8004344:	d100      	bne.n	8004348 <memset+0xa>
 8004346:	4770      	bx	lr
 8004348:	7019      	strb	r1, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	e7f9      	b.n	8004342 <memset+0x4>
	...

08004350 <siprintf>:
 8004350:	b40e      	push	{r1, r2, r3}
 8004352:	b510      	push	{r4, lr}
 8004354:	b09d      	sub	sp, #116	; 0x74
 8004356:	a902      	add	r1, sp, #8
 8004358:	9002      	str	r0, [sp, #8]
 800435a:	6108      	str	r0, [r1, #16]
 800435c:	480b      	ldr	r0, [pc, #44]	; (800438c <siprintf+0x3c>)
 800435e:	2482      	movs	r4, #130	; 0x82
 8004360:	6088      	str	r0, [r1, #8]
 8004362:	6148      	str	r0, [r1, #20]
 8004364:	2001      	movs	r0, #1
 8004366:	4240      	negs	r0, r0
 8004368:	ab1f      	add	r3, sp, #124	; 0x7c
 800436a:	81c8      	strh	r0, [r1, #14]
 800436c:	4808      	ldr	r0, [pc, #32]	; (8004390 <siprintf+0x40>)
 800436e:	cb04      	ldmia	r3!, {r2}
 8004370:	00a4      	lsls	r4, r4, #2
 8004372:	6800      	ldr	r0, [r0, #0]
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	818c      	strh	r4, [r1, #12]
 8004378:	f000 f884 	bl	8004484 <_svfiprintf_r>
 800437c:	2300      	movs	r3, #0
 800437e:	9a02      	ldr	r2, [sp, #8]
 8004380:	7013      	strb	r3, [r2, #0]
 8004382:	b01d      	add	sp, #116	; 0x74
 8004384:	bc10      	pop	{r4}
 8004386:	bc08      	pop	{r3}
 8004388:	b003      	add	sp, #12
 800438a:	4718      	bx	r3
 800438c:	7fffffff 	.word	0x7fffffff
 8004390:	200001e8 	.word	0x200001e8

08004394 <strcat>:
 8004394:	0002      	movs	r2, r0
 8004396:	b510      	push	{r4, lr}
 8004398:	7813      	ldrb	r3, [r2, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d105      	bne.n	80043aa <strcat+0x16>
 800439e:	5ccc      	ldrb	r4, [r1, r3]
 80043a0:	54d4      	strb	r4, [r2, r3]
 80043a2:	3301      	adds	r3, #1
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	d1fa      	bne.n	800439e <strcat+0xa>
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	3201      	adds	r2, #1
 80043ac:	e7f4      	b.n	8004398 <strcat+0x4>

080043ae <strcpy>:
 80043ae:	1c03      	adds	r3, r0, #0
 80043b0:	780a      	ldrb	r2, [r1, #0]
 80043b2:	3101      	adds	r1, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	3301      	adds	r3, #1
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d1f9      	bne.n	80043b0 <strcpy+0x2>
 80043bc:	4770      	bx	lr
	...

080043c0 <__ssputs_r>:
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	688e      	ldr	r6, [r1, #8]
 80043c4:	b085      	sub	sp, #20
 80043c6:	0007      	movs	r7, r0
 80043c8:	000c      	movs	r4, r1
 80043ca:	9203      	str	r2, [sp, #12]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	429e      	cmp	r6, r3
 80043d0:	d839      	bhi.n	8004446 <__ssputs_r+0x86>
 80043d2:	2390      	movs	r3, #144	; 0x90
 80043d4:	898a      	ldrh	r2, [r1, #12]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	421a      	tst	r2, r3
 80043da:	d034      	beq.n	8004446 <__ssputs_r+0x86>
 80043dc:	2503      	movs	r5, #3
 80043de:	6909      	ldr	r1, [r1, #16]
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	1a5b      	subs	r3, r3, r1
 80043e4:	9302      	str	r3, [sp, #8]
 80043e6:	6963      	ldr	r3, [r4, #20]
 80043e8:	9802      	ldr	r0, [sp, #8]
 80043ea:	435d      	muls	r5, r3
 80043ec:	0feb      	lsrs	r3, r5, #31
 80043ee:	195d      	adds	r5, r3, r5
 80043f0:	9b01      	ldr	r3, [sp, #4]
 80043f2:	106d      	asrs	r5, r5, #1
 80043f4:	3301      	adds	r3, #1
 80043f6:	181b      	adds	r3, r3, r0
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	d900      	bls.n	80043fe <__ssputs_r+0x3e>
 80043fc:	001d      	movs	r5, r3
 80043fe:	0553      	lsls	r3, r2, #21
 8004400:	d532      	bpl.n	8004468 <__ssputs_r+0xa8>
 8004402:	0029      	movs	r1, r5
 8004404:	0038      	movs	r0, r7
 8004406:	f000 fb31 	bl	8004a6c <_malloc_r>
 800440a:	1e06      	subs	r6, r0, #0
 800440c:	d109      	bne.n	8004422 <__ssputs_r+0x62>
 800440e:	230c      	movs	r3, #12
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	2001      	movs	r0, #1
 8004416:	89a2      	ldrh	r2, [r4, #12]
 8004418:	4240      	negs	r0, r0
 800441a:	4313      	orrs	r3, r2
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	b005      	add	sp, #20
 8004420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004422:	9a02      	ldr	r2, [sp, #8]
 8004424:	6921      	ldr	r1, [r4, #16]
 8004426:	f7ff ff81 	bl	800432c <memcpy>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <__ssputs_r+0xc0>)
 800442e:	401a      	ands	r2, r3
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	4313      	orrs	r3, r2
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	6126      	str	r6, [r4, #16]
 800443a:	18f6      	adds	r6, r6, r3
 800443c:	6026      	str	r6, [r4, #0]
 800443e:	6165      	str	r5, [r4, #20]
 8004440:	9e01      	ldr	r6, [sp, #4]
 8004442:	1aed      	subs	r5, r5, r3
 8004444:	60a5      	str	r5, [r4, #8]
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	42b3      	cmp	r3, r6
 800444a:	d200      	bcs.n	800444e <__ssputs_r+0x8e>
 800444c:	001e      	movs	r6, r3
 800444e:	0032      	movs	r2, r6
 8004450:	9903      	ldr	r1, [sp, #12]
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	f000 faad 	bl	80049b2 <memmove>
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	2000      	movs	r0, #0
 800445c:	1b9b      	subs	r3, r3, r6
 800445e:	60a3      	str	r3, [r4, #8]
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	199e      	adds	r6, r3, r6
 8004464:	6026      	str	r6, [r4, #0]
 8004466:	e7da      	b.n	800441e <__ssputs_r+0x5e>
 8004468:	002a      	movs	r2, r5
 800446a:	0038      	movs	r0, r7
 800446c:	f000 fb5c 	bl	8004b28 <_realloc_r>
 8004470:	1e06      	subs	r6, r0, #0
 8004472:	d1e0      	bne.n	8004436 <__ssputs_r+0x76>
 8004474:	6921      	ldr	r1, [r4, #16]
 8004476:	0038      	movs	r0, r7
 8004478:	f000 faae 	bl	80049d8 <_free_r>
 800447c:	e7c7      	b.n	800440e <__ssputs_r+0x4e>
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	fffffb7f 	.word	0xfffffb7f

08004484 <_svfiprintf_r>:
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004486:	b09f      	sub	sp, #124	; 0x7c
 8004488:	9002      	str	r0, [sp, #8]
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	898b      	ldrh	r3, [r1, #12]
 800448e:	000f      	movs	r7, r1
 8004490:	0016      	movs	r6, r2
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	d511      	bpl.n	80044ba <_svfiprintf_r+0x36>
 8004496:	690b      	ldr	r3, [r1, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10e      	bne.n	80044ba <_svfiprintf_r+0x36>
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	f000 fae5 	bl	8004a6c <_malloc_r>
 80044a2:	6038      	str	r0, [r7, #0]
 80044a4:	6138      	str	r0, [r7, #16]
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d105      	bne.n	80044b6 <_svfiprintf_r+0x32>
 80044aa:	230c      	movs	r3, #12
 80044ac:	9a02      	ldr	r2, [sp, #8]
 80044ae:	3801      	subs	r0, #1
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	b01f      	add	sp, #124	; 0x7c
 80044b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b6:	2340      	movs	r3, #64	; 0x40
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	2300      	movs	r3, #0
 80044bc:	ad06      	add	r5, sp, #24
 80044be:	616b      	str	r3, [r5, #20]
 80044c0:	3320      	adds	r3, #32
 80044c2:	766b      	strb	r3, [r5, #25]
 80044c4:	3310      	adds	r3, #16
 80044c6:	76ab      	strb	r3, [r5, #26]
 80044c8:	0034      	movs	r4, r6
 80044ca:	7823      	ldrb	r3, [r4, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d147      	bne.n	8004560 <_svfiprintf_r+0xdc>
 80044d0:	1ba3      	subs	r3, r4, r6
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	d00d      	beq.n	80044f2 <_svfiprintf_r+0x6e>
 80044d6:	1ba3      	subs	r3, r4, r6
 80044d8:	0032      	movs	r2, r6
 80044da:	0039      	movs	r1, r7
 80044dc:	9802      	ldr	r0, [sp, #8]
 80044de:	f7ff ff6f 	bl	80043c0 <__ssputs_r>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d100      	bne.n	80044e8 <_svfiprintf_r+0x64>
 80044e6:	e0b5      	b.n	8004654 <_svfiprintf_r+0x1d0>
 80044e8:	696a      	ldr	r2, [r5, #20]
 80044ea:	9b04      	ldr	r3, [sp, #16]
 80044ec:	4694      	mov	ip, r2
 80044ee:	4463      	add	r3, ip
 80044f0:	616b      	str	r3, [r5, #20]
 80044f2:	7823      	ldrb	r3, [r4, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d100      	bne.n	80044fa <_svfiprintf_r+0x76>
 80044f8:	e0ac      	b.n	8004654 <_svfiprintf_r+0x1d0>
 80044fa:	2201      	movs	r2, #1
 80044fc:	2300      	movs	r3, #0
 80044fe:	4252      	negs	r2, r2
 8004500:	606a      	str	r2, [r5, #4]
 8004502:	a902      	add	r1, sp, #8
 8004504:	3254      	adds	r2, #84	; 0x54
 8004506:	1852      	adds	r2, r2, r1
 8004508:	3401      	adds	r4, #1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	60eb      	str	r3, [r5, #12]
 800450e:	60ab      	str	r3, [r5, #8]
 8004510:	7013      	strb	r3, [r2, #0]
 8004512:	65ab      	str	r3, [r5, #88]	; 0x58
 8004514:	4e58      	ldr	r6, [pc, #352]	; (8004678 <_svfiprintf_r+0x1f4>)
 8004516:	2205      	movs	r2, #5
 8004518:	7821      	ldrb	r1, [r4, #0]
 800451a:	0030      	movs	r0, r6
 800451c:	f000 fa3e 	bl	800499c <memchr>
 8004520:	1c62      	adds	r2, r4, #1
 8004522:	2800      	cmp	r0, #0
 8004524:	d120      	bne.n	8004568 <_svfiprintf_r+0xe4>
 8004526:	6829      	ldr	r1, [r5, #0]
 8004528:	06cb      	lsls	r3, r1, #27
 800452a:	d504      	bpl.n	8004536 <_svfiprintf_r+0xb2>
 800452c:	2353      	movs	r3, #83	; 0x53
 800452e:	ae02      	add	r6, sp, #8
 8004530:	3020      	adds	r0, #32
 8004532:	199b      	adds	r3, r3, r6
 8004534:	7018      	strb	r0, [r3, #0]
 8004536:	070b      	lsls	r3, r1, #28
 8004538:	d504      	bpl.n	8004544 <_svfiprintf_r+0xc0>
 800453a:	2353      	movs	r3, #83	; 0x53
 800453c:	202b      	movs	r0, #43	; 0x2b
 800453e:	ae02      	add	r6, sp, #8
 8004540:	199b      	adds	r3, r3, r6
 8004542:	7018      	strb	r0, [r3, #0]
 8004544:	7823      	ldrb	r3, [r4, #0]
 8004546:	2b2a      	cmp	r3, #42	; 0x2a
 8004548:	d016      	beq.n	8004578 <_svfiprintf_r+0xf4>
 800454a:	2000      	movs	r0, #0
 800454c:	210a      	movs	r1, #10
 800454e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004550:	7822      	ldrb	r2, [r4, #0]
 8004552:	3a30      	subs	r2, #48	; 0x30
 8004554:	2a09      	cmp	r2, #9
 8004556:	d955      	bls.n	8004604 <_svfiprintf_r+0x180>
 8004558:	2800      	cmp	r0, #0
 800455a:	d015      	beq.n	8004588 <_svfiprintf_r+0x104>
 800455c:	9309      	str	r3, [sp, #36]	; 0x24
 800455e:	e013      	b.n	8004588 <_svfiprintf_r+0x104>
 8004560:	2b25      	cmp	r3, #37	; 0x25
 8004562:	d0b5      	beq.n	80044d0 <_svfiprintf_r+0x4c>
 8004564:	3401      	adds	r4, #1
 8004566:	e7b0      	b.n	80044ca <_svfiprintf_r+0x46>
 8004568:	2301      	movs	r3, #1
 800456a:	1b80      	subs	r0, r0, r6
 800456c:	4083      	lsls	r3, r0
 800456e:	6829      	ldr	r1, [r5, #0]
 8004570:	0014      	movs	r4, r2
 8004572:	430b      	orrs	r3, r1
 8004574:	602b      	str	r3, [r5, #0]
 8004576:	e7cd      	b.n	8004514 <_svfiprintf_r+0x90>
 8004578:	9b05      	ldr	r3, [sp, #20]
 800457a:	1d18      	adds	r0, r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	9005      	str	r0, [sp, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db39      	blt.n	80045f8 <_svfiprintf_r+0x174>
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
 8004586:	0014      	movs	r4, r2
 8004588:	7823      	ldrb	r3, [r4, #0]
 800458a:	2b2e      	cmp	r3, #46	; 0x2e
 800458c:	d10b      	bne.n	80045a6 <_svfiprintf_r+0x122>
 800458e:	7863      	ldrb	r3, [r4, #1]
 8004590:	1c62      	adds	r2, r4, #1
 8004592:	2b2a      	cmp	r3, #42	; 0x2a
 8004594:	d13e      	bne.n	8004614 <_svfiprintf_r+0x190>
 8004596:	9b05      	ldr	r3, [sp, #20]
 8004598:	3402      	adds	r4, #2
 800459a:	1d1a      	adds	r2, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	9205      	str	r2, [sp, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db34      	blt.n	800460e <_svfiprintf_r+0x18a>
 80045a4:	9307      	str	r3, [sp, #28]
 80045a6:	4e35      	ldr	r6, [pc, #212]	; (800467c <_svfiprintf_r+0x1f8>)
 80045a8:	7821      	ldrb	r1, [r4, #0]
 80045aa:	2203      	movs	r2, #3
 80045ac:	0030      	movs	r0, r6
 80045ae:	f000 f9f5 	bl	800499c <memchr>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d006      	beq.n	80045c4 <_svfiprintf_r+0x140>
 80045b6:	2340      	movs	r3, #64	; 0x40
 80045b8:	1b80      	subs	r0, r0, r6
 80045ba:	4083      	lsls	r3, r0
 80045bc:	682a      	ldr	r2, [r5, #0]
 80045be:	3401      	adds	r4, #1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	602b      	str	r3, [r5, #0]
 80045c4:	7821      	ldrb	r1, [r4, #0]
 80045c6:	2206      	movs	r2, #6
 80045c8:	482d      	ldr	r0, [pc, #180]	; (8004680 <_svfiprintf_r+0x1fc>)
 80045ca:	1c66      	adds	r6, r4, #1
 80045cc:	7629      	strb	r1, [r5, #24]
 80045ce:	f000 f9e5 	bl	800499c <memchr>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d046      	beq.n	8004664 <_svfiprintf_r+0x1e0>
 80045d6:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <_svfiprintf_r+0x200>)
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d12f      	bne.n	800463c <_svfiprintf_r+0x1b8>
 80045dc:	6829      	ldr	r1, [r5, #0]
 80045de:	9b05      	ldr	r3, [sp, #20]
 80045e0:	2207      	movs	r2, #7
 80045e2:	05c9      	lsls	r1, r1, #23
 80045e4:	d528      	bpl.n	8004638 <_svfiprintf_r+0x1b4>
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	4393      	bics	r3, r2
 80045ea:	3308      	adds	r3, #8
 80045ec:	9305      	str	r3, [sp, #20]
 80045ee:	696b      	ldr	r3, [r5, #20]
 80045f0:	9a03      	ldr	r2, [sp, #12]
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	616b      	str	r3, [r5, #20]
 80045f6:	e767      	b.n	80044c8 <_svfiprintf_r+0x44>
 80045f8:	425b      	negs	r3, r3
 80045fa:	60eb      	str	r3, [r5, #12]
 80045fc:	2302      	movs	r3, #2
 80045fe:	430b      	orrs	r3, r1
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	e7c0      	b.n	8004586 <_svfiprintf_r+0x102>
 8004604:	434b      	muls	r3, r1
 8004606:	3401      	adds	r4, #1
 8004608:	189b      	adds	r3, r3, r2
 800460a:	2001      	movs	r0, #1
 800460c:	e7a0      	b.n	8004550 <_svfiprintf_r+0xcc>
 800460e:	2301      	movs	r3, #1
 8004610:	425b      	negs	r3, r3
 8004612:	e7c7      	b.n	80045a4 <_svfiprintf_r+0x120>
 8004614:	2300      	movs	r3, #0
 8004616:	0014      	movs	r4, r2
 8004618:	200a      	movs	r0, #10
 800461a:	001a      	movs	r2, r3
 800461c:	606b      	str	r3, [r5, #4]
 800461e:	7821      	ldrb	r1, [r4, #0]
 8004620:	3930      	subs	r1, #48	; 0x30
 8004622:	2909      	cmp	r1, #9
 8004624:	d903      	bls.n	800462e <_svfiprintf_r+0x1aa>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0bd      	beq.n	80045a6 <_svfiprintf_r+0x122>
 800462a:	9207      	str	r2, [sp, #28]
 800462c:	e7bb      	b.n	80045a6 <_svfiprintf_r+0x122>
 800462e:	4342      	muls	r2, r0
 8004630:	3401      	adds	r4, #1
 8004632:	1852      	adds	r2, r2, r1
 8004634:	2301      	movs	r3, #1
 8004636:	e7f2      	b.n	800461e <_svfiprintf_r+0x19a>
 8004638:	3307      	adds	r3, #7
 800463a:	e7d5      	b.n	80045e8 <_svfiprintf_r+0x164>
 800463c:	ab05      	add	r3, sp, #20
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	003a      	movs	r2, r7
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <_svfiprintf_r+0x204>)
 8004644:	0029      	movs	r1, r5
 8004646:	9802      	ldr	r0, [sp, #8]
 8004648:	e000      	b.n	800464c <_svfiprintf_r+0x1c8>
 800464a:	bf00      	nop
 800464c:	9003      	str	r0, [sp, #12]
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	d1cc      	bne.n	80045ee <_svfiprintf_r+0x16a>
 8004654:	89bb      	ldrh	r3, [r7, #12]
 8004656:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004658:	065b      	lsls	r3, r3, #25
 800465a:	d400      	bmi.n	800465e <_svfiprintf_r+0x1da>
 800465c:	e729      	b.n	80044b2 <_svfiprintf_r+0x2e>
 800465e:	2001      	movs	r0, #1
 8004660:	4240      	negs	r0, r0
 8004662:	e726      	b.n	80044b2 <_svfiprintf_r+0x2e>
 8004664:	ab05      	add	r3, sp, #20
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	003a      	movs	r2, r7
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <_svfiprintf_r+0x204>)
 800466c:	0029      	movs	r1, r5
 800466e:	9802      	ldr	r0, [sp, #8]
 8004670:	f000 f87a 	bl	8004768 <_printf_i>
 8004674:	e7ea      	b.n	800464c <_svfiprintf_r+0x1c8>
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	08004f4c 	.word	0x08004f4c
 800467c:	08004f52 	.word	0x08004f52
 8004680:	08004f56 	.word	0x08004f56
 8004684:	00000000 	.word	0x00000000
 8004688:	080043c1 	.word	0x080043c1

0800468c <_printf_common>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	0015      	movs	r5, r2
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	688a      	ldr	r2, [r1, #8]
 8004694:	690b      	ldr	r3, [r1, #16]
 8004696:	9000      	str	r0, [sp, #0]
 8004698:	000c      	movs	r4, r1
 800469a:	4293      	cmp	r3, r2
 800469c:	da00      	bge.n	80046a0 <_printf_common+0x14>
 800469e:	0013      	movs	r3, r2
 80046a0:	0022      	movs	r2, r4
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	3243      	adds	r2, #67	; 0x43
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d001      	beq.n	80046b0 <_printf_common+0x24>
 80046ac:	3301      	adds	r3, #1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	d502      	bpl.n	80046bc <_printf_common+0x30>
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	3302      	adds	r3, #2
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	2706      	movs	r7, #6
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	401f      	ands	r7, r3
 80046c2:	d027      	beq.n	8004714 <_printf_common+0x88>
 80046c4:	0023      	movs	r3, r4
 80046c6:	3343      	adds	r3, #67	; 0x43
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	4193      	sbcs	r3, r2
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	0692      	lsls	r2, r2, #26
 80046d2:	d430      	bmi.n	8004736 <_printf_common+0xaa>
 80046d4:	0022      	movs	r2, r4
 80046d6:	9901      	ldr	r1, [sp, #4]
 80046d8:	3243      	adds	r2, #67	; 0x43
 80046da:	9800      	ldr	r0, [sp, #0]
 80046dc:	9e08      	ldr	r6, [sp, #32]
 80046de:	47b0      	blx	r6
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d025      	beq.n	8004730 <_printf_common+0xa4>
 80046e4:	2306      	movs	r3, #6
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	682a      	ldr	r2, [r5, #0]
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	4003      	ands	r3, r0
 80046ee:	2500      	movs	r5, #0
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d103      	bne.n	80046fc <_printf_common+0x70>
 80046f4:	1a8d      	subs	r5, r1, r2
 80046f6:	43eb      	mvns	r3, r5
 80046f8:	17db      	asrs	r3, r3, #31
 80046fa:	401d      	ands	r5, r3
 80046fc:	68a3      	ldr	r3, [r4, #8]
 80046fe:	6922      	ldr	r2, [r4, #16]
 8004700:	4293      	cmp	r3, r2
 8004702:	dd01      	ble.n	8004708 <_printf_common+0x7c>
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	18ed      	adds	r5, r5, r3
 8004708:	2700      	movs	r7, #0
 800470a:	42bd      	cmp	r5, r7
 800470c:	d120      	bne.n	8004750 <_printf_common+0xc4>
 800470e:	2000      	movs	r0, #0
 8004710:	e010      	b.n	8004734 <_printf_common+0xa8>
 8004712:	3701      	adds	r7, #1
 8004714:	68e3      	ldr	r3, [r4, #12]
 8004716:	682a      	ldr	r2, [r5, #0]
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	429f      	cmp	r7, r3
 800471c:	dad2      	bge.n	80046c4 <_printf_common+0x38>
 800471e:	0022      	movs	r2, r4
 8004720:	2301      	movs	r3, #1
 8004722:	3219      	adds	r2, #25
 8004724:	9901      	ldr	r1, [sp, #4]
 8004726:	9800      	ldr	r0, [sp, #0]
 8004728:	9e08      	ldr	r6, [sp, #32]
 800472a:	47b0      	blx	r6
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d1f0      	bne.n	8004712 <_printf_common+0x86>
 8004730:	2001      	movs	r0, #1
 8004732:	4240      	negs	r0, r0
 8004734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004736:	2030      	movs	r0, #48	; 0x30
 8004738:	18e1      	adds	r1, r4, r3
 800473a:	3143      	adds	r1, #67	; 0x43
 800473c:	7008      	strb	r0, [r1, #0]
 800473e:	0021      	movs	r1, r4
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	3145      	adds	r1, #69	; 0x45
 8004744:	7809      	ldrb	r1, [r1, #0]
 8004746:	18a2      	adds	r2, r4, r2
 8004748:	3243      	adds	r2, #67	; 0x43
 800474a:	3302      	adds	r3, #2
 800474c:	7011      	strb	r1, [r2, #0]
 800474e:	e7c1      	b.n	80046d4 <_printf_common+0x48>
 8004750:	0022      	movs	r2, r4
 8004752:	2301      	movs	r3, #1
 8004754:	321a      	adds	r2, #26
 8004756:	9901      	ldr	r1, [sp, #4]
 8004758:	9800      	ldr	r0, [sp, #0]
 800475a:	9e08      	ldr	r6, [sp, #32]
 800475c:	47b0      	blx	r6
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	d0e6      	beq.n	8004730 <_printf_common+0xa4>
 8004762:	3701      	adds	r7, #1
 8004764:	e7d1      	b.n	800470a <_printf_common+0x7e>
	...

08004768 <_printf_i>:
 8004768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476a:	b08b      	sub	sp, #44	; 0x2c
 800476c:	9206      	str	r2, [sp, #24]
 800476e:	000a      	movs	r2, r1
 8004770:	3243      	adds	r2, #67	; 0x43
 8004772:	9307      	str	r3, [sp, #28]
 8004774:	9005      	str	r0, [sp, #20]
 8004776:	9204      	str	r2, [sp, #16]
 8004778:	7e0a      	ldrb	r2, [r1, #24]
 800477a:	000c      	movs	r4, r1
 800477c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800477e:	2a6e      	cmp	r2, #110	; 0x6e
 8004780:	d100      	bne.n	8004784 <_printf_i+0x1c>
 8004782:	e08f      	b.n	80048a4 <_printf_i+0x13c>
 8004784:	d817      	bhi.n	80047b6 <_printf_i+0x4e>
 8004786:	2a63      	cmp	r2, #99	; 0x63
 8004788:	d02c      	beq.n	80047e4 <_printf_i+0x7c>
 800478a:	d808      	bhi.n	800479e <_printf_i+0x36>
 800478c:	2a00      	cmp	r2, #0
 800478e:	d100      	bne.n	8004792 <_printf_i+0x2a>
 8004790:	e099      	b.n	80048c6 <_printf_i+0x15e>
 8004792:	2a58      	cmp	r2, #88	; 0x58
 8004794:	d054      	beq.n	8004840 <_printf_i+0xd8>
 8004796:	0026      	movs	r6, r4
 8004798:	3642      	adds	r6, #66	; 0x42
 800479a:	7032      	strb	r2, [r6, #0]
 800479c:	e029      	b.n	80047f2 <_printf_i+0x8a>
 800479e:	2a64      	cmp	r2, #100	; 0x64
 80047a0:	d001      	beq.n	80047a6 <_printf_i+0x3e>
 80047a2:	2a69      	cmp	r2, #105	; 0x69
 80047a4:	d1f7      	bne.n	8004796 <_printf_i+0x2e>
 80047a6:	6821      	ldr	r1, [r4, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	0608      	lsls	r0, r1, #24
 80047ac:	d523      	bpl.n	80047f6 <_printf_i+0x8e>
 80047ae:	1d11      	adds	r1, r2, #4
 80047b0:	6019      	str	r1, [r3, #0]
 80047b2:	6815      	ldr	r5, [r2, #0]
 80047b4:	e025      	b.n	8004802 <_printf_i+0x9a>
 80047b6:	2a73      	cmp	r2, #115	; 0x73
 80047b8:	d100      	bne.n	80047bc <_printf_i+0x54>
 80047ba:	e088      	b.n	80048ce <_printf_i+0x166>
 80047bc:	d808      	bhi.n	80047d0 <_printf_i+0x68>
 80047be:	2a6f      	cmp	r2, #111	; 0x6f
 80047c0:	d029      	beq.n	8004816 <_printf_i+0xae>
 80047c2:	2a70      	cmp	r2, #112	; 0x70
 80047c4:	d1e7      	bne.n	8004796 <_printf_i+0x2e>
 80047c6:	2220      	movs	r2, #32
 80047c8:	6809      	ldr	r1, [r1, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	6022      	str	r2, [r4, #0]
 80047ce:	e003      	b.n	80047d8 <_printf_i+0x70>
 80047d0:	2a75      	cmp	r2, #117	; 0x75
 80047d2:	d020      	beq.n	8004816 <_printf_i+0xae>
 80047d4:	2a78      	cmp	r2, #120	; 0x78
 80047d6:	d1de      	bne.n	8004796 <_printf_i+0x2e>
 80047d8:	0022      	movs	r2, r4
 80047da:	2178      	movs	r1, #120	; 0x78
 80047dc:	3245      	adds	r2, #69	; 0x45
 80047de:	7011      	strb	r1, [r2, #0]
 80047e0:	4a6c      	ldr	r2, [pc, #432]	; (8004994 <_printf_i+0x22c>)
 80047e2:	e030      	b.n	8004846 <_printf_i+0xde>
 80047e4:	000e      	movs	r6, r1
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	3642      	adds	r6, #66	; 0x42
 80047ea:	1d11      	adds	r1, r2, #4
 80047ec:	6019      	str	r1, [r3, #0]
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	7033      	strb	r3, [r6, #0]
 80047f2:	2301      	movs	r3, #1
 80047f4:	e079      	b.n	80048ea <_printf_i+0x182>
 80047f6:	0649      	lsls	r1, r1, #25
 80047f8:	d5d9      	bpl.n	80047ae <_printf_i+0x46>
 80047fa:	1d11      	adds	r1, r2, #4
 80047fc:	6019      	str	r1, [r3, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	5ed5      	ldrsh	r5, [r2, r3]
 8004802:	2d00      	cmp	r5, #0
 8004804:	da03      	bge.n	800480e <_printf_i+0xa6>
 8004806:	232d      	movs	r3, #45	; 0x2d
 8004808:	9a04      	ldr	r2, [sp, #16]
 800480a:	426d      	negs	r5, r5
 800480c:	7013      	strb	r3, [r2, #0]
 800480e:	4b62      	ldr	r3, [pc, #392]	; (8004998 <_printf_i+0x230>)
 8004810:	270a      	movs	r7, #10
 8004812:	9303      	str	r3, [sp, #12]
 8004814:	e02f      	b.n	8004876 <_printf_i+0x10e>
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	0605      	lsls	r5, r0, #24
 800481c:	d503      	bpl.n	8004826 <_printf_i+0xbe>
 800481e:	1d08      	adds	r0, r1, #4
 8004820:	6018      	str	r0, [r3, #0]
 8004822:	680d      	ldr	r5, [r1, #0]
 8004824:	e005      	b.n	8004832 <_printf_i+0xca>
 8004826:	0640      	lsls	r0, r0, #25
 8004828:	d5f9      	bpl.n	800481e <_printf_i+0xb6>
 800482a:	680d      	ldr	r5, [r1, #0]
 800482c:	1d08      	adds	r0, r1, #4
 800482e:	6018      	str	r0, [r3, #0]
 8004830:	b2ad      	uxth	r5, r5
 8004832:	4b59      	ldr	r3, [pc, #356]	; (8004998 <_printf_i+0x230>)
 8004834:	2708      	movs	r7, #8
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	2a6f      	cmp	r2, #111	; 0x6f
 800483a:	d018      	beq.n	800486e <_printf_i+0x106>
 800483c:	270a      	movs	r7, #10
 800483e:	e016      	b.n	800486e <_printf_i+0x106>
 8004840:	3145      	adds	r1, #69	; 0x45
 8004842:	700a      	strb	r2, [r1, #0]
 8004844:	4a54      	ldr	r2, [pc, #336]	; (8004998 <_printf_i+0x230>)
 8004846:	9203      	str	r2, [sp, #12]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	6821      	ldr	r1, [r4, #0]
 800484c:	1d10      	adds	r0, r2, #4
 800484e:	6018      	str	r0, [r3, #0]
 8004850:	6815      	ldr	r5, [r2, #0]
 8004852:	0608      	lsls	r0, r1, #24
 8004854:	d522      	bpl.n	800489c <_printf_i+0x134>
 8004856:	07cb      	lsls	r3, r1, #31
 8004858:	d502      	bpl.n	8004860 <_printf_i+0xf8>
 800485a:	2320      	movs	r3, #32
 800485c:	4319      	orrs	r1, r3
 800485e:	6021      	str	r1, [r4, #0]
 8004860:	2710      	movs	r7, #16
 8004862:	2d00      	cmp	r5, #0
 8004864:	d103      	bne.n	800486e <_printf_i+0x106>
 8004866:	2320      	movs	r3, #32
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	439a      	bics	r2, r3
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	0023      	movs	r3, r4
 8004870:	2200      	movs	r2, #0
 8004872:	3343      	adds	r3, #67	; 0x43
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db5c      	blt.n	8004938 <_printf_i+0x1d0>
 800487e:	2204      	movs	r2, #4
 8004880:	6821      	ldr	r1, [r4, #0]
 8004882:	4391      	bics	r1, r2
 8004884:	6021      	str	r1, [r4, #0]
 8004886:	2d00      	cmp	r5, #0
 8004888:	d158      	bne.n	800493c <_printf_i+0x1d4>
 800488a:	9e04      	ldr	r6, [sp, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d064      	beq.n	800495a <_printf_i+0x1f2>
 8004890:	0026      	movs	r6, r4
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	3642      	adds	r6, #66	; 0x42
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	7033      	strb	r3, [r6, #0]
 800489a:	e05e      	b.n	800495a <_printf_i+0x1f2>
 800489c:	0648      	lsls	r0, r1, #25
 800489e:	d5da      	bpl.n	8004856 <_printf_i+0xee>
 80048a0:	b2ad      	uxth	r5, r5
 80048a2:	e7d8      	b.n	8004856 <_printf_i+0xee>
 80048a4:	6809      	ldr	r1, [r1, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	0608      	lsls	r0, r1, #24
 80048aa:	d505      	bpl.n	80048b8 <_printf_i+0x150>
 80048ac:	1d11      	adds	r1, r2, #4
 80048ae:	6019      	str	r1, [r3, #0]
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	6962      	ldr	r2, [r4, #20]
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e006      	b.n	80048c6 <_printf_i+0x15e>
 80048b8:	0649      	lsls	r1, r1, #25
 80048ba:	d5f7      	bpl.n	80048ac <_printf_i+0x144>
 80048bc:	1d11      	adds	r1, r2, #4
 80048be:	6019      	str	r1, [r3, #0]
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	8aa2      	ldrh	r2, [r4, #20]
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9e04      	ldr	r6, [sp, #16]
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	e054      	b.n	8004978 <_printf_i+0x210>
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	1d11      	adds	r1, r2, #4
 80048d2:	6019      	str	r1, [r3, #0]
 80048d4:	6816      	ldr	r6, [r2, #0]
 80048d6:	2100      	movs	r1, #0
 80048d8:	6862      	ldr	r2, [r4, #4]
 80048da:	0030      	movs	r0, r6
 80048dc:	f000 f85e 	bl	800499c <memchr>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d001      	beq.n	80048e8 <_printf_i+0x180>
 80048e4:	1b80      	subs	r0, r0, r6
 80048e6:	6060      	str	r0, [r4, #4]
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	2300      	movs	r3, #0
 80048ee:	9a04      	ldr	r2, [sp, #16]
 80048f0:	7013      	strb	r3, [r2, #0]
 80048f2:	e041      	b.n	8004978 <_printf_i+0x210>
 80048f4:	6923      	ldr	r3, [r4, #16]
 80048f6:	0032      	movs	r2, r6
 80048f8:	9906      	ldr	r1, [sp, #24]
 80048fa:	9805      	ldr	r0, [sp, #20]
 80048fc:	9d07      	ldr	r5, [sp, #28]
 80048fe:	47a8      	blx	r5
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d043      	beq.n	800498c <_printf_i+0x224>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	2500      	movs	r5, #0
 8004908:	079b      	lsls	r3, r3, #30
 800490a:	d40f      	bmi.n	800492c <_printf_i+0x1c4>
 800490c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490e:	68e0      	ldr	r0, [r4, #12]
 8004910:	4298      	cmp	r0, r3
 8004912:	da3d      	bge.n	8004990 <_printf_i+0x228>
 8004914:	0018      	movs	r0, r3
 8004916:	e03b      	b.n	8004990 <_printf_i+0x228>
 8004918:	0022      	movs	r2, r4
 800491a:	2301      	movs	r3, #1
 800491c:	3219      	adds	r2, #25
 800491e:	9906      	ldr	r1, [sp, #24]
 8004920:	9805      	ldr	r0, [sp, #20]
 8004922:	9e07      	ldr	r6, [sp, #28]
 8004924:	47b0      	blx	r6
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d030      	beq.n	800498c <_printf_i+0x224>
 800492a:	3501      	adds	r5, #1
 800492c:	68e3      	ldr	r3, [r4, #12]
 800492e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	429d      	cmp	r5, r3
 8004934:	dbf0      	blt.n	8004918 <_printf_i+0x1b0>
 8004936:	e7e9      	b.n	800490c <_printf_i+0x1a4>
 8004938:	2d00      	cmp	r5, #0
 800493a:	d0a9      	beq.n	8004890 <_printf_i+0x128>
 800493c:	9e04      	ldr	r6, [sp, #16]
 800493e:	0028      	movs	r0, r5
 8004940:	0039      	movs	r1, r7
 8004942:	f7fb fc71 	bl	8000228 <__aeabi_uidivmod>
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	3e01      	subs	r6, #1
 800494a:	5c5b      	ldrb	r3, [r3, r1]
 800494c:	0028      	movs	r0, r5
 800494e:	7033      	strb	r3, [r6, #0]
 8004950:	0039      	movs	r1, r7
 8004952:	f7fb fbe3 	bl	800011c <__udivsi3>
 8004956:	1e05      	subs	r5, r0, #0
 8004958:	d1f1      	bne.n	800493e <_printf_i+0x1d6>
 800495a:	2f08      	cmp	r7, #8
 800495c:	d109      	bne.n	8004972 <_printf_i+0x20a>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	07db      	lsls	r3, r3, #31
 8004962:	d506      	bpl.n	8004972 <_printf_i+0x20a>
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	6922      	ldr	r2, [r4, #16]
 8004968:	4293      	cmp	r3, r2
 800496a:	dc02      	bgt.n	8004972 <_printf_i+0x20a>
 800496c:	2330      	movs	r3, #48	; 0x30
 800496e:	3e01      	subs	r6, #1
 8004970:	7033      	strb	r3, [r6, #0]
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	aa09      	add	r2, sp, #36	; 0x24
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	0021      	movs	r1, r4
 8004980:	9b06      	ldr	r3, [sp, #24]
 8004982:	9805      	ldr	r0, [sp, #20]
 8004984:	f7ff fe82 	bl	800468c <_printf_common>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d1b3      	bne.n	80048f4 <_printf_i+0x18c>
 800498c:	2001      	movs	r0, #1
 800498e:	4240      	negs	r0, r0
 8004990:	b00b      	add	sp, #44	; 0x2c
 8004992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004994:	08004f6e 	.word	0x08004f6e
 8004998:	08004f5d 	.word	0x08004f5d

0800499c <memchr>:
 800499c:	b2c9      	uxtb	r1, r1
 800499e:	1882      	adds	r2, r0, r2
 80049a0:	4290      	cmp	r0, r2
 80049a2:	d101      	bne.n	80049a8 <memchr+0xc>
 80049a4:	2000      	movs	r0, #0
 80049a6:	4770      	bx	lr
 80049a8:	7803      	ldrb	r3, [r0, #0]
 80049aa:	428b      	cmp	r3, r1
 80049ac:	d0fb      	beq.n	80049a6 <memchr+0xa>
 80049ae:	3001      	adds	r0, #1
 80049b0:	e7f6      	b.n	80049a0 <memchr+0x4>

080049b2 <memmove>:
 80049b2:	b510      	push	{r4, lr}
 80049b4:	4288      	cmp	r0, r1
 80049b6:	d902      	bls.n	80049be <memmove+0xc>
 80049b8:	188b      	adds	r3, r1, r2
 80049ba:	4298      	cmp	r0, r3
 80049bc:	d308      	bcc.n	80049d0 <memmove+0x1e>
 80049be:	2300      	movs	r3, #0
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d007      	beq.n	80049d4 <memmove+0x22>
 80049c4:	5ccc      	ldrb	r4, [r1, r3]
 80049c6:	54c4      	strb	r4, [r0, r3]
 80049c8:	3301      	adds	r3, #1
 80049ca:	e7f9      	b.n	80049c0 <memmove+0xe>
 80049cc:	5c8b      	ldrb	r3, [r1, r2]
 80049ce:	5483      	strb	r3, [r0, r2]
 80049d0:	3a01      	subs	r2, #1
 80049d2:	d2fb      	bcs.n	80049cc <memmove+0x1a>
 80049d4:	bd10      	pop	{r4, pc}
	...

080049d8 <_free_r>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	0005      	movs	r5, r0
 80049dc:	2900      	cmp	r1, #0
 80049de:	d010      	beq.n	8004a02 <_free_r+0x2a>
 80049e0:	1f0c      	subs	r4, r1, #4
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	da00      	bge.n	80049ea <_free_r+0x12>
 80049e8:	18e4      	adds	r4, r4, r3
 80049ea:	0028      	movs	r0, r5
 80049ec:	f000 f8d4 	bl	8004b98 <__malloc_lock>
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <_free_r+0x90>)
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <_free_r+0x2c>
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6014      	str	r4, [r2, #0]
 80049fc:	0028      	movs	r0, r5
 80049fe:	f000 f8cc 	bl	8004b9a <__malloc_unlock>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	d909      	bls.n	8004a1c <_free_r+0x44>
 8004a08:	6821      	ldr	r1, [r4, #0]
 8004a0a:	1860      	adds	r0, r4, r1
 8004a0c:	4283      	cmp	r3, r0
 8004a0e:	d1f3      	bne.n	80049f8 <_free_r+0x20>
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	1841      	adds	r1, r0, r1
 8004a16:	6021      	str	r1, [r4, #0]
 8004a18:	e7ee      	b.n	80049f8 <_free_r+0x20>
 8004a1a:	0013      	movs	r3, r2
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	2a00      	cmp	r2, #0
 8004a20:	d001      	beq.n	8004a26 <_free_r+0x4e>
 8004a22:	42a2      	cmp	r2, r4
 8004a24:	d9f9      	bls.n	8004a1a <_free_r+0x42>
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	1858      	adds	r0, r3, r1
 8004a2a:	42a0      	cmp	r0, r4
 8004a2c:	d10b      	bne.n	8004a46 <_free_r+0x6e>
 8004a2e:	6820      	ldr	r0, [r4, #0]
 8004a30:	1809      	adds	r1, r1, r0
 8004a32:	1858      	adds	r0, r3, r1
 8004a34:	6019      	str	r1, [r3, #0]
 8004a36:	4282      	cmp	r2, r0
 8004a38:	d1e0      	bne.n	80049fc <_free_r+0x24>
 8004a3a:	6810      	ldr	r0, [r2, #0]
 8004a3c:	6852      	ldr	r2, [r2, #4]
 8004a3e:	1841      	adds	r1, r0, r1
 8004a40:	6019      	str	r1, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	e7da      	b.n	80049fc <_free_r+0x24>
 8004a46:	42a0      	cmp	r0, r4
 8004a48:	d902      	bls.n	8004a50 <_free_r+0x78>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	e7d5      	b.n	80049fc <_free_r+0x24>
 8004a50:	6821      	ldr	r1, [r4, #0]
 8004a52:	1860      	adds	r0, r4, r1
 8004a54:	4282      	cmp	r2, r0
 8004a56:	d103      	bne.n	8004a60 <_free_r+0x88>
 8004a58:	6810      	ldr	r0, [r2, #0]
 8004a5a:	6852      	ldr	r2, [r2, #4]
 8004a5c:	1841      	adds	r1, r0, r1
 8004a5e:	6021      	str	r1, [r4, #0]
 8004a60:	6062      	str	r2, [r4, #4]
 8004a62:	605c      	str	r4, [r3, #4]
 8004a64:	e7ca      	b.n	80049fc <_free_r+0x24>
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	20000278 	.word	0x20000278

08004a6c <_malloc_r>:
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	1ccd      	adds	r5, r1, #3
 8004a72:	439d      	bics	r5, r3
 8004a74:	3508      	adds	r5, #8
 8004a76:	0006      	movs	r6, r0
 8004a78:	2d0c      	cmp	r5, #12
 8004a7a:	d21e      	bcs.n	8004aba <_malloc_r+0x4e>
 8004a7c:	250c      	movs	r5, #12
 8004a7e:	42a9      	cmp	r1, r5
 8004a80:	d81d      	bhi.n	8004abe <_malloc_r+0x52>
 8004a82:	0030      	movs	r0, r6
 8004a84:	f000 f888 	bl	8004b98 <__malloc_lock>
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <_malloc_r+0xb4>)
 8004a8a:	6814      	ldr	r4, [r2, #0]
 8004a8c:	0021      	movs	r1, r4
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	d119      	bne.n	8004ac6 <_malloc_r+0x5a>
 8004a92:	4c24      	ldr	r4, [pc, #144]	; (8004b24 <_malloc_r+0xb8>)
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <_malloc_r+0x36>
 8004a9a:	0030      	movs	r0, r6
 8004a9c:	f000 f86a 	bl	8004b74 <_sbrk_r>
 8004aa0:	6020      	str	r0, [r4, #0]
 8004aa2:	0029      	movs	r1, r5
 8004aa4:	0030      	movs	r0, r6
 8004aa6:	f000 f865 	bl	8004b74 <_sbrk_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d12c      	bne.n	8004b08 <_malloc_r+0x9c>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	0030      	movs	r0, r6
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	f000 f871 	bl	8004b9a <__malloc_unlock>
 8004ab8:	e003      	b.n	8004ac2 <_malloc_r+0x56>
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	dadf      	bge.n	8004a7e <_malloc_r+0x12>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	1b5b      	subs	r3, r3, r5
 8004aca:	d41a      	bmi.n	8004b02 <_malloc_r+0x96>
 8004acc:	2b0b      	cmp	r3, #11
 8004ace:	d903      	bls.n	8004ad8 <_malloc_r+0x6c>
 8004ad0:	600b      	str	r3, [r1, #0]
 8004ad2:	18cc      	adds	r4, r1, r3
 8004ad4:	6025      	str	r5, [r4, #0]
 8004ad6:	e003      	b.n	8004ae0 <_malloc_r+0x74>
 8004ad8:	428c      	cmp	r4, r1
 8004ada:	d10e      	bne.n	8004afa <_malloc_r+0x8e>
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	0030      	movs	r0, r6
 8004ae2:	f000 f85a 	bl	8004b9a <__malloc_unlock>
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	2207      	movs	r2, #7
 8004aea:	300b      	adds	r0, #11
 8004aec:	1d23      	adds	r3, r4, #4
 8004aee:	4390      	bics	r0, r2
 8004af0:	1ac3      	subs	r3, r0, r3
 8004af2:	d0e7      	beq.n	8004ac4 <_malloc_r+0x58>
 8004af4:	425a      	negs	r2, r3
 8004af6:	50e2      	str	r2, [r4, r3]
 8004af8:	e7e4      	b.n	8004ac4 <_malloc_r+0x58>
 8004afa:	684b      	ldr	r3, [r1, #4]
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	000c      	movs	r4, r1
 8004b00:	e7ee      	b.n	8004ae0 <_malloc_r+0x74>
 8004b02:	000c      	movs	r4, r1
 8004b04:	6849      	ldr	r1, [r1, #4]
 8004b06:	e7c2      	b.n	8004a8e <_malloc_r+0x22>
 8004b08:	2303      	movs	r3, #3
 8004b0a:	1cc4      	adds	r4, r0, #3
 8004b0c:	439c      	bics	r4, r3
 8004b0e:	42a0      	cmp	r0, r4
 8004b10:	d0e0      	beq.n	8004ad4 <_malloc_r+0x68>
 8004b12:	1a21      	subs	r1, r4, r0
 8004b14:	0030      	movs	r0, r6
 8004b16:	f000 f82d 	bl	8004b74 <_sbrk_r>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d1da      	bne.n	8004ad4 <_malloc_r+0x68>
 8004b1e:	e7c6      	b.n	8004aae <_malloc_r+0x42>
 8004b20:	20000278 	.word	0x20000278
 8004b24:	2000027c 	.word	0x2000027c

08004b28 <_realloc_r>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	0007      	movs	r7, r0
 8004b2c:	000d      	movs	r5, r1
 8004b2e:	0016      	movs	r6, r2
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d105      	bne.n	8004b40 <_realloc_r+0x18>
 8004b34:	0011      	movs	r1, r2
 8004b36:	f7ff ff99 	bl	8004a6c <_malloc_r>
 8004b3a:	0004      	movs	r4, r0
 8004b3c:	0020      	movs	r0, r4
 8004b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d103      	bne.n	8004b4c <_realloc_r+0x24>
 8004b44:	f7ff ff48 	bl	80049d8 <_free_r>
 8004b48:	0034      	movs	r4, r6
 8004b4a:	e7f7      	b.n	8004b3c <_realloc_r+0x14>
 8004b4c:	f000 f826 	bl	8004b9c <_malloc_usable_size_r>
 8004b50:	002c      	movs	r4, r5
 8004b52:	4286      	cmp	r6, r0
 8004b54:	d9f2      	bls.n	8004b3c <_realloc_r+0x14>
 8004b56:	0031      	movs	r1, r6
 8004b58:	0038      	movs	r0, r7
 8004b5a:	f7ff ff87 	bl	8004a6c <_malloc_r>
 8004b5e:	1e04      	subs	r4, r0, #0
 8004b60:	d0ec      	beq.n	8004b3c <_realloc_r+0x14>
 8004b62:	0029      	movs	r1, r5
 8004b64:	0032      	movs	r2, r6
 8004b66:	f7ff fbe1 	bl	800432c <memcpy>
 8004b6a:	0029      	movs	r1, r5
 8004b6c:	0038      	movs	r0, r7
 8004b6e:	f7ff ff33 	bl	80049d8 <_free_r>
 8004b72:	e7e3      	b.n	8004b3c <_realloc_r+0x14>

08004b74 <_sbrk_r>:
 8004b74:	2300      	movs	r3, #0
 8004b76:	b570      	push	{r4, r5, r6, lr}
 8004b78:	4c06      	ldr	r4, [pc, #24]	; (8004b94 <_sbrk_r+0x20>)
 8004b7a:	0005      	movs	r5, r0
 8004b7c:	0008      	movs	r0, r1
 8004b7e:	6023      	str	r3, [r4, #0]
 8004b80:	f000 f814 	bl	8004bac <_sbrk>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d103      	bne.n	8004b90 <_sbrk_r+0x1c>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d000      	beq.n	8004b90 <_sbrk_r+0x1c>
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	20000618 	.word	0x20000618

08004b98 <__malloc_lock>:
 8004b98:	4770      	bx	lr

08004b9a <__malloc_unlock>:
 8004b9a:	4770      	bx	lr

08004b9c <_malloc_usable_size_r>:
 8004b9c:	1f0b      	subs	r3, r1, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	1f18      	subs	r0, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da01      	bge.n	8004baa <_malloc_usable_size_r+0xe>
 8004ba6:	580b      	ldr	r3, [r1, r0]
 8004ba8:	18c0      	adds	r0, r0, r3
 8004baa:	4770      	bx	lr

08004bac <_sbrk>:
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <_sbrk+0x18>)
 8004bae:	0002      	movs	r2, r0
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d101      	bne.n	8004bba <_sbrk+0xe>
 8004bb6:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <_sbrk+0x1c>)
 8004bb8:	6019      	str	r1, [r3, #0]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	1882      	adds	r2, r0, r2
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	20000280 	.word	0x20000280
 8004bc8:	2000061c 	.word	0x2000061c

08004bcc <_init>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_fini>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr
